(()=>{var __webpack_modules__={150:g=>{"use strict";g.exports=JSON.parse('{"router":"0:319cff1d2a3669d599291d270cfb475b8de644e88c418a93ad03cad09519a557"}')},579:g=>{"use strict";g.exports=JSON.parse('{"ABI version":2,"version":"2.2","header":["pubkey","time","expire"],"functions":[{"name":"constructor","inputs":[{"name":"router","type":"address"},{"name":"ownerPubkey","type":"uint256"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"color","type":"tuple"},{"name":"energy","type":"uint128"}],"outputs":[]},{"name":"getRouter","inputs":[],"outputs":[{"name":"router","type":"address"}]},{"name":"getDetails","inputs":[],"outputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"color","type":"tuple"},{"name":"level","type":"uint128"},{"name":"energy","type":"uint128"},{"name":"energySec","type":"uint128"},{"name":"energyMax","type":"uint128"},{"name":"lastCalcTime","type":"uint128"},{"name":"owner","type":"uint256"}]},{"name":"calculateEnergy","inputs":[],"outputs":[{"name":"energy","type":"uint128"}]},{"name":"markCell","inputs":[{"name":"sendGasTo","type":"address"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"targetCoord","type":"tuple"},{"name":"energy","type":"uint128"}],"outputs":[]},{"name":"helpCell","inputs":[{"name":"sendGasTo","type":"address"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"targetCoord","type":"tuple"},{"name":"energy","type":"uint128"}],"outputs":[]},{"name":"_helpCell","inputs":[{"name":"sendGasTo","type":"address"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"color","type":"tuple"},{"name":"energy","type":"uint128"}],"outputs":[]},{"name":"attkCell","inputs":[{"name":"sendGasTo","type":"address"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"targetCoord","type":"tuple"},{"name":"energy","type":"uint128"}],"outputs":[]},{"name":"_attkCell","inputs":[{"name":"sendGasTo","type":"address"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"color","type":"tuple"},{"name":"energy","type":"uint128"}],"outputs":[]},{"name":"upgradeCell","inputs":[{"name":"sendGasTo","type":"address"}],"outputs":[]},{"name":"_resolveCell","inputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"}],"outputs":[{"name":"cellAddress","type":"address"}]},{"name":"getOwner","inputs":[],"outputs":[{"name":"pubkey","type":"uint256"}]},{"name":"owner","inputs":[{"name":"answerId","type":"uint32"}],"outputs":[{"name":"pubkey","type":"uint256"}]},{"name":"transferOwnership","inputs":[{"name":"newOwner","type":"uint256"}],"outputs":[]}],"data":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"key":1,"name":"_coord","type":"tuple"}],"events":[{"name":"OwnershipTransferred","inputs":[{"name":"oldOwner","type":"uint256"},{"name":"newOwner","type":"uint256"}],"outputs":[]}],"fields":[{"name":"_pubkey","type":"uint256"},{"name":"_timestamp","type":"uint64"},{"name":"_constructorFlag","type":"bool"},{"name":"_owner","type":"uint256"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"_coord","type":"tuple"},{"name":"_costPerLevel","type":"uint128[]"},{"name":"_energyPerLevel","type":"uint128[]"},{"name":"_energyPerLevelMax","type":"uint128[]"},{"name":"_router","type":"address"},{"name":"_level","type":"uint128"},{"name":"_energy","type":"uint128"},{"name":"_lastCalcTime","type":"uint128"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"_color","type":"tuple"}]}')},750:g=>{"use strict";g.exports=JSON.parse('{"ABI version":2,"version":"2.2","header":["pubkey","time","expire"],"functions":[{"name":"constructor","inputs":[{"name":"ownerPubkey","type":"uint256"},{"name":"codeCell","type":"cell"}],"outputs":[]},{"name":"getDetails","inputs":[],"outputs":[{"name":"nonce","type":"uint16"},{"name":"owner","type":"uint256"}]},{"name":"getAddressCells","inputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coords","type":"tuple[]"}],"outputs":[{"name":"addreses","type":"address[]"}]},{"name":"newGame","inputs":[{"name":"sendGasTo","type":"address"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"baseCoord","type":"tuple"}],"outputs":[]},{"name":"_newCell","inputs":[{"name":"sendGasTo","type":"address"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"baseCoord","type":"tuple"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"targetCoord","type":"tuple"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"color","type":"tuple"},{"name":"energy","type":"uint128"}],"outputs":[]},{"name":"_resolveCell","inputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"}],"outputs":[{"name":"cellAddress","type":"address"}]},{"name":"getOwner","inputs":[],"outputs":[{"name":"pubkey","type":"uint256"}]},{"name":"owner","inputs":[{"name":"answerId","type":"uint32"}],"outputs":[{"name":"pubkey","type":"uint256"}]},{"name":"transferOwnership","inputs":[{"name":"newOwner","type":"uint256"}],"outputs":[]}],"data":[{"key":1,"name":"_nonce","type":"uint16"}],"events":[{"name":"CellCreated","inputs":[{"name":"owner","type":"uint256"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"}],"outputs":[]},{"name":"OwnershipTransferred","inputs":[{"name":"oldOwner","type":"uint256"},{"name":"newOwner","type":"uint256"}],"outputs":[]}],"fields":[{"name":"_pubkey","type":"uint256"},{"name":"_timestamp","type":"uint64"},{"name":"_constructorFlag","type":"bool"},{"name":"_owner","type":"uint256"},{"name":"_nonce","type":"uint16"},{"name":"_codeCell","type":"cell"}]}')},68:(__unused_webpack_module,exports)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Mutex = exports.Semaphore = void 0;\nfunction ensureCallable(fn) {\n    if (typeof fn !== 'function')\n        throw new TypeError(fn + \" is not a function\");\n    return fn;\n}\nfunction byObserver(Observer) {\n    const node = document.createTextNode('');\n    let queue, currentQueue, bit = 0, i = 0;\n    new Observer(function () {\n        let callback;\n        if (!queue) {\n            if (!currentQueue)\n                return;\n            queue = currentQueue;\n        }\n        else if (currentQueue) {\n            queue = currentQueue.slice(i).concat(queue);\n        }\n        currentQueue = queue;\n        queue = null;\n        i = 0;\n        if (typeof currentQueue === 'function') {\n            callback = currentQueue;\n            currentQueue = null;\n            callback();\n            return;\n        }\n        node.data = (bit = ++bit % 2); // Invoke other batch, to handle leftover callbacks in case of crash\n        while (i < currentQueue.length) {\n            callback = currentQueue[i];\n            i++;\n            if (i === currentQueue.length)\n                currentQueue = null;\n            callback();\n        }\n    }).observe(node, { characterData: true });\n    return function (fn) {\n        ensureCallable(fn);\n        if (queue) {\n            if (typeof queue === 'function')\n                queue = [queue, fn];\n            else\n                queue.push(fn);\n            return;\n        }\n        queue = fn;\n        node.data = (bit = ++bit % 2);\n    };\n}\nconst nextTick = (function () {\n    // queueMicrotask\n    if (typeof queueMicrotask === \"function\") {\n        return function (cb) {\n            queueMicrotask(ensureCallable(cb));\n        };\n    }\n    // MutationObserver\n    if ((typeof document === 'object') && document) {\n        if (typeof MutationObserver === 'function')\n            return byObserver(MutationObserver);\n        if (typeof window.WebKitMutationObserver === 'function')\n            return byObserver(window.WebKitMutationObserver);\n    }\n    // W3C Draft\n    // http://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html\n    if (typeof setImmediate === 'function') {\n        return function (cb) {\n            setImmediate(ensureCallable(cb));\n        };\n    }\n    // Wide available standard\n    if ((typeof setTimeout === 'function') || (typeof setTimeout === 'object')) {\n        return function (cb) {\n            setTimeout(ensureCallable(cb), 0);\n        };\n    }\n    throw new Error('No `nextTick` implementation found');\n}());\nclass Semaphore {\n    constructor(count) {\n        this.tasks = [];\n        this.count = count;\n    }\n    sched() {\n        if (this.count > 0 && this.tasks.length > 0) {\n            this.count--;\n            let next = this.tasks.shift();\n            if (next === undefined) {\n                throw \"Unexpected undefined value in tasks list\";\n            }\n            next();\n        }\n    }\n    acquire() {\n        return new Promise((res, _rej) => {\n            const task = () => {\n                let released = false;\n                res(() => {\n                    if (!released) {\n                        released = true;\n                        this.count++;\n                        this.sched();\n                    }\n                });\n            };\n            this.tasks.push(task);\n            nextTick(this.sched.bind(this));\n        });\n    }\n    use(f) {\n        return this.acquire()\n            .then(release => {\n            return f()\n                .then((res) => {\n                release();\n                return res;\n            })\n                .catch((err) => {\n                release();\n                throw err;\n            });\n        });\n    }\n}\nexports.Semaphore = Semaphore;\nclass Mutex extends Semaphore {\n    constructor() {\n        super(1);\n    }\n}\nexports.Mutex = Mutex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjguanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZXgtYmF0dGxlLWdhbWUvLi9ub2RlX21vZHVsZXMvQGJyb3h1cy9hd2FpdC1zZW1hcGhvcmUvZGlzdC9pbmRleC5qcz83YWNmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NdXRleCA9IGV4cG9ydHMuU2VtYXBob3JlID0gdm9pZCAwO1xuZnVuY3Rpb24gZW5zdXJlQ2FsbGFibGUoZm4pIHtcbiAgICBpZiAodHlwZW9mIGZuICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGZuICsgXCIgaXMgbm90IGEgZnVuY3Rpb25cIik7XG4gICAgcmV0dXJuIGZuO1xufVxuZnVuY3Rpb24gYnlPYnNlcnZlcihPYnNlcnZlcikge1xuICAgIGNvbnN0IG5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSgnJyk7XG4gICAgbGV0IHF1ZXVlLCBjdXJyZW50UXVldWUsIGJpdCA9IDAsIGkgPSAwO1xuICAgIG5ldyBPYnNlcnZlcihmdW5jdGlvbiAoKSB7XG4gICAgICAgIGxldCBjYWxsYmFjaztcbiAgICAgICAgaWYgKCFxdWV1ZSkge1xuICAgICAgICAgICAgaWYgKCFjdXJyZW50UXVldWUpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgcXVldWUgPSBjdXJyZW50UXVldWU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5zbGljZShpKS5jb25jYXQocXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IG51bGw7XG4gICAgICAgIGkgPSAwO1xuICAgICAgICBpZiAodHlwZW9mIGN1cnJlbnRRdWV1ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgY2FsbGJhY2sgPSBjdXJyZW50UXVldWU7XG4gICAgICAgICAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgICAgICAgICAgY2FsbGJhY2soKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBub2RlLmRhdGEgPSAoYml0ID0gKytiaXQgJSAyKTsgLy8gSW52b2tlIG90aGVyIGJhdGNoLCB0byBoYW5kbGUgbGVmdG92ZXIgY2FsbGJhY2tzIGluIGNhc2Ugb2YgY3Jhc2hcbiAgICAgICAgd2hpbGUgKGkgPCBjdXJyZW50UXVldWUubGVuZ3RoKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGN1cnJlbnRRdWV1ZVtpXTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIGlmIChpID09PSBjdXJyZW50UXVldWUubGVuZ3RoKVxuICAgICAgICAgICAgICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICB9XG4gICAgfSkub2JzZXJ2ZShub2RlLCB7IGNoYXJhY3RlckRhdGE6IHRydWUgfSk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChmbikge1xuICAgICAgICBlbnN1cmVDYWxsYWJsZShmbik7XG4gICAgICAgIGlmIChxdWV1ZSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBxdWV1ZSA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgICAgICBxdWV1ZSA9IFtxdWV1ZSwgZm5dO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHF1ZXVlLnB1c2goZm4pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHF1ZXVlID0gZm47XG4gICAgICAgIG5vZGUuZGF0YSA9IChiaXQgPSArK2JpdCAlIDIpO1xuICAgIH07XG59XG5jb25zdCBuZXh0VGljayA9IChmdW5jdGlvbiAoKSB7XG4gICAgLy8gcXVldWVNaWNyb3Rhc2tcbiAgICBpZiAodHlwZW9mIHF1ZXVlTWljcm90YXNrID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgcXVldWVNaWNyb3Rhc2soZW5zdXJlQ2FsbGFibGUoY2IpKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLy8gTXV0YXRpb25PYnNlcnZlclxuICAgIGlmICgodHlwZW9mIGRvY3VtZW50ID09PSAnb2JqZWN0JykgJiYgZG9jdW1lbnQpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgcmV0dXJuIGJ5T2JzZXJ2ZXIoTXV0YXRpb25PYnNlcnZlcik7XG4gICAgICAgIGlmICh0eXBlb2Ygd2luZG93LldlYktpdE11dGF0aW9uT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICByZXR1cm4gYnlPYnNlcnZlcih3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlcik7XG4gICAgfVxuICAgIC8vIFczQyBEcmFmdFxuICAgIC8vIGh0dHA6Ly9kdmNzLnczLm9yZy9oZy93ZWJwZXJmL3Jhdy1maWxlL3RpcC9zcGVjcy9zZXRJbW1lZGlhdGUvT3ZlcnZpZXcuaHRtbFxuICAgIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICAgIHNldEltbWVkaWF0ZShlbnN1cmVDYWxsYWJsZShjYikpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBXaWRlIGF2YWlsYWJsZSBzdGFuZGFyZFxuICAgIGlmICgodHlwZW9mIHNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHx8ICh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ29iamVjdCcpKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoY2IpIHtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZW5zdXJlQ2FsbGFibGUoY2IpLCAwKTtcbiAgICAgICAgfTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKCdObyBgbmV4dFRpY2tgIGltcGxlbWVudGF0aW9uIGZvdW5kJyk7XG59KCkpO1xuY2xhc3MgU2VtYXBob3JlIHtcbiAgICBjb25zdHJ1Y3Rvcihjb3VudCkge1xuICAgICAgICB0aGlzLnRhc2tzID0gW107XG4gICAgICAgIHRoaXMuY291bnQgPSBjb3VudDtcbiAgICB9XG4gICAgc2NoZWQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNvdW50ID4gMCAmJiB0aGlzLnRhc2tzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuY291bnQtLTtcbiAgICAgICAgICAgIGxldCBuZXh0ID0gdGhpcy50YXNrcy5zaGlmdCgpO1xuICAgICAgICAgICAgaWYgKG5leHQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRocm93IFwiVW5leHBlY3RlZCB1bmRlZmluZWQgdmFsdWUgaW4gdGFza3MgbGlzdFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV4dCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGFjcXVpcmUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzLCBfcmVqKSA9PiB7XG4gICAgICAgICAgICBjb25zdCB0YXNrID0gKCkgPT4ge1xuICAgICAgICAgICAgICAgIGxldCByZWxlYXNlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJlcygoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghcmVsZWFzZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbGVhc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY291bnQrKztcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWQoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIHRoaXMudGFza3MucHVzaCh0YXNrKTtcbiAgICAgICAgICAgIG5leHRUaWNrKHRoaXMuc2NoZWQuYmluZCh0aGlzKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB1c2UoZikge1xuICAgICAgICByZXR1cm4gdGhpcy5hY3F1aXJlKClcbiAgICAgICAgICAgIC50aGVuKHJlbGVhc2UgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGYoKVxuICAgICAgICAgICAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICAgICAgICByZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgICAgICByZWxlYXNlKCk7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuU2VtYXBob3JlID0gU2VtYXBob3JlO1xuY2xhc3MgTXV0ZXggZXh0ZW5kcyBTZW1hcGhvcmUge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigxKTtcbiAgICB9XG59XG5leHBvcnRzLk11dGV4ID0gTXV0ZXg7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///68\n")},612:(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";eval('\n// NAMESPACE OBJECT: ./src/scripts/ever.js\nvar ever_namespaceObject = {};\n__webpack_require__.r(ever_namespaceObject);\n__webpack_require__.d(ever_namespaceObject, {\n  "attkCell": () => (attkCell),\n  "getAddressCells": () => (getAddressCells),\n  "getDetailsCell": () => (getDetailsCell),\n  "helpCell": () => (helpCell),\n  "init": () => (init),\n  "markCell": () => (markCell),\n  "newGame": () => (newGame),\n  "routerDetails": () => (routerDetails),\n  "subscribeCellState": () => (subscribeCellState),\n  "subscribePermissionsChanged": () => (subscribePermissionsChanged),\n  "upgradeCell": () => (upgradeCell)\n});\n\n;// CONCATENATED MODULE: ./node_modules/honeycomb-grid/dist/honeycomb.esm.min.js\n"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof __webpack_require__.g?__webpack_require__.g:"undefined"!=typeof self&&self;var t=function(t,n){return t(n={exports:{}},n.exports),n.exports}((function(t,n){\n/*! axis.js v1.2.1 | (c) 2016 @toddmotto | https://github.com/toddmotto/axis */\nt.exports=function(){var t={},n="Array Object String Date RegExp Function Boolean Number Null Undefined".split(" ");function r(){return Object.prototype.toString.call(this).slice(8,-1)}for(var e=n.length;e--;)t["is"+n[e]]=function(t){return function(n){return r.call(n)===t}}(n[e]);return t}()})),n=t.isObject,r=t.isNumber,e=t.isArray,i=t.isString;function s(t,n){return n+t*(1&n)>>1}function o(t,n){return(t%n+n)%n}function u(t,n){if(!/^(N|S)?(E|W)?$/i.test(t))throw new Error(`Invalid compass direction: ${t}. Choose from E, SE, S, SW, W, NW, N or NE.`);if(n=n.toLowerCase(),t=t.toUpperCase(),"pointy"===n&&["N","S"].includes(t))throw new Error(`Direction ${t} is ambiguous for pointy hexes. Did you mean ${t}E or ${t}W?`);if("flat"===n&&["E","W"].includes(t))throw new Error(`Direction ${t} is ambiguous for flat hexes. Did you mean N${t} or S${t}?`);return{pointy:{E:0,SE:1,SW:2,W:3,NW:4,NE:5},flat:{SE:0,S:1,SW:2,NW:3,N:4,NE:5}}[n][t]}function c(t,n){return r(t)||r(n)?r(t)?r(n)||(n=t):t=n:t=n=0,{x:t,y:n}}const a=[{q:1,r:0,s:-1},{q:0,r:1,s:-1},{q:-1,r:1,s:0},{q:-1,r:0,s:1},{q:0,r:-1,s:1},{q:1,r:-1,s:0}],h=[{q:2,r:-1,s:-1},{q:1,r:1,s:-2},{q:-1,r:2,s:-1},{q:-2,r:1,s:1},{q:-1,r:-1,s:2},{q:1,r:-2,s:1}],f={q:1e-6,r:1e-6,s:-2e-6};function l(t){return r(t)?this[t]:this[this.indexOf(t)]}function d({isValidHex:t}){return function(n,e){if(!t(e))return this;const i=r(n)?n:this.indexOf(n);return i<0?this.push(e):this[i]=e,this}}function x(t,n){const r=t.distance(n),e=1/Math.max(r,1);let i=[];for(let s=0;s<=r;s++){const r=t.nudge().lerp(n.nudge(),e*s).round();i.push(this.get(r))}return i}function y({isValidHex:t}){return function(n,r=0,e=!0){if(!t(n))throw new Error(`Invalid center hex: ${n}.`);if(!this.get(n))throw new Error(`Center hex with coordinates ${n} not present in grid.`);let i=[];for(let t=-r;t<=r;t++)for(let s=Math.max(-r,-t-r);s<=Math.min(r,-t+r);s++){const r=this.get(n.cubeToCartesian({q:n.q+t,r:n.r+s}));n.equals(r)&&!e||i.push(r)}return i.filter(Boolean)}}function p({isValidHex:t,signedModulo:n,compassToNumberDirection:r}){return function(e,s="all",o=!1){if(!t(e))throw new Error(`Invalid hex: ${e}.`);const u=o?h:a;return"all"===s&&(s=[0,1,2,3,4,5]),[].concat(s).map(t=>{i(t)&&(t=r(t,e.orientation)),(t<0||t>5)&&(t=n(t,6));const{q:s,r:o}=u[t];return this.get(e.cubeToCartesian({q:e.q+s,r:e.r+o}))})}}function g(){if(0===this.length)return 0;const{0:t,length:n,[n-1]:r}=this[0].isPointy()?[...this].sort((t,n)=>n.s-t.s||t.q-n.q):[...this].sort((t,n)=>t.q-n.q);return r.toPoint().x-t.toPoint().x+this[0].width()}function b(){if(0===this.length)return 0;const{0:t,length:n,[n-1]:r}=this[0].isPointy()?[...this].sort((t,n)=>t.r-n.r):[...this].sort((t,n)=>n.s-t.s||t.r-n.r);return r.toPoint().y-t.toPoint().y+this[0].height()}function q({Hex:t}){return function(n,r){return t().fromPoint(n,r)}}function P({Grid:t,Hex:n}){return function({width:r,height:e,start:i,direction:s=1,onCreate:o=(()=>{})}){i=n(i);const[u,c,a]={1:["q","r","s"],3:["r","s","q"],5:["s","q","r"]}[s],h=new t;h.width=r,h.height=e,h.start=i,h.direction=s;for(let t=0;t<r;t++)for(let r=0;r<e;r++){const e=n({[u]:t+i[u],[c]:r+i[c],[a]:-t-r+i[a]});o(e,h),h.push(e)}return h}}function w({Grid:t,Hex:n}){return function({size:r,start:e,direction:i=1,onCreate:s=(()=>{})}){e=n(e);const o={1:{rStart:()=>0,rEnd:t=>r-t},5:{rStart:t=>r-t,rEnd:()=>r+1}},{rStart:u,rEnd:c}=o[i],a=new t;a.size=r,a.start=e,a.direction=i;for(let t=0;t<r;t++)for(let r=u(t);r<c(t);r++){const i=n({q:t+e.q,r:r+e.r,s:-t-r+e.s});s(i,a),a.push(i)}return a}}function m({Grid:t,Hex:n}){return function({radius:r,center:e,onCreate:i=(()=>{})}){e=n(e);const s=new t;s.radius=r,s.center=e;for(let t=-r;t<=r;t++){const o=Math.max(-r,-t-r),u=Math.min(r,-t+r);for(let r=o;r<=u;r++){const o=n({q:t+e.q,r:r+e.r,s:-t-r+e.s});i(o,s),s.push(o)}}return s}}function H({Grid:t,Hex:n,compassToNumberDirection:r,signedModulo:e}){return function({width:o,height:u,start:c,direction:a=(n().isPointy()?0:1),onCreate:h=(()=>{})}){c=n(c),i(a)&&(a=r(a,c.orientation)),(a<0||a>5)&&(a=e(a,6));const[f,l,d]=[["q","r","s"],["r","q","s"],["r","s","q"],["s","r","q"],["s","q","r"],["q","s","r"]][a],[x,y]=c.isPointy()?[o,u]:[u,o],p=new t;p.width=o,p.height=u,p.start=c,p.direction=a;for(let t=0;t<y;t++){const r=s(c.offset,t);for(let e=-r;e<x-r;e++){const r=n({[f]:e+c[f],[l]:t+c[l],[d]:-e-t+c[d]});h(r,p),p.push(r)}}return p}}function O({Grid:t,Hex:n}){return function({radius:r,center:e,onCreate:i=(()=>{})}){e=n(e);const s=new t;s.radius=r,s.center=e;const{q:o,r:u,s:c}=e;let h=n({q:o,r:u-r,s:c+r});for(let t=0;t<6;t++)for(let e=0;e<r;e++){i(h,s),s.push(h);const{q:r,r:e,s:o}=a[t];h=n({q:h.q+r,r:h.r+e,s:h.s+o})}return s}}function j({Grid:t,Hex:n}){return function({radius:r,center:e,onCreate:i=(()=>{})}){e=n(e);let s=new t;i(e,s),s.push(e);for(let t=1;t<=r;t++)s=s.concat(this.ring({radius:t,center:e,onCreate:i}));return s.radius=r,s.center=e,s}}function M({Point:t}){return function(n,r){let e;return({x:e,y:r}=t(n,r)),t(this.x+e,this.y+r)}}function E({Point:t}){return function(n,r){let e;return({x:e,y:r}=t(n,r)),t(this.x-e,this.y-r)}}function C({Point:t}){return function(n,r){let e;return({x:e,y:r}=t(n,r)),t(this.x*e,this.y*r)}}function N({Point:t}){return function(n,r){let e;return({x:e,y:r}=t(n,r)),t(this.x/e,this.y/r)}}function S({ensureXY:t}){const i={add:M({Point:s}),subtract:E({Point:s}),multiply:C({Point:s}),divide:N({Point:s})};function s(s,o){let u;return u=r(s)?t(s,o):e(s)?t(...s):n(s)?t(s.x,s.y):t(0),Object.assign(Object.create(i),u)}return s}const R=S({ensureXY:c});class $ extends Array{static isValidHex(t){return!0===(t||{}).__isHoneycombHex}fill(){throw new TypeError("Grid.prototype.fill is not implemented")}includes(t,n=0){return!!(this.indexOf(t,n)+1)}indexOf(t,n=0){const{length:r}=this;let e=Number(n);for(t=R(t),e=Math.max(e>=0?e:r+e,0);e<r;e++)if(this[e].equals(t))return e;return-1}lastIndexOf(t,n=this.length-1){const{length:r}=this;let e=Number(n);for(t=R(t),e=e>=0?Math.min(e,r-1):r+e;e>=0;e--)if(this[e].equals(t))return e;return-1}push(...t){return super.push(...t.filter($.isValidHex))}splice(t,n,...r){return null==n?super.splice(t):super.splice(t,n,...r.filter($.isValidHex))}unshift(...t){return super.unshift(...t.filter($.isValidHex))}}function v(t,n,r){return n in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,t}function T(t,n){var r=Object.keys(t);if(Object.getOwnPropertySymbols){var e=Object.getOwnPropertySymbols(t);n&&(e=e.filter((function(n){return Object.getOwnPropertyDescriptor(t,n).enumerable}))),r.push.apply(r,e)}return r}function G(t){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?T(Object(r),!0).forEach((function(n){v(t,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(r)):T(Object(r)).forEach((function(n){Object.defineProperty(t,n,Object.getOwnPropertyDescriptor(r,n))}))}return t}function D(t,n){if(null==t)return{};var r,e,i=function(t,n){if(null==t)return{};var r,e,i={},s=Object.keys(t);for(e=0;e<s.length;e++)r=s[e],n.indexOf(r)>=0||(i[r]=t[r]);return i}(t,n);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(e=0;e<s.length;e++)r=s[e],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(t,r)&&(i[r]=t[r])}return i}function z({Hex:t}){return function(...n){return Object.assign(this,t(...n))}}function V(){return{x:this.x,y:this.y}}function W(){return{q:this.q,r:this.r,s:this.s}}function I({q:t,r:n}){let r,e;return this.isPointy()?(r=t+s(this.offset,n),e=n):(r=t,e=n+s(this.offset,t)),{x:r,y:e}}function X(){return"pointy"===this.orientation.toLowerCase()}function Y(){return"flat"===this.orientation.toLowerCase()}function B(){const{xRadius:t}=this.size;return this.isPointy()?t*Math.sqrt(3):2*t}function _(){const{yRadius:t}=this.size;return this.isPointy()?2*t:t*Math.sqrt(3)}function A({Point:t}){return function(){const n=this.width(),r=this.height(),{x:e,y:i}=this.origin;return this.isPointy()?[t(n-e,.25*r-i),t(n-e,.75*r-i),t(.5*n-e,r-i),t(0-e,.75*r-i),t(0-e,.25*r-i),t(.5*n-e,0-i)]:[t(n-e,.5*r-i),t(.75*n-e,r-i),t(.25*n-e,r-i),t(0-e,.5*r-i),t(.25*n-e,0-i),t(.75*n-e,0-i)]}}function L({Point:t}){return function(){const{x:n,y:r}=this.origin;return t(this.width()/2-n,this.height()/2-r)}}function k({Point:t}){return function(){const{q:n,r:r,size:e}=this,{xRadius:i,yRadius:s}=e;let o,u;return this.isPointy()?(o=i*Math.sqrt(3)*(n+r/2),u=3*s/2*r):(o=3*i/2*n,u=s*Math.sqrt(3)*(r+n/2)),t(o,u)}}function F({Point:t,Hex:n}){return function(r,e){const{xRadius:i,yRadius:s}=this.size;let o,u,c;return({x:o,y:e}=t(r,e).subtract(this.center())),this.isPointy()?(u=Math.sqrt(3)*o/(3*i)-e/(3*s),c=2/3*(e/s)):(u=2/3*(o/i),c=Math.sqrt(3)*e/(3*s)-o/(3*i)),n({q:u,r:c,s:-u-c}).round()}}function U({Hex:t,Point:n}){return function(r){const{x:e,y:i}=n(r);return t(this.x+e,this.y+i,G({},this))}}function J({Hex:t,Point:n}){return function(r){const{x:e,y:i}=n(r);return t(this.x-e,this.y-i,G({},this))}}function K({Point:t}){return function(n){if(null!=n&&(e(n)||r(n.x)&&r(n.y))){const{x:r,y:e}=t(n);return this.x===r&&this.y===e}return!1}}function Q(t){return Math.max(Math.abs(this.q-t.q),Math.abs(this.r-t.r),Math.abs(this.s-t.s))}function Z({Hex:t}){return function(){let{q:n,r:r,s:e}=this,i=Math.round(n),s=Math.round(r),o=Math.round(e);const u=Math.abs(n-i),c=Math.abs(r-s),a=Math.abs(e-o);return u>c&&u>a?i=-s-o:c>a?s=-i-o:o=-i-s,t(G(G({},this),{},{q:i,r:s,s:o}))}}function tt({Hex:t}){return function(n,r){const e=this.q*(1-r)+n.q*r,i=this.r*(1-r)+n.r*r;return t(G(G({},this),{},{q:e,r:i,s:-e-i}))}}function nt({Hex:t}){return function(){const{q:n,r:r,s:e}=f;return t(G(G({},this),{},{q:this.q+n,r:this.r+r,s:this.s+e}))}}function rt(){return`${this.x},${this.y}`}const et={thirdCoordinate:function(t,n){return-t-n}};const it=S({ensureXY:c}),st=function({ensureXY:t,normalizeRadiuses:i,Point:o}){return function(u={}){const c=function({Point:t}){return function(n,r){let e,i,o;return({x:e,y:r}=t(n,r)),this.isPointy()?(i=e-s(this.offset,r),o=r):(i=e,o=r-s(this.offset,e)),{q:i,r:o,s:-i-o}}}({Point:o}),a={__isHoneycombHex:!0,orientation:"pointy",origin:0,size:{xRadius:1,yRadius:1},offset:-1,get q(){return this.cartesianToCube(this).q},get r(){return this.cartesianToCube(this).r},get s(){return this.cartesianToCube(this).s},add:U({Hex:f,Point:o}),cartesian:V,cartesianToCube:c,center:L({Point:o}),coordinates:V,corners:A({Point:o}),cube:W,cubeToCartesian:I,distance:Q,equals:K({Point:o}),fromPoint:F({Point:o,Hex:f}),height:_,isFlat:Y,isPointy:X,lerp:tt({Hex:f}),nudge:nt({Hex:f}),round:Z({Hex:f}),set:z({Hex:f}),subtract:J({Hex:f,Point:o}),toCartesian:I,toCube:c,toPoint:k({Point:o}),toString:rt,width:B},h=Object.assign(a,u);function f(i,s,o={}){let u;if(n(i)){let{q:t,r:n,s:e}=i,c=D(i,["q","r","s"]);if(r(t)||r(n)||r(e)){const r=t+n+e;if(Number.isNaN(r)||r>1e-12)throw new Error(`Cube coordinates must have a sum of 0. q: ${t}, r: ${n}, s: ${e}, sum: ${t+n+e}.`);({x:u,y:s}=h.cubeToCartesian({q:t,r:n,s:e}))}else({x:u,y:s}=i);o=c}else e(i)?([u,s]=i,o={}):u=i;return Object.assign(Object.create(h),Object.assign(o,t(u,s)))}return h.size=i(h.size,h.isPointy()),h.origin=o(h.origin),Object.assign(f,et,{toJSON:()=>u}),f}}({ensureXY:c,normalizeRadiuses:function(t,e){if(n(t)){if(r(t.xRadius)&&r(t.yRadius))return t;const{width:n,height:i}=t;if(r(n)&&r(i))return e?{xRadius:n/Math.sqrt(3),yRadius:i/2}:{xRadius:n/2,yRadius:i/Math.sqrt(3)}}if(r(t))return{xRadius:t,yRadius:t};throw new Error(`Invalid size: ${t}. Set it as a number or as an object containing width and height.`)},Point:it}),ot=function({extendHex:t,Grid:n,Point:i}){const{isValidHex:s}=n;return function(c=t()){function a(...t){return t=t.filter(Boolean),e(t[0])&&(0===t[0].length||t[0].some(t=>!r(t)))&&(t=t[0]),new n(...t.map(t=>c(t)))}return Object.assign(a,{Hex:c,isValidHex:s,pointToHex:q({Point:i,Hex:c}),parallelogram:P({Grid:n,Hex:c}),triangle:w({Grid:n,Hex:c}),hexagon:m({Grid:n,Hex:c}),rectangle:H({Grid:n,Hex:c,compassToNumberDirection:u,signedModulo:o}),ring:O({Grid:n,Hex:c}),spiral:j({Grid:n,Hex:c})}),Object.assign(n.prototype,{get:l,hexesBetween:x,hexesInRange:y({isValidHex:s}),neighborsOf:p({isValidHex:s,signedModulo:o,compassToNumberDirection:u}),pointHeight:b,pointWidth:g,set:d({isValidHex:s})}),a}}({extendHex:st,Grid:$,Point:it});\n//# sourceMappingURL=honeycomb.esm.min.js.map\n\n;// CONCATENATED MODULE: ./src/scripts/mapgenerator.js\n//Imports\n //Public variables\n//-\n//Private variables\n\nlet Grid = ot(st({\n  orientation: \'flat\'\n})); //Public functions\n\nfunction getRandomMap(width, height) {\n  let map = Grid.rectangle({\n    width: width,\n    height: height\n  }); //Basic water layer\n\n  for (let hex of map) {\n    hex.type = "64, 128, 255";\n    hex.highlight = false;\n  } // //Ring of sand\n  // let island = map.hexesInRange(map.get([Math.floor(size / 2), Math.floor(size / 2)]), (size - 7) / 2)\n  // island.forEach((hex) => {\n  // hex.type = "234,206,106"\n  // hex.walkable = true\n  // })\n  // //Inland terrain\n  // island = map.hexesInRange(map.get([Math.floor(size / 2), Math.floor(size / 2)]), ((size - 7) / 2) - 1)\n  // island.forEach((hex) => {\n  // hex.type = "0,128,0" //["0,128,0", "139,69,19"].random()\n  // })\n  // //Vision blocking blocks\n  // island.forEach((hex) => {\n  // if (Math.random() > 0.85) {\n  // hex.type = "50,50,50"\n  // hex.seeThrough = false\n  // hex.walkable = false\n  // }\n  // })\n\n\n  return map;\n} //Private functions\n\nArray.prototype.random = function () {\n  return this[Math.floor(Math.random() * this.length)];\n};\n/*\nlet img = new Image()\nimg.src = \'url\'\nlet pattern = ctx.createPattern(img, \'repeat\')\n*/\n;// CONCATENATED MODULE: ./src/scripts/display.js\n//Imports\n //Public variables\n\nconst camera = {\n  x: 0,\n  y: 0,\n  zoom: 1\n};\nlet currentMap; //Private variables\n\nconst mainCanvas = document.querySelector("#mainCanvas");\nconst animCanvas = document.querySelector("#animationCanvas");\nconst mainCtx = mainCanvas.getContext("2d");\nconst animCtx = animCanvas.getContext("2d");\nlet scales = [];\nlet hexSize;\nlet a_full, b_full, c_full, a_hex, b_hex, c_hex;\nlet halfCanvasWidth, halfCanvasHeight;\nlet display_Grid = ot(st({}));\nlet PROVIDER;\nlet isdblclick = false;\n\nasync function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n} //Public functions\n\n\nasync function initiateMap(map, ever) {\n  currentMap = map;\n  mainCanvas.width = window.innerWidth;\n  mainCanvas.height = window.innerHeight;\n  animCanvas.width = window.innerWidth;\n  animCanvas.height = window.innerHeight;\n  calculateHexDimensions();\n  windowResizeUpdate();\n  zoomUpdate();\n  drawMap();\n  camera.x = halfCanvasWidth;\n  camera.y = halfCanvasHeight;\n  PROVIDER = ever;\n  await PROVIDER.init(currentMap);\n  recalcEnergy();\n}\n\nfunction recalcEnergy() {\n  for (let hex of currentMap) {\n    if (!hex.details) continue;\n    calculateEnergy(hex);\n  }\n\n  setTimeout(recalcEnergy, 1000);\n}\n\nfunction calculateEnergy(hex) {\n  let dateNow = Math.round(Date.now() / 1000);\n\n  if (1 * hex.details.energy >= 1 * hex.details.energyMax || 1 * hex.details.lastCalcTime >= dateNow) {\n    return;\n  }\n\n  let energy = Math.min(1 * hex.details.energy + hex.details.energySec * (dateNow - hex.details.lastCalcTime), 1 * hex.details.energyMax);\n  hex.details.lastCalcTime = dateNow;\n  hex.details.energy = energy;\n}\n\nfunction zoomUpdate() {\n  const hex = display_Grid.pointToHex(camera.x, camera.y);\n  const x = hex.x;\n  const y = hex.y;\n  hexSize = scales[camera.zoom];\n  calculateHexDimensions();\n  display_Grid = ot(st({\n    size: hexSize,\n    orientation: \'flat\'\n  }));\n  const replacementMap = display_Grid.rectangle({\n    width: currentMap.width,\n    height: currentMap.height\n  });\n\n  for (let i = 0; i < currentMap.length; i++) {\n    currentMap[i].size = replacementMap[i].size;\n\n    if (currentMap[i].x === x && currentMap[i].y === y) {\n      camera.x = Math.round(currentMap[i].toPoint().x + b_full + hexSize / 2);\n      camera.y = Math.round(currentMap[i].toPoint().y + c_full);\n    }\n  }\n} //Private functions\n\nfunction drawMap() {\n  //Clearing\n  mainCtx.setTransform(1, 0, 0, 1, 0, 0);\n  mainCtx.fillStyle = "black";\n  mainCtx.fillRect(0, 0, mainCanvas.width, mainCanvas.height); //Positioning the camera\n\n  mainCtx.translate(-camera.x + halfCanvasWidth, -camera.y + halfCanvasHeight);\n\n  for (let hex of currentMap) {\n    //Hex is ignored if it wasn\'t seen yet\n    //if (hex.visibility === \'unseen\') continue\n    let x = hex.toPoint().x,\n        y = hex.toPoint().y; //Checking if hex is visible within canvas\n\n    if (Math.abs(x - camera.x) > halfCanvasWidth + hexSize || Math.abs(y - camera.y) > halfCanvasHeight + hexSize) continue; //Drawing highlight around hex\n\n    if (hex.highlight) {\n      mainCtx.strokeStyle = "white";\n      mainCtx.beginPath();\n      mainCtx.moveTo(x + a_full, y - c_full);\n      mainCtx.lineTo(x + b_full, y);\n      mainCtx.lineTo(x + a_full, y + c_full);\n      mainCtx.lineTo(x - a_full, y + c_full);\n      mainCtx.lineTo(x - b_full, y);\n      mainCtx.lineTo(x - a_full, y - c_full);\n      mainCtx.closePath();\n      mainCtx.stroke();\n    } //Drawing the hex\n\n\n    let color = hex.details ? `${hex.details.color.r}, ${hex.details.color.g}, ${hex.details.color.b}` : hex.type;\n    mainCtx.fillStyle = `rgba(${color},1)`;\n    mainCtx.beginPath();\n    mainCtx.moveTo(x + a_hex, y - c_hex);\n    mainCtx.lineTo(x + b_hex, y);\n    mainCtx.lineTo(x + a_hex, y + c_hex);\n    mainCtx.lineTo(x - a_hex, y + c_hex);\n    mainCtx.lineTo(x - b_hex, y);\n    mainCtx.lineTo(x - a_hex, y - c_hex);\n    mainCtx.closePath();\n    mainCtx.fill();\n    setText(mainCtx, x, y - hexSize / 2, `${hex.x};${hex.y}`);\n\n    if (hex.details) {\n      setText(mainCtx, x, y, `${hex.details.energy}`);\n      setText(mainCtx, x, y + hexSize / 2, `lvl: ${1 * hex.details.level + 1}`);\n    }\n  }\n\n  requestAnimationFrame(drawMap);\n}\n\nfunction setText(ctx, x, y, txt, fontSize = 10, style = "white", align = \'center\') {\n  let _font = `${fontSize * (camera.zoom + 1)}px Georgia`;\n  ctx.font = _font;\n  ctx.fillStyle = style;\n  ctx.textAlign = align;\n  ctx.fillText(txt, x, y, hexSize);\n}\n\nfunction calculateHexDimensions() {\n  a_full = hexSize / 2;\n  b_full = hexSize;\n  c_full = hexSize / 2 * Math.sqrt(3);\n  a_hex = a_full * 0.95;\n  b_hex = b_full * 0.95;\n  c_hex = c_full * 0.95;\n}\n\nfunction windowResizeUpdate() {\n  mainCanvas.width = window.innerWidth;\n  mainCanvas.height = window.innerHeight;\n  animCanvas.width = window.innerWidth;\n  animCanvas.height = window.innerHeight;\n  halfCanvasWidth = mainCanvas.width / 2;\n  halfCanvasHeight = mainCanvas.height / 2;\n  const min = Math.min(halfCanvasWidth, halfCanvasHeight);\n  scales = [min / 10, min / 7, min / 5];\n} //Hex Highlighting\n\n\nanimCanvas.addEventListener(\'click\', async ({\n  offsetX,\n  offsetY\n}) => {\n  console.log(\'click\', isdblclick);\n  await sleep(500);\n  console.log(\'click\', isdblclick);\n\n  if (isdblclick) {\n    return;\n  }\n\n  offsetX += camera.x + b_full - mainCanvas.width / 2;\n  offsetY += camera.y + c_full - mainCanvas.height / 2;\n  const hexCoordinates = display_Grid.pointToHex(offsetX, offsetY);\n\n  for (let hex of currentMap) {\n    if (hex.x == hexCoordinates.x && hex.y == hexCoordinates.y) {\n      hex.highlight = !hex.highlight;\n    } else {\n      hex.highlight = false;\n    }\n  }\n});\nanimCanvas.addEventListener(\'dblclick\', async ({\n  offsetX,\n  offsetY\n}) => {\n  isdblclick = true;\n  console.log(\'dblclick\', isdblclick);\n  await sleep(500);\n  isdblclick = false;\n  console.log(\'dblclick\', isdblclick);\n  offsetX += camera.x + b_full - mainCanvas.width / 2;\n  offsetY += camera.y + c_full - mainCanvas.height / 2;\n  const hexCoordinates = display_Grid.pointToHex(offsetX, offsetY);\n  console.log(hexCoordinates);\n  let hHex;\n  let tHex;\n\n  for (let hex of currentMap) {\n    if (hex.highlight) {\n      hHex = hex;\n    }\n\n    if (hex.x == hexCoordinates.x && hex.y == hexCoordinates.y) {\n      tHex = hex;\n    }\n  }\n\n  if (!tHex) return;\n  if (hHex && !hHex.details) return;\n  console.log(\'hHex\', hHex);\n  console.log(\'tHex\', tHex);\n  let cellCoord = {\n    x: hexCoordinates.x,\n    y: hexCoordinates.y,\n    z: -hexCoordinates.x - hexCoordinates.y\n  };\n\n  if (!hHex) {\n    if (!tHex.details) {\n      await PROVIDER.newGame(cellCoord);\n    }\n  } else if (hHex.address.toString() == tHex.address.toString()) {\n    await PROVIDER.upgradeCell(tHex.address);\n  } else {\n    if (!isNeighborHex(hHex, tHex)) return;\n    let energy = 1000;\n\n    if (!tHex.details) {\n      await PROVIDER.markCell(hHex.address, cellCoord, energy);\n    } else if (colorIsEqual(hHex.details.color, tHex.details.color)) {\n      // переписать условие по владельцу ячейки и цвета\n      await PROVIDER.helpCell(hHex.address, cellCoord, energy);\n    } else {\n      await PROVIDER.attkCell(hHex.address, cellCoord, energy);\n    }\n  }\n});\n\nfunction colorIsEqual(color1, color2) {\n  return color1.r == color2.r && color1.g == color2.g && color1.b == color2.b;\n}\n\nfunction isNeighborHex(hex1, hex2) {\n  return cube_distance(hex1, hex2) == 1;\n}\n\nfunction cube_distance(hex1, hex2) {\n  return Math.max(Math.abs(hex1.x - hex2.x), Math.abs(hex1.y - hex2.y), Math.abs(-hex1.x - hex1.y - (-hex2.x - hex2.y)));\n}\n\nwindow.addEventListener(\'resize\', () => {\n  windowResizeUpdate();\n  zoomUpdate();\n}); //http://jsfiddle.net/gfcarv/QKgHs/ or http://jsfiddle.net/gfcarv/tAwQV/\n//https://jsfiddle.net/931wk75n/2/\n;// CONCATENATED MODULE: ./src/scripts/controls.js\n//Imports\n //Public variables\n//-\n//Private variables\n//-\n//Public functions\n\nfunction initiateControls() {\n  //Zoom controls\n  document.querySelector("#zoom_out").addEventListener(\'mousedown\', () => {\n    if (camera.zoom > 0) camera.zoom--;\n    zoomUpdate();\n  });\n  document.querySelector("#zoom_in").addEventListener(\'mousedown\', () => {\n    if (camera.zoom < 2) camera.zoom++;\n    zoomUpdate();\n  }); //Camera position controls\n\n  let timer = null;\n  document.addEventListener(\'mouseup\', () => {\n    clearInterval(timer);\n  });\n  document.addEventListener(\'keyup\', () => {\n    clearInterval(timer);\n  });\n  document.querySelector("#camera_up").addEventListener(\'mousedown\', () => {\n    timer = setInterval(() => {\n      camera.y -= 5;\n    }, 10);\n  });\n  document.querySelector("#camera_left").addEventListener(\'mousedown\', () => {\n    timer = setInterval(() => {\n      camera.x -= 5;\n    }, 10);\n  });\n  document.querySelector("#camera_right").addEventListener(\'mousedown\', () => {\n    timer = setInterval(() => {\n      camera.x += 5;\n    }, 10);\n  });\n  document.querySelector("#camera_down").addEventListener(\'mousedown\', () => {\n    timer = setInterval(() => {\n      camera.y += 5;\n    }, 10);\n  }); //Keyboard controls\n\n  document.addEventListener(\'keydown\', e => {\n    switch (e.code) {\n      case "ArrowUp":\n        clearInterval(timer);\n        timer = setInterval(() => {\n          camera.y -= 5;\n        }, 10);\n        break;\n\n      case "ArrowLeft":\n        clearInterval(timer);\n        timer = setInterval(() => {\n          camera.x -= 5;\n        }, 10);\n        break;\n\n      case "ArrowRight":\n        clearInterval(timer);\n        timer = setInterval(() => {\n          camera.x += 5;\n        }, 10);\n        break;\n\n      case "ArrowDown":\n        clearInterval(timer);\n        timer = setInterval(() => {\n          camera.y += 5;\n        }, 10);\n        break;\n    }\n  });\n} //Private functions\n// EXTERNAL MODULE: ./node_modules/everscale-inpage-provider/dist/index.js\nvar dist = __webpack_require__(511);\n// EXTERNAL MODULE: ./node_modules/everscale-standalone-client/index.js\nvar everscale_standalone_client = __webpack_require__(91);\n;// CONCATENATED MODULE: ./src/scripts/ever.js\n\n\n\nconst routerAbi = __webpack_require__(750);\n\nconst cellAbi = __webpack_require__(579);\n\nconst Config = __webpack_require__(150);\n\nlet ever_currentMap;\nconst ever = new dist.ProviderRpcClient({});\n\nfunction behavior(name, fn) {\n  document.querySelectorAll(`[data-behavior=${name}]`).forEach(fn);\n}\n\nconst innerText = text => elem => {\n  elem.innerText = text;\n};\n\nfunction requestPermissions() {\n  return ever.requestPermissions({\n    permissions: [\'basic\', \'accountInteraction\']\n  });\n}\n\nasync function disconnectAction() {\n  console.log(\'disconnectAction\');\n  await ever.disconnect();\n}\n\nasync function connect() {\n  await ever.requestPermissions({\n    permissions: [\'basic\', \'accountInteraction\']\n  });\n}\n\nasync function checkConnect() {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  const network = providerState.selectedConnection;\n\n  if (!contractAddress(network) || !permissions.accountInteraction) {\n    behavior(\'connect\', elem => elem.onclick = requestPermissions);\n    switchScreen("login");\n\n    const connectText = elem => {\n      const disabled = !contractAddress(network);\n      elem.disabled = disabled;\n      elem.innerText = disabled ? `Contract not found` : `Connect with ${network}`;\n    };\n\n    behavior(\'connect\', connectText);\n  } else {\n    // INFO for transactionsFound and contractStateChanged need permissions\n    const providerState = await ever.getProviderState();\n    (await ever.subscribe(\'transactionsFound\', {\n      address: contractAddress(providerState.selectedConnection)\n    })).on(\'data\', event => {\n      console.log(\':\', {\n        address: event.address,\n        transactions: event.transactions,\n        info: event.info\n      });\n    });\n    (await ever.subscribe(\'contractStateChanged\', {\n      address: contractAddress(providerState.selectedConnection)\n    })).on(\'data\', event => {\n      console.log(\'permissionsChanged:\', {\n        address: event.address,\n        state: event.state\n      });\n    });\n    switchScreen("main");\n    const account = permissions.accountInteraction;\n    let address = account.address.toString();\n    let pubkey = account.address.toString();\n    behavior(\'address\', innerText(`${address.substr(0, 6)}...${address.substr(-4, 4)}`));\n    behavior(\'publicKey\', innerText(`${pubkey.substr(0, 6)}...${pubkey.substr(-4, 4)}`));\n    behavior(\'disconnectAction\', elem => elem.onclick = disconnectAction);\n    loadMap();\n  }\n}\n\nasync function setNetworkChanged(network) {\n  const mod = network === \'mainnet\' ? \'success\' : \'secondary\';\n  const out = `<span class="badge bg-${mod}">${network}</span>`;\n  behavior(\'network\', elem => elem.innerHTML = out);\n  await checkConnect();\n}\n\nfunction contractAddress(network, name = "router") {\n  // if (addr[network] && addr[network][name]) {\n  // return new Address(addr[network][name]);\n  // }\n  // return null\n  return new dist.Address(Config.router);\n} // async function Contract() {\n// const providerState = await ever.getProviderState();\n// const address = contractAddress(providerState.selectedConnection);\n// return new ever.Contract(abi, address);\n// }\n\n\nfunction switchScreen(to) {\n  console.log(\'switchScreen:\', to);\n  ["extension", "login", "main"].forEach(screen => {\n    const switcher = elem => elem.style.display = to === screen ? \'table-row\' : \'none\';\n\n    behavior(screen, switcher);\n  });\n}\n\nasync function mainFlow() {\n  const providerState = await ever.getProviderState();\n  console.log(\'selectedConnection:\', providerState.selectedConnection);\n  await setNetworkChanged(providerState.selectedConnection);\n  (await ever.subscribe(\'networkChanged\')).on(\'data\', event => {\n    console.log(\'networkChanged:\', event.selectedConnection);\n    setNetworkChanged(event.selectedConnection);\n  });\n  (await ever.subscribe(\'permissionsChanged\')).on(\'data\', async event => {\n    console.log(\'permissionsChanged:\', event.permissions);\n    await checkConnect();\n  });\n}\n\nasync function loadMap() {\n  await routerDetails();\n  let coords = [];\n\n  for (let i = 0; i < ever_currentMap.length; i++) {\n    let hex = ever_currentMap[i];\n    coords.push({\n      x: hex.x,\n      y: hex.y,\n      z: -hex.x - hex.y\n    });\n  }\n\n  let addreses = await getAddressCells(coords);\n\n  for (let i = 0; i < ever_currentMap.length; i++) {\n    let hex = ever_currentMap[i];\n    hex.address = addreses[i];\n    await subscribeCellState(addreses[i], hex);\n    hex.details = await getDetailsCell(addreses[i]);\n  }\n}\n\nasync function init(map) {\n  ever_currentMap = map;\n\n  if (await ever.hasProvider()) {\n    try {\n      await ever.ensureInitialized();\n      await mainFlow();\n    } catch (error) {\n      throw error; // TODO handle it\n    }\n  } else {\n    switchScreen("extension");\n  }\n}\nasync function routerDetails() {\n  const providerState = await ever.getProviderState();\n  const router = new ever.Contract(routerAbi, contractAddress(providerState.selectedConnection, \'router\'));\n\n  try {\n    let details;\n    details = await router.methods.getDetails({}).call();\n    console.log(\'getDetails router\', details);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof dist.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function subscribeCellState(address, hex) {\n  try {\n    (await ever.subscribe(\'contractStateChanged\', {\n      address: address\n    })).on(\'data\', async event => {\n      // console.log(\'contractStateChanged:\', {\n      // address: event.address,\n      // state: event.state,\n      // });\n      hex.details = await getDetailsCell(event.address);\n    });\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof dist.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function getAddressCells(coords) {\n  const providerState = await ever.getProviderState();\n  const router = new ever.Contract(routerAbi, contractAddress(providerState.selectedConnection, \'router\'));\n\n  try {\n    let details;\n    details = await router.methods.getAddressCells({\n      coords\n    }).call();\n    console.log(\'getAddressCells router\', details);\n    return details.addreses;\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof dist.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function newGame(cellCoord) {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  if (!permissions.accountInteraction) return;\n  const account = permissions.accountInteraction;\n  const router = new ever.Contract(routerAbi, contractAddress(providerState.selectedConnection, \'router\'));\n\n  try {\n    console.log(\'newGame\', 1);\n    let res = await router.methods.newGame({\n      sendGasTo: account.address.toString(),\n      baseCoord: cellCoord\n    }).send({\n      from: account.address.toString(),\n      amount: \'2000000000\'\n    });\n    console.log(\'newGame\', res);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof dist.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function markCell(address, cellCoord, energy) {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  if (!permissions.accountInteraction) return;\n  const account = permissions.accountInteraction;\n  const cell = new ever.Contract(cellAbi, address);\n\n  try {\n    console.log(\'markCell\', 1);\n    let res = await cell.methods.markCell({\n      sendGasTo: account.address.toString(),\n      targetCoord: cellCoord,\n      energy: energy\n    }).send({\n      from: account.address.toString(),\n      amount: \'2000000000\'\n    });\n    console.log(\'markCell\', res);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof dist.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function upgradeCell(address) {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  if (!permissions.accountInteraction) return;\n  const account = permissions.accountInteraction;\n  const cell = new ever.Contract(cellAbi, address);\n\n  try {\n    console.log(\'upgradeCell\', 1);\n    let res = await cell.methods.upgradeCell({\n      sendGasTo: account.address.toString()\n    }).send({\n      from: account.address.toString(),\n      amount: \'1000000000\'\n    });\n    console.log(\'upgradeCell\', res);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof dist.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function helpCell(address, cellCoord, energy) {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  if (!permissions.accountInteraction) return;\n  const account = permissions.accountInteraction;\n  const cell = new ever.Contract(cellAbi, address);\n\n  try {\n    console.log(\'helpCell\', 1);\n    let res = await cell.methods.helpCell({\n      sendGasTo: account.address.toString(),\n      targetCoord: cellCoord,\n      energy: energy\n    }).send({\n      from: account.address.toString(),\n      amount: \'1000000000\'\n    });\n    console.log(\'helpCell\', res);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof dist.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function attkCell(address, cellCoord, energy) {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  if (!permissions.accountInteraction) return;\n  const account = permissions.accountInteraction;\n  const cell = new ever.Contract(cellAbi, address);\n\n  try {\n    console.log(\'attkCell\', 1);\n    let res = await cell.methods.attkCell({\n      sendGasTo: account.address.toString(),\n      targetCoord: cellCoord,\n      energy: energy\n    }).send({\n      from: account.address.toString(),\n      amount: \'1000000000\'\n    });\n    console.log(\'attkCell\', res);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof dist.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function getDetailsCell(address) {\n  const cell = new ever.Contract(cellAbi, address);\n\n  try {\n    const stateRes = await cell.getFullState();\n\n    if (stateRes.state == null || !stateRes.state.isDeployed) {\n      return null;\n    } //console.log(\'state\', stateRes.state);\n\n\n    let details;\n    details = await cell.methods.getDetails({}).call();\n    console.log(\'getDetails cell\', details);\n    return details;\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof dist.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function subscribePermissionsChanged() {\n  await ever.subscribe(\'permissionsChanged\').on(\'data\', permissions => {\n    console.log(permissions);\n  });\n}\n;// CONCATENATED MODULE: ./src/index.js\n //Import CSS\n\n //Import JS\n\n\n\n\n //https://github.com/flauwekeul/honeycomb\n//console.clear();\n\nlet map = getRandomMap(20, 15);\ninitiateMap(map, ever_namespaceObject);\ninitiateControls();\n\nif (false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNjEyLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2hvbmV5Y29tYi1ncmlkL2Rpc3QvaG9uZXljb21iLmVzbS5taW4uanM/MTMyYyIsIndlYnBhY2s6Ly9oZXgtYmF0dGxlLWdhbWUvLi9zcmMvc2NyaXB0cy9tYXBnZW5lcmF0b3IuanM/YjA3ZSIsIndlYnBhY2s6Ly9oZXgtYmF0dGxlLWdhbWUvLi9zcmMvc2NyaXB0cy9kaXNwbGF5LmpzPzMyNzkiLCJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vc3JjL3NjcmlwdHMvY29udHJvbHMuanM/MDcxNCIsIndlYnBhY2s6Ly9oZXgtYmF0dGxlLWdhbWUvLi9zcmMvc2NyaXB0cy9ldmVyLmpzPzA5ZDEiLCJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vc3JjL2luZGV4LmpzPzk1YjUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpczpcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93P3dpbmRvdzpcInVuZGVmaW5lZFwiIT10eXBlb2YgZ2xvYmFsP2dsb2JhbDpcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZiYmc2VsZjt2YXIgdD1mdW5jdGlvbih0LG4pe3JldHVybiB0KG49e2V4cG9ydHM6e319LG4uZXhwb3J0cyksbi5leHBvcnRzfSgoZnVuY3Rpb24odCxuKXtcbi8qISBheGlzLmpzIHYxLjIuMSB8IChjKSAyMDE2IEB0b2RkbW90dG8gfCBodHRwczovL2dpdGh1Yi5jb20vdG9kZG1vdHRvL2F4aXMgKi9cbnQuZXhwb3J0cz1mdW5jdGlvbigpe3ZhciB0PXt9LG49XCJBcnJheSBPYmplY3QgU3RyaW5nIERhdGUgUmVnRXhwIEZ1bmN0aW9uIEJvb2xlYW4gTnVtYmVyIE51bGwgVW5kZWZpbmVkXCIuc3BsaXQoXCIgXCIpO2Z1bmN0aW9uIHIoKXtyZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHRoaXMpLnNsaWNlKDgsLTEpfWZvcih2YXIgZT1uLmxlbmd0aDtlLS07KXRbXCJpc1wiK25bZV1dPWZ1bmN0aW9uKHQpe3JldHVybiBmdW5jdGlvbihuKXtyZXR1cm4gci5jYWxsKG4pPT09dH19KG5bZV0pO3JldHVybiB0fSgpfSkpLG49dC5pc09iamVjdCxyPXQuaXNOdW1iZXIsZT10LmlzQXJyYXksaT10LmlzU3RyaW5nO2Z1bmN0aW9uIHModCxuKXtyZXR1cm4gbit0KigxJm4pPj4xfWZ1bmN0aW9uIG8odCxuKXtyZXR1cm4odCVuK24pJW59ZnVuY3Rpb24gdSh0LG4pe2lmKCEvXihOfFMpPyhFfFcpPyQvaS50ZXN0KHQpKXRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjb21wYXNzIGRpcmVjdGlvbjogJHt0fS4gQ2hvb3NlIGZyb20gRSwgU0UsIFMsIFNXLCBXLCBOVywgTiBvciBORS5gKTtpZihuPW4udG9Mb3dlckNhc2UoKSx0PXQudG9VcHBlckNhc2UoKSxcInBvaW50eVwiPT09biYmW1wiTlwiLFwiU1wiXS5pbmNsdWRlcyh0KSl0aHJvdyBuZXcgRXJyb3IoYERpcmVjdGlvbiAke3R9IGlzIGFtYmlndW91cyBmb3IgcG9pbnR5IGhleGVzLiBEaWQgeW91IG1lYW4gJHt0fUUgb3IgJHt0fVc/YCk7aWYoXCJmbGF0XCI9PT1uJiZbXCJFXCIsXCJXXCJdLmluY2x1ZGVzKHQpKXRocm93IG5ldyBFcnJvcihgRGlyZWN0aW9uICR7dH0gaXMgYW1iaWd1b3VzIGZvciBmbGF0IGhleGVzLiBEaWQgeW91IG1lYW4gTiR7dH0gb3IgUyR7dH0/YCk7cmV0dXJue3BvaW50eTp7RTowLFNFOjEsU1c6MixXOjMsTlc6NCxORTo1fSxmbGF0OntTRTowLFM6MSxTVzoyLE5XOjMsTjo0LE5FOjV9fVtuXVt0XX1mdW5jdGlvbiBjKHQsbil7cmV0dXJuIHIodCl8fHIobik/cih0KT9yKG4pfHwobj10KTp0PW46dD1uPTAse3g6dCx5Om59fWNvbnN0IGE9W3txOjEscjowLHM6LTF9LHtxOjAscjoxLHM6LTF9LHtxOi0xLHI6MSxzOjB9LHtxOi0xLHI6MCxzOjF9LHtxOjAscjotMSxzOjF9LHtxOjEscjotMSxzOjB9XSxoPVt7cToyLHI6LTEsczotMX0se3E6MSxyOjEsczotMn0se3E6LTEscjoyLHM6LTF9LHtxOi0yLHI6MSxzOjF9LHtxOi0xLHI6LTEsczoyfSx7cToxLHI6LTIsczoxfV0sZj17cToxZS02LHI6MWUtNixzOi0yZS02fTtmdW5jdGlvbiBsKHQpe3JldHVybiByKHQpP3RoaXNbdF06dGhpc1t0aGlzLmluZGV4T2YodCldfWZ1bmN0aW9uIGQoe2lzVmFsaWRIZXg6dH0pe3JldHVybiBmdW5jdGlvbihuLGUpe2lmKCF0KGUpKXJldHVybiB0aGlzO2NvbnN0IGk9cihuKT9uOnRoaXMuaW5kZXhPZihuKTtyZXR1cm4gaTwwP3RoaXMucHVzaChlKTp0aGlzW2ldPWUsdGhpc319ZnVuY3Rpb24geCh0LG4pe2NvbnN0IHI9dC5kaXN0YW5jZShuKSxlPTEvTWF0aC5tYXgociwxKTtsZXQgaT1bXTtmb3IobGV0IHM9MDtzPD1yO3MrKyl7Y29uc3Qgcj10Lm51ZGdlKCkubGVycChuLm51ZGdlKCksZSpzKS5yb3VuZCgpO2kucHVzaCh0aGlzLmdldChyKSl9cmV0dXJuIGl9ZnVuY3Rpb24geSh7aXNWYWxpZEhleDp0fSl7cmV0dXJuIGZ1bmN0aW9uKG4scj0wLGU9ITApe2lmKCF0KG4pKXRocm93IG5ldyBFcnJvcihgSW52YWxpZCBjZW50ZXIgaGV4OiAke259LmApO2lmKCF0aGlzLmdldChuKSl0aHJvdyBuZXcgRXJyb3IoYENlbnRlciBoZXggd2l0aCBjb29yZGluYXRlcyAke259IG5vdCBwcmVzZW50IGluIGdyaWQuYCk7bGV0IGk9W107Zm9yKGxldCB0PS1yO3Q8PXI7dCsrKWZvcihsZXQgcz1NYXRoLm1heCgtciwtdC1yKTtzPD1NYXRoLm1pbihyLC10K3IpO3MrKyl7Y29uc3Qgcj10aGlzLmdldChuLmN1YmVUb0NhcnRlc2lhbih7cTpuLnErdCxyOm4ucitzfSkpO24uZXF1YWxzKHIpJiYhZXx8aS5wdXNoKHIpfXJldHVybiBpLmZpbHRlcihCb29sZWFuKX19ZnVuY3Rpb24gcCh7aXNWYWxpZEhleDp0LHNpZ25lZE1vZHVsbzpuLGNvbXBhc3NUb051bWJlckRpcmVjdGlvbjpyfSl7cmV0dXJuIGZ1bmN0aW9uKGUscz1cImFsbFwiLG89ITEpe2lmKCF0KGUpKXRocm93IG5ldyBFcnJvcihgSW52YWxpZCBoZXg6ICR7ZX0uYCk7Y29uc3QgdT1vP2g6YTtyZXR1cm5cImFsbFwiPT09cyYmKHM9WzAsMSwyLDMsNCw1XSksW10uY29uY2F0KHMpLm1hcCh0PT57aSh0KSYmKHQ9cih0LGUub3JpZW50YXRpb24pKSwodDwwfHx0PjUpJiYodD1uKHQsNikpO2NvbnN0e3E6cyxyOm99PXVbdF07cmV0dXJuIHRoaXMuZ2V0KGUuY3ViZVRvQ2FydGVzaWFuKHtxOmUucStzLHI6ZS5yK299KSl9KX19ZnVuY3Rpb24gZygpe2lmKDA9PT10aGlzLmxlbmd0aClyZXR1cm4gMDtjb25zdHswOnQsbGVuZ3RoOm4sW24tMV06cn09dGhpc1swXS5pc1BvaW50eSgpP1suLi50aGlzXS5zb3J0KCh0LG4pPT5uLnMtdC5zfHx0LnEtbi5xKTpbLi4udGhpc10uc29ydCgodCxuKT0+dC5xLW4ucSk7cmV0dXJuIHIudG9Qb2ludCgpLngtdC50b1BvaW50KCkueCt0aGlzWzBdLndpZHRoKCl9ZnVuY3Rpb24gYigpe2lmKDA9PT10aGlzLmxlbmd0aClyZXR1cm4gMDtjb25zdHswOnQsbGVuZ3RoOm4sW24tMV06cn09dGhpc1swXS5pc1BvaW50eSgpP1suLi50aGlzXS5zb3J0KCh0LG4pPT50LnItbi5yKTpbLi4udGhpc10uc29ydCgodCxuKT0+bi5zLXQuc3x8dC5yLW4ucik7cmV0dXJuIHIudG9Qb2ludCgpLnktdC50b1BvaW50KCkueSt0aGlzWzBdLmhlaWdodCgpfWZ1bmN0aW9uIHEoe0hleDp0fSl7cmV0dXJuIGZ1bmN0aW9uKG4scil7cmV0dXJuIHQoKS5mcm9tUG9pbnQobixyKX19ZnVuY3Rpb24gUCh7R3JpZDp0LEhleDpufSl7cmV0dXJuIGZ1bmN0aW9uKHt3aWR0aDpyLGhlaWdodDplLHN0YXJ0OmksZGlyZWN0aW9uOnM9MSxvbkNyZWF0ZTpvPSgoKT0+e30pfSl7aT1uKGkpO2NvbnN0W3UsYyxhXT17MTpbXCJxXCIsXCJyXCIsXCJzXCJdLDM6W1wiclwiLFwic1wiLFwicVwiXSw1OltcInNcIixcInFcIixcInJcIl19W3NdLGg9bmV3IHQ7aC53aWR0aD1yLGguaGVpZ2h0PWUsaC5zdGFydD1pLGguZGlyZWN0aW9uPXM7Zm9yKGxldCB0PTA7dDxyO3QrKylmb3IobGV0IHI9MDtyPGU7cisrKXtjb25zdCBlPW4oe1t1XTp0K2lbdV0sW2NdOnIraVtjXSxbYV06LXQtcitpW2FdfSk7byhlLGgpLGgucHVzaChlKX1yZXR1cm4gaH19ZnVuY3Rpb24gdyh7R3JpZDp0LEhleDpufSl7cmV0dXJuIGZ1bmN0aW9uKHtzaXplOnIsc3RhcnQ6ZSxkaXJlY3Rpb246aT0xLG9uQ3JlYXRlOnM9KCgpPT57fSl9KXtlPW4oZSk7Y29uc3Qgbz17MTp7clN0YXJ0OigpPT4wLHJFbmQ6dD0+ci10fSw1OntyU3RhcnQ6dD0+ci10LHJFbmQ6KCk9PnIrMX19LHtyU3RhcnQ6dSxyRW5kOmN9PW9baV0sYT1uZXcgdDthLnNpemU9cixhLnN0YXJ0PWUsYS5kaXJlY3Rpb249aTtmb3IobGV0IHQ9MDt0PHI7dCsrKWZvcihsZXQgcj11KHQpO3I8Yyh0KTtyKyspe2NvbnN0IGk9bih7cTp0K2UucSxyOnIrZS5yLHM6LXQtcitlLnN9KTtzKGksYSksYS5wdXNoKGkpfXJldHVybiBhfX1mdW5jdGlvbiBtKHtHcmlkOnQsSGV4Om59KXtyZXR1cm4gZnVuY3Rpb24oe3JhZGl1czpyLGNlbnRlcjplLG9uQ3JlYXRlOmk9KCgpPT57fSl9KXtlPW4oZSk7Y29uc3Qgcz1uZXcgdDtzLnJhZGl1cz1yLHMuY2VudGVyPWU7Zm9yKGxldCB0PS1yO3Q8PXI7dCsrKXtjb25zdCBvPU1hdGgubWF4KC1yLC10LXIpLHU9TWF0aC5taW4ociwtdCtyKTtmb3IobGV0IHI9bztyPD11O3IrKyl7Y29uc3Qgbz1uKHtxOnQrZS5xLHI6citlLnIsczotdC1yK2Uuc30pO2kobyxzKSxzLnB1c2gobyl9fXJldHVybiBzfX1mdW5jdGlvbiBIKHtHcmlkOnQsSGV4Om4sY29tcGFzc1RvTnVtYmVyRGlyZWN0aW9uOnIsc2lnbmVkTW9kdWxvOmV9KXtyZXR1cm4gZnVuY3Rpb24oe3dpZHRoOm8saGVpZ2h0OnUsc3RhcnQ6YyxkaXJlY3Rpb246YT0obigpLmlzUG9pbnR5KCk/MDoxKSxvbkNyZWF0ZTpoPSgoKT0+e30pfSl7Yz1uKGMpLGkoYSkmJihhPXIoYSxjLm9yaWVudGF0aW9uKSksKGE8MHx8YT41KSYmKGE9ZShhLDYpKTtjb25zdFtmLGwsZF09W1tcInFcIixcInJcIixcInNcIl0sW1wiclwiLFwicVwiLFwic1wiXSxbXCJyXCIsXCJzXCIsXCJxXCJdLFtcInNcIixcInJcIixcInFcIl0sW1wic1wiLFwicVwiLFwiclwiXSxbXCJxXCIsXCJzXCIsXCJyXCJdXVthXSxbeCx5XT1jLmlzUG9pbnR5KCk/W28sdV06W3Usb10scD1uZXcgdDtwLndpZHRoPW8scC5oZWlnaHQ9dSxwLnN0YXJ0PWMscC5kaXJlY3Rpb249YTtmb3IobGV0IHQ9MDt0PHk7dCsrKXtjb25zdCByPXMoYy5vZmZzZXQsdCk7Zm9yKGxldCBlPS1yO2U8eC1yO2UrKyl7Y29uc3Qgcj1uKHtbZl06ZStjW2ZdLFtsXTp0K2NbbF0sW2RdOi1lLXQrY1tkXX0pO2gocixwKSxwLnB1c2gocil9fXJldHVybiBwfX1mdW5jdGlvbiBPKHtHcmlkOnQsSGV4Om59KXtyZXR1cm4gZnVuY3Rpb24oe3JhZGl1czpyLGNlbnRlcjplLG9uQ3JlYXRlOmk9KCgpPT57fSl9KXtlPW4oZSk7Y29uc3Qgcz1uZXcgdDtzLnJhZGl1cz1yLHMuY2VudGVyPWU7Y29uc3R7cTpvLHI6dSxzOmN9PWU7bGV0IGg9bih7cTpvLHI6dS1yLHM6YytyfSk7Zm9yKGxldCB0PTA7dDw2O3QrKylmb3IobGV0IGU9MDtlPHI7ZSsrKXtpKGgscykscy5wdXNoKGgpO2NvbnN0e3E6cixyOmUsczpvfT1hW3RdO2g9bih7cTpoLnErcixyOmgucitlLHM6aC5zK299KX1yZXR1cm4gc319ZnVuY3Rpb24gaih7R3JpZDp0LEhleDpufSl7cmV0dXJuIGZ1bmN0aW9uKHtyYWRpdXM6cixjZW50ZXI6ZSxvbkNyZWF0ZTppPSgoKT0+e30pfSl7ZT1uKGUpO2xldCBzPW5ldyB0O2koZSxzKSxzLnB1c2goZSk7Zm9yKGxldCB0PTE7dDw9cjt0Kyspcz1zLmNvbmNhdCh0aGlzLnJpbmcoe3JhZGl1czp0LGNlbnRlcjplLG9uQ3JlYXRlOml9KSk7cmV0dXJuIHMucmFkaXVzPXIscy5jZW50ZXI9ZSxzfX1mdW5jdGlvbiBNKHtQb2ludDp0fSl7cmV0dXJuIGZ1bmN0aW9uKG4scil7bGV0IGU7cmV0dXJuKHt4OmUseTpyfT10KG4scikpLHQodGhpcy54K2UsdGhpcy55K3IpfX1mdW5jdGlvbiBFKHtQb2ludDp0fSl7cmV0dXJuIGZ1bmN0aW9uKG4scil7bGV0IGU7cmV0dXJuKHt4OmUseTpyfT10KG4scikpLHQodGhpcy54LWUsdGhpcy55LXIpfX1mdW5jdGlvbiBDKHtQb2ludDp0fSl7cmV0dXJuIGZ1bmN0aW9uKG4scil7bGV0IGU7cmV0dXJuKHt4OmUseTpyfT10KG4scikpLHQodGhpcy54KmUsdGhpcy55KnIpfX1mdW5jdGlvbiBOKHtQb2ludDp0fSl7cmV0dXJuIGZ1bmN0aW9uKG4scil7bGV0IGU7cmV0dXJuKHt4OmUseTpyfT10KG4scikpLHQodGhpcy54L2UsdGhpcy55L3IpfX1mdW5jdGlvbiBTKHtlbnN1cmVYWTp0fSl7Y29uc3QgaT17YWRkOk0oe1BvaW50OnN9KSxzdWJ0cmFjdDpFKHtQb2ludDpzfSksbXVsdGlwbHk6Qyh7UG9pbnQ6c30pLGRpdmlkZTpOKHtQb2ludDpzfSl9O2Z1bmN0aW9uIHMocyxvKXtsZXQgdTtyZXR1cm4gdT1yKHMpP3QocyxvKTplKHMpP3QoLi4ucyk6bihzKT90KHMueCxzLnkpOnQoMCksT2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKGkpLHUpfXJldHVybiBzfWNvbnN0IFI9Uyh7ZW5zdXJlWFk6Y30pO2NsYXNzICQgZXh0ZW5kcyBBcnJheXtzdGF0aWMgaXNWYWxpZEhleCh0KXtyZXR1cm4hMD09PSh0fHx7fSkuX19pc0hvbmV5Y29tYkhleH1maWxsKCl7dGhyb3cgbmV3IFR5cGVFcnJvcihcIkdyaWQucHJvdG90eXBlLmZpbGwgaXMgbm90IGltcGxlbWVudGVkXCIpfWluY2x1ZGVzKHQsbj0wKXtyZXR1cm4hISh0aGlzLmluZGV4T2YodCxuKSsxKX1pbmRleE9mKHQsbj0wKXtjb25zdHtsZW5ndGg6cn09dGhpcztsZXQgZT1OdW1iZXIobik7Zm9yKHQ9Uih0KSxlPU1hdGgubWF4KGU+PTA/ZTpyK2UsMCk7ZTxyO2UrKylpZih0aGlzW2VdLmVxdWFscyh0KSlyZXR1cm4gZTtyZXR1cm4tMX1sYXN0SW5kZXhPZih0LG49dGhpcy5sZW5ndGgtMSl7Y29uc3R7bGVuZ3RoOnJ9PXRoaXM7bGV0IGU9TnVtYmVyKG4pO2Zvcih0PVIodCksZT1lPj0wP01hdGgubWluKGUsci0xKTpyK2U7ZT49MDtlLS0paWYodGhpc1tlXS5lcXVhbHModCkpcmV0dXJuIGU7cmV0dXJuLTF9cHVzaCguLi50KXtyZXR1cm4gc3VwZXIucHVzaCguLi50LmZpbHRlcigkLmlzVmFsaWRIZXgpKX1zcGxpY2UodCxuLC4uLnIpe3JldHVybiBudWxsPT1uP3N1cGVyLnNwbGljZSh0KTpzdXBlci5zcGxpY2UodCxuLC4uLnIuZmlsdGVyKCQuaXNWYWxpZEhleCkpfXVuc2hpZnQoLi4udCl7cmV0dXJuIHN1cGVyLnVuc2hpZnQoLi4udC5maWx0ZXIoJC5pc1ZhbGlkSGV4KSl9fWZ1bmN0aW9uIHYodCxuLHIpe3JldHVybiBuIGluIHQ/T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsbix7dmFsdWU6cixlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMH0pOnRbbl09cix0fWZ1bmN0aW9uIFQodCxuKXt2YXIgcj1PYmplY3Qua2V5cyh0KTtpZihPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKXt2YXIgZT1PYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHQpO24mJihlPWUuZmlsdGVyKChmdW5jdGlvbihuKXtyZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LG4pLmVudW1lcmFibGV9KSkpLHIucHVzaC5hcHBseShyLGUpfXJldHVybiByfWZ1bmN0aW9uIEcodCl7Zm9yKHZhciBuPTE7bjxhcmd1bWVudHMubGVuZ3RoO24rKyl7dmFyIHI9bnVsbCE9YXJndW1lbnRzW25dP2FyZ3VtZW50c1tuXTp7fTtuJTI/VChPYmplY3QociksITApLmZvckVhY2goKGZ1bmN0aW9uKG4pe3YodCxuLHJbbl0pfSkpOk9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzP09iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHQsT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMocikpOlQoT2JqZWN0KHIpKS5mb3JFYWNoKChmdW5jdGlvbihuKXtPYmplY3QuZGVmaW5lUHJvcGVydHkodCxuLE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IocixuKSl9KSl9cmV0dXJuIHR9ZnVuY3Rpb24gRCh0LG4pe2lmKG51bGw9PXQpcmV0dXJue307dmFyIHIsZSxpPWZ1bmN0aW9uKHQsbil7aWYobnVsbD09dClyZXR1cm57fTt2YXIgcixlLGk9e30scz1PYmplY3Qua2V5cyh0KTtmb3IoZT0wO2U8cy5sZW5ndGg7ZSsrKXI9c1tlXSxuLmluZGV4T2Yocik+PTB8fChpW3JdPXRbcl0pO3JldHVybiBpfSh0LG4pO2lmKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpe3ZhciBzPU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHModCk7Zm9yKGU9MDtlPHMubGVuZ3RoO2UrKylyPXNbZV0sbi5pbmRleE9mKHIpPj0wfHxPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodCxyKSYmKGlbcl09dFtyXSl9cmV0dXJuIGl9ZnVuY3Rpb24geih7SGV4OnR9KXtyZXR1cm4gZnVuY3Rpb24oLi4ubil7cmV0dXJuIE9iamVjdC5hc3NpZ24odGhpcyx0KC4uLm4pKX19ZnVuY3Rpb24gVigpe3JldHVybnt4OnRoaXMueCx5OnRoaXMueX19ZnVuY3Rpb24gVygpe3JldHVybntxOnRoaXMucSxyOnRoaXMucixzOnRoaXMuc319ZnVuY3Rpb24gSSh7cTp0LHI6bn0pe2xldCByLGU7cmV0dXJuIHRoaXMuaXNQb2ludHkoKT8ocj10K3ModGhpcy5vZmZzZXQsbiksZT1uKToocj10LGU9bitzKHRoaXMub2Zmc2V0LHQpKSx7eDpyLHk6ZX19ZnVuY3Rpb24gWCgpe3JldHVyblwicG9pbnR5XCI9PT10aGlzLm9yaWVudGF0aW9uLnRvTG93ZXJDYXNlKCl9ZnVuY3Rpb24gWSgpe3JldHVyblwiZmxhdFwiPT09dGhpcy5vcmllbnRhdGlvbi50b0xvd2VyQ2FzZSgpfWZ1bmN0aW9uIEIoKXtjb25zdHt4UmFkaXVzOnR9PXRoaXMuc2l6ZTtyZXR1cm4gdGhpcy5pc1BvaW50eSgpP3QqTWF0aC5zcXJ0KDMpOjIqdH1mdW5jdGlvbiBfKCl7Y29uc3R7eVJhZGl1czp0fT10aGlzLnNpemU7cmV0dXJuIHRoaXMuaXNQb2ludHkoKT8yKnQ6dCpNYXRoLnNxcnQoMyl9ZnVuY3Rpb24gQSh7UG9pbnQ6dH0pe3JldHVybiBmdW5jdGlvbigpe2NvbnN0IG49dGhpcy53aWR0aCgpLHI9dGhpcy5oZWlnaHQoKSx7eDplLHk6aX09dGhpcy5vcmlnaW47cmV0dXJuIHRoaXMuaXNQb2ludHkoKT9bdChuLWUsLjI1KnItaSksdChuLWUsLjc1KnItaSksdCguNSpuLWUsci1pKSx0KDAtZSwuNzUqci1pKSx0KDAtZSwuMjUqci1pKSx0KC41Km4tZSwwLWkpXTpbdChuLWUsLjUqci1pKSx0KC43NSpuLWUsci1pKSx0KC4yNSpuLWUsci1pKSx0KDAtZSwuNSpyLWkpLHQoLjI1Km4tZSwwLWkpLHQoLjc1Km4tZSwwLWkpXX19ZnVuY3Rpb24gTCh7UG9pbnQ6dH0pe3JldHVybiBmdW5jdGlvbigpe2NvbnN0e3g6bix5OnJ9PXRoaXMub3JpZ2luO3JldHVybiB0KHRoaXMud2lkdGgoKS8yLW4sdGhpcy5oZWlnaHQoKS8yLXIpfX1mdW5jdGlvbiBrKHtQb2ludDp0fSl7cmV0dXJuIGZ1bmN0aW9uKCl7Y29uc3R7cTpuLHI6cixzaXplOmV9PXRoaXMse3hSYWRpdXM6aSx5UmFkaXVzOnN9PWU7bGV0IG8sdTtyZXR1cm4gdGhpcy5pc1BvaW50eSgpPyhvPWkqTWF0aC5zcXJ0KDMpKihuK3IvMiksdT0zKnMvMipyKToobz0zKmkvMipuLHU9cypNYXRoLnNxcnQoMykqKHIrbi8yKSksdChvLHUpfX1mdW5jdGlvbiBGKHtQb2ludDp0LEhleDpufSl7cmV0dXJuIGZ1bmN0aW9uKHIsZSl7Y29uc3R7eFJhZGl1czppLHlSYWRpdXM6c309dGhpcy5zaXplO2xldCBvLHUsYztyZXR1cm4oe3g6byx5OmV9PXQocixlKS5zdWJ0cmFjdCh0aGlzLmNlbnRlcigpKSksdGhpcy5pc1BvaW50eSgpPyh1PU1hdGguc3FydCgzKSpvLygzKmkpLWUvKDMqcyksYz0yLzMqKGUvcykpOih1PTIvMyooby9pKSxjPU1hdGguc3FydCgzKSplLygzKnMpLW8vKDMqaSkpLG4oe3E6dSxyOmMsczotdS1jfSkucm91bmQoKX19ZnVuY3Rpb24gVSh7SGV4OnQsUG9pbnQ6bn0pe3JldHVybiBmdW5jdGlvbihyKXtjb25zdHt4OmUseTppfT1uKHIpO3JldHVybiB0KHRoaXMueCtlLHRoaXMueStpLEcoe30sdGhpcykpfX1mdW5jdGlvbiBKKHtIZXg6dCxQb2ludDpufSl7cmV0dXJuIGZ1bmN0aW9uKHIpe2NvbnN0e3g6ZSx5Oml9PW4ocik7cmV0dXJuIHQodGhpcy54LWUsdGhpcy55LWksRyh7fSx0aGlzKSl9fWZ1bmN0aW9uIEsoe1BvaW50OnR9KXtyZXR1cm4gZnVuY3Rpb24obil7aWYobnVsbCE9biYmKGUobil8fHIobi54KSYmcihuLnkpKSl7Y29uc3R7eDpyLHk6ZX09dChuKTtyZXR1cm4gdGhpcy54PT09ciYmdGhpcy55PT09ZX1yZXR1cm4hMX19ZnVuY3Rpb24gUSh0KXtyZXR1cm4gTWF0aC5tYXgoTWF0aC5hYnModGhpcy5xLXQucSksTWF0aC5hYnModGhpcy5yLXQuciksTWF0aC5hYnModGhpcy5zLXQucykpfWZ1bmN0aW9uIFooe0hleDp0fSl7cmV0dXJuIGZ1bmN0aW9uKCl7bGV0e3E6bixyOnIsczplfT10aGlzLGk9TWF0aC5yb3VuZChuKSxzPU1hdGgucm91bmQociksbz1NYXRoLnJvdW5kKGUpO2NvbnN0IHU9TWF0aC5hYnMobi1pKSxjPU1hdGguYWJzKHItcyksYT1NYXRoLmFicyhlLW8pO3JldHVybiB1PmMmJnU+YT9pPS1zLW86Yz5hP3M9LWktbzpvPS1pLXMsdChHKEcoe30sdGhpcykse30se3E6aSxyOnMsczpvfSkpfX1mdW5jdGlvbiB0dCh7SGV4OnR9KXtyZXR1cm4gZnVuY3Rpb24obixyKXtjb25zdCBlPXRoaXMucSooMS1yKStuLnEqcixpPXRoaXMuciooMS1yKStuLnIqcjtyZXR1cm4gdChHKEcoe30sdGhpcykse30se3E6ZSxyOmksczotZS1pfSkpfX1mdW5jdGlvbiBudCh7SGV4OnR9KXtyZXR1cm4gZnVuY3Rpb24oKXtjb25zdHtxOm4scjpyLHM6ZX09ZjtyZXR1cm4gdChHKEcoe30sdGhpcykse30se3E6dGhpcy5xK24scjp0aGlzLnIrcixzOnRoaXMucytlfSkpfX1mdW5jdGlvbiBydCgpe3JldHVybmAke3RoaXMueH0sJHt0aGlzLnl9YH1jb25zdCBldD17dGhpcmRDb29yZGluYXRlOmZ1bmN0aW9uKHQsbil7cmV0dXJuLXQtbn19O2NvbnN0IGl0PVMoe2Vuc3VyZVhZOmN9KSxzdD1mdW5jdGlvbih7ZW5zdXJlWFk6dCxub3JtYWxpemVSYWRpdXNlczppLFBvaW50Om99KXtyZXR1cm4gZnVuY3Rpb24odT17fSl7Y29uc3QgYz1mdW5jdGlvbih7UG9pbnQ6dH0pe3JldHVybiBmdW5jdGlvbihuLHIpe2xldCBlLGksbztyZXR1cm4oe3g6ZSx5OnJ9PXQobixyKSksdGhpcy5pc1BvaW50eSgpPyhpPWUtcyh0aGlzLm9mZnNldCxyKSxvPXIpOihpPWUsbz1yLXModGhpcy5vZmZzZXQsZSkpLHtxOmkscjpvLHM6LWktb319fSh7UG9pbnQ6b30pLGE9e19faXNIb25leWNvbWJIZXg6ITAsb3JpZW50YXRpb246XCJwb2ludHlcIixvcmlnaW46MCxzaXplOnt4UmFkaXVzOjEseVJhZGl1czoxfSxvZmZzZXQ6LTEsZ2V0IHEoKXtyZXR1cm4gdGhpcy5jYXJ0ZXNpYW5Ub0N1YmUodGhpcykucX0sZ2V0IHIoKXtyZXR1cm4gdGhpcy5jYXJ0ZXNpYW5Ub0N1YmUodGhpcykucn0sZ2V0IHMoKXtyZXR1cm4gdGhpcy5jYXJ0ZXNpYW5Ub0N1YmUodGhpcykuc30sYWRkOlUoe0hleDpmLFBvaW50Om99KSxjYXJ0ZXNpYW46VixjYXJ0ZXNpYW5Ub0N1YmU6YyxjZW50ZXI6TCh7UG9pbnQ6b30pLGNvb3JkaW5hdGVzOlYsY29ybmVyczpBKHtQb2ludDpvfSksY3ViZTpXLGN1YmVUb0NhcnRlc2lhbjpJLGRpc3RhbmNlOlEsZXF1YWxzOksoe1BvaW50Om99KSxmcm9tUG9pbnQ6Rih7UG9pbnQ6byxIZXg6Zn0pLGhlaWdodDpfLGlzRmxhdDpZLGlzUG9pbnR5OlgsbGVycDp0dCh7SGV4OmZ9KSxudWRnZTpudCh7SGV4OmZ9KSxyb3VuZDpaKHtIZXg6Zn0pLHNldDp6KHtIZXg6Zn0pLHN1YnRyYWN0Okooe0hleDpmLFBvaW50Om99KSx0b0NhcnRlc2lhbjpJLHRvQ3ViZTpjLHRvUG9pbnQ6ayh7UG9pbnQ6b30pLHRvU3RyaW5nOnJ0LHdpZHRoOkJ9LGg9T2JqZWN0LmFzc2lnbihhLHUpO2Z1bmN0aW9uIGYoaSxzLG89e30pe2xldCB1O2lmKG4oaSkpe2xldHtxOnQscjpuLHM6ZX09aSxjPUQoaSxbXCJxXCIsXCJyXCIsXCJzXCJdKTtpZihyKHQpfHxyKG4pfHxyKGUpKXtjb25zdCByPXQrbitlO2lmKE51bWJlci5pc05hTihyKXx8cj4xZS0xMil0aHJvdyBuZXcgRXJyb3IoYEN1YmUgY29vcmRpbmF0ZXMgbXVzdCBoYXZlIGEgc3VtIG9mIDAuIHE6ICR7dH0sIHI6ICR7bn0sIHM6ICR7ZX0sIHN1bTogJHt0K24rZX0uYCk7KHt4OnUseTpzfT1oLmN1YmVUb0NhcnRlc2lhbih7cTp0LHI6bixzOmV9KSl9ZWxzZSh7eDp1LHk6c309aSk7bz1jfWVsc2UgZShpKT8oW3Usc109aSxvPXt9KTp1PWk7cmV0dXJuIE9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShoKSxPYmplY3QuYXNzaWduKG8sdCh1LHMpKSl9cmV0dXJuIGguc2l6ZT1pKGguc2l6ZSxoLmlzUG9pbnR5KCkpLGgub3JpZ2luPW8oaC5vcmlnaW4pLE9iamVjdC5hc3NpZ24oZixldCx7dG9KU09OOigpPT51fSksZn19KHtlbnN1cmVYWTpjLG5vcm1hbGl6ZVJhZGl1c2VzOmZ1bmN0aW9uKHQsZSl7aWYobih0KSl7aWYocih0LnhSYWRpdXMpJiZyKHQueVJhZGl1cykpcmV0dXJuIHQ7Y29uc3R7d2lkdGg6bixoZWlnaHQ6aX09dDtpZihyKG4pJiZyKGkpKXJldHVybiBlP3t4UmFkaXVzOm4vTWF0aC5zcXJ0KDMpLHlSYWRpdXM6aS8yfTp7eFJhZGl1czpuLzIseVJhZGl1czppL01hdGguc3FydCgzKX19aWYocih0KSlyZXR1cm57eFJhZGl1czp0LHlSYWRpdXM6dH07dGhyb3cgbmV3IEVycm9yKGBJbnZhbGlkIHNpemU6ICR7dH0uIFNldCBpdCBhcyBhIG51bWJlciBvciBhcyBhbiBvYmplY3QgY29udGFpbmluZyB3aWR0aCBhbmQgaGVpZ2h0LmApfSxQb2ludDppdH0pLG90PWZ1bmN0aW9uKHtleHRlbmRIZXg6dCxHcmlkOm4sUG9pbnQ6aX0pe2NvbnN0e2lzVmFsaWRIZXg6c309bjtyZXR1cm4gZnVuY3Rpb24oYz10KCkpe2Z1bmN0aW9uIGEoLi4udCl7cmV0dXJuIHQ9dC5maWx0ZXIoQm9vbGVhbiksZSh0WzBdKSYmKDA9PT10WzBdLmxlbmd0aHx8dFswXS5zb21lKHQ9PiFyKHQpKSkmJih0PXRbMF0pLG5ldyBuKC4uLnQubWFwKHQ9PmModCkpKX1yZXR1cm4gT2JqZWN0LmFzc2lnbihhLHtIZXg6Yyxpc1ZhbGlkSGV4OnMscG9pbnRUb0hleDpxKHtQb2ludDppLEhleDpjfSkscGFyYWxsZWxvZ3JhbTpQKHtHcmlkOm4sSGV4OmN9KSx0cmlhbmdsZTp3KHtHcmlkOm4sSGV4OmN9KSxoZXhhZ29uOm0oe0dyaWQ6bixIZXg6Y30pLHJlY3RhbmdsZTpIKHtHcmlkOm4sSGV4OmMsY29tcGFzc1RvTnVtYmVyRGlyZWN0aW9uOnUsc2lnbmVkTW9kdWxvOm99KSxyaW5nOk8oe0dyaWQ6bixIZXg6Y30pLHNwaXJhbDpqKHtHcmlkOm4sSGV4OmN9KX0pLE9iamVjdC5hc3NpZ24obi5wcm90b3R5cGUse2dldDpsLGhleGVzQmV0d2Vlbjp4LGhleGVzSW5SYW5nZTp5KHtpc1ZhbGlkSGV4OnN9KSxuZWlnaGJvcnNPZjpwKHtpc1ZhbGlkSGV4OnMsc2lnbmVkTW9kdWxvOm8sY29tcGFzc1RvTnVtYmVyRGlyZWN0aW9uOnV9KSxwb2ludEhlaWdodDpiLHBvaW50V2lkdGg6ZyxzZXQ6ZCh7aXNWYWxpZEhleDpzfSl9KSxhfX0oe2V4dGVuZEhleDpzdCxHcmlkOiQsUG9pbnQ6aXR9KTtleHBvcnR7aXQgYXMgUG9pbnQsb3QgYXMgZGVmaW5lR3JpZCxzdCBhcyBleHRlbmRIZXh9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aG9uZXljb21iLmVzbS5taW4uanMubWFwXG4iLCIvL0ltcG9ydHNcbmltcG9ydCB7IGV4dGVuZEhleCwgZGVmaW5lR3JpZCB9IGZyb20gJ2hvbmV5Y29tYi1ncmlkJzsgLy9QdWJsaWMgdmFyaWFibGVzXG4vLy1cbi8vUHJpdmF0ZSB2YXJpYWJsZXNcblxubGV0IEdyaWQgPSBkZWZpbmVHcmlkKGV4dGVuZEhleCh7XG4gIG9yaWVudGF0aW9uOiAnZmxhdCdcbn0pKTsgLy9QdWJsaWMgZnVuY3Rpb25zXG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21NYXAod2lkdGgsIGhlaWdodCkge1xuICBsZXQgbWFwID0gR3JpZC5yZWN0YW5nbGUoe1xuICAgIHdpZHRoOiB3aWR0aCxcbiAgICBoZWlnaHQ6IGhlaWdodFxuICB9KTsgLy9CYXNpYyB3YXRlciBsYXllclxuXG4gIGZvciAobGV0IGhleCBvZiBtYXApIHtcbiAgICBoZXgudHlwZSA9IFwiNjQsIDEyOCwgMjU1XCI7XG4gICAgaGV4LmhpZ2hsaWdodCA9IGZhbHNlO1xuICB9IC8vIC8vUmluZyBvZiBzYW5kXG4gIC8vIGxldCBpc2xhbmQgPSBtYXAuaGV4ZXNJblJhbmdlKG1hcC5nZXQoW01hdGguZmxvb3Ioc2l6ZSAvIDIpLCBNYXRoLmZsb29yKHNpemUgLyAyKV0pLCAoc2l6ZSAtIDcpIC8gMilcbiAgLy8gaXNsYW5kLmZvckVhY2goKGhleCkgPT4ge1xuICAvLyBoZXgudHlwZSA9IFwiMjM0LDIwNiwxMDZcIlxuICAvLyBoZXgud2Fsa2FibGUgPSB0cnVlXG4gIC8vIH0pXG4gIC8vIC8vSW5sYW5kIHRlcnJhaW5cbiAgLy8gaXNsYW5kID0gbWFwLmhleGVzSW5SYW5nZShtYXAuZ2V0KFtNYXRoLmZsb29yKHNpemUgLyAyKSwgTWF0aC5mbG9vcihzaXplIC8gMildKSwgKChzaXplIC0gNykgLyAyKSAtIDEpXG4gIC8vIGlzbGFuZC5mb3JFYWNoKChoZXgpID0+IHtcbiAgLy8gaGV4LnR5cGUgPSBcIjAsMTI4LDBcIiAvL1tcIjAsMTI4LDBcIiwgXCIxMzksNjksMTlcIl0ucmFuZG9tKClcbiAgLy8gfSlcbiAgLy8gLy9WaXNpb24gYmxvY2tpbmcgYmxvY2tzXG4gIC8vIGlzbGFuZC5mb3JFYWNoKChoZXgpID0+IHtcbiAgLy8gaWYgKE1hdGgucmFuZG9tKCkgPiAwLjg1KSB7XG4gIC8vIGhleC50eXBlID0gXCI1MCw1MCw1MFwiXG4gIC8vIGhleC5zZWVUaHJvdWdoID0gZmFsc2VcbiAgLy8gaGV4LndhbGthYmxlID0gZmFsc2VcbiAgLy8gfVxuICAvLyB9KVxuXG5cbiAgcmV0dXJuIG1hcDtcbn0gLy9Qcml2YXRlIGZ1bmN0aW9uc1xuXG5BcnJheS5wcm90b3R5cGUucmFuZG9tID0gZnVuY3Rpb24gKCkge1xuICByZXR1cm4gdGhpc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0aGlzLmxlbmd0aCldO1xufTtcbi8qXG5sZXQgaW1nID0gbmV3IEltYWdlKClcbmltZy5zcmMgPSAndXJsJ1xubGV0IHBhdHRlcm4gPSBjdHguY3JlYXRlUGF0dGVybihpbWcsICdyZXBlYXQnKVxuKi8iLCIvL0ltcG9ydHNcbmltcG9ydCB7IGV4dGVuZEhleCwgZGVmaW5lR3JpZCB9IGZyb20gJ2hvbmV5Y29tYi1ncmlkJzsgLy9QdWJsaWMgdmFyaWFibGVzXG5cbmV4cG9ydCBjb25zdCBjYW1lcmEgPSB7XG4gIHg6IDAsXG4gIHk6IDAsXG4gIHpvb206IDFcbn07XG5leHBvcnQgbGV0IGN1cnJlbnRNYXA7IC8vUHJpdmF0ZSB2YXJpYWJsZXNcblxuY29uc3QgbWFpbkNhbnZhcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjbWFpbkNhbnZhc1wiKTtcbmNvbnN0IGFuaW1DYW52YXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2FuaW1hdGlvbkNhbnZhc1wiKTtcbmNvbnN0IG1haW5DdHggPSBtYWluQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbmNvbnN0IGFuaW1DdHggPSBhbmltQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbmxldCBzY2FsZXMgPSBbXTtcbmxldCBoZXhTaXplO1xubGV0IGFfZnVsbCwgYl9mdWxsLCBjX2Z1bGwsIGFfaGV4LCBiX2hleCwgY19oZXg7XG5sZXQgaGFsZkNhbnZhc1dpZHRoLCBoYWxmQ2FudmFzSGVpZ2h0O1xubGV0IEdyaWQgPSBkZWZpbmVHcmlkKGV4dGVuZEhleCh7fSkpO1xubGV0IFBST1ZJREVSO1xubGV0IGlzZGJsY2xpY2sgPSBmYWxzZTtcblxuYXN5bmMgZnVuY3Rpb24gc2xlZXAobXMpIHtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gc2V0VGltZW91dChyZXNvbHZlLCBtcykpO1xufSAvL1B1YmxpYyBmdW5jdGlvbnNcblxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gaW5pdGlhdGVNYXAobWFwLCBldmVyKSB7XG4gIGN1cnJlbnRNYXAgPSBtYXA7XG4gIG1haW5DYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgbWFpbkNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIGFuaW1DYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgYW5pbUNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XG4gIGNhbGN1bGF0ZUhleERpbWVuc2lvbnMoKTtcbiAgd2luZG93UmVzaXplVXBkYXRlKCk7XG4gIHpvb21VcGRhdGUoKTtcbiAgZHJhd01hcCgpO1xuICBjYW1lcmEueCA9IGhhbGZDYW52YXNXaWR0aDtcbiAgY2FtZXJhLnkgPSBoYWxmQ2FudmFzSGVpZ2h0O1xuICBQUk9WSURFUiA9IGV2ZXI7XG4gIGF3YWl0IFBST1ZJREVSLmluaXQoY3VycmVudE1hcCk7XG4gIHJlY2FsY0VuZXJneSgpO1xufVxuXG5mdW5jdGlvbiByZWNhbGNFbmVyZ3koKSB7XG4gIGZvciAobGV0IGhleCBvZiBjdXJyZW50TWFwKSB7XG4gICAgaWYgKCFoZXguZGV0YWlscykgY29udGludWU7XG4gICAgY2FsY3VsYXRlRW5lcmd5KGhleCk7XG4gIH1cblxuICBzZXRUaW1lb3V0KHJlY2FsY0VuZXJneSwgMTAwMCk7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUVuZXJneShoZXgpIHtcbiAgbGV0IGRhdGVOb3cgPSBNYXRoLnJvdW5kKERhdGUubm93KCkgLyAxMDAwKTtcblxuICBpZiAoMSAqIGhleC5kZXRhaWxzLmVuZXJneSA+PSAxICogaGV4LmRldGFpbHMuZW5lcmd5TWF4IHx8IDEgKiBoZXguZGV0YWlscy5sYXN0Q2FsY1RpbWUgPj0gZGF0ZU5vdykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBlbmVyZ3kgPSBNYXRoLm1pbigxICogaGV4LmRldGFpbHMuZW5lcmd5ICsgaGV4LmRldGFpbHMuZW5lcmd5U2VjICogKGRhdGVOb3cgLSBoZXguZGV0YWlscy5sYXN0Q2FsY1RpbWUpLCAxICogaGV4LmRldGFpbHMuZW5lcmd5TWF4KTtcbiAgaGV4LmRldGFpbHMubGFzdENhbGNUaW1lID0gZGF0ZU5vdztcbiAgaGV4LmRldGFpbHMuZW5lcmd5ID0gZW5lcmd5O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gem9vbVVwZGF0ZSgpIHtcbiAgY29uc3QgaGV4ID0gR3JpZC5wb2ludFRvSGV4KGNhbWVyYS54LCBjYW1lcmEueSk7XG4gIGNvbnN0IHggPSBoZXgueDtcbiAgY29uc3QgeSA9IGhleC55O1xuICBoZXhTaXplID0gc2NhbGVzW2NhbWVyYS56b29tXTtcbiAgY2FsY3VsYXRlSGV4RGltZW5zaW9ucygpO1xuICBHcmlkID0gZGVmaW5lR3JpZChleHRlbmRIZXgoe1xuICAgIHNpemU6IGhleFNpemUsXG4gICAgb3JpZW50YXRpb246ICdmbGF0J1xuICB9KSk7XG4gIGNvbnN0IHJlcGxhY2VtZW50TWFwID0gR3JpZC5yZWN0YW5nbGUoe1xuICAgIHdpZHRoOiBjdXJyZW50TWFwLndpZHRoLFxuICAgIGhlaWdodDogY3VycmVudE1hcC5oZWlnaHRcbiAgfSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjdXJyZW50TWFwLmxlbmd0aDsgaSsrKSB7XG4gICAgY3VycmVudE1hcFtpXS5zaXplID0gcmVwbGFjZW1lbnRNYXBbaV0uc2l6ZTtcblxuICAgIGlmIChjdXJyZW50TWFwW2ldLnggPT09IHggJiYgY3VycmVudE1hcFtpXS55ID09PSB5KSB7XG4gICAgICBjYW1lcmEueCA9IE1hdGgucm91bmQoY3VycmVudE1hcFtpXS50b1BvaW50KCkueCArIGJfZnVsbCArIGhleFNpemUgLyAyKTtcbiAgICAgIGNhbWVyYS55ID0gTWF0aC5yb3VuZChjdXJyZW50TWFwW2ldLnRvUG9pbnQoKS55ICsgY19mdWxsKTtcbiAgICB9XG4gIH1cbn0gLy9Qcml2YXRlIGZ1bmN0aW9uc1xuXG5mdW5jdGlvbiBkcmF3TWFwKCkge1xuICAvL0NsZWFyaW5nXG4gIG1haW5DdHguc2V0VHJhbnNmb3JtKDEsIDAsIDAsIDEsIDAsIDApO1xuICBtYWluQ3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcbiAgbWFpbkN0eC5maWxsUmVjdCgwLCAwLCBtYWluQ2FudmFzLndpZHRoLCBtYWluQ2FudmFzLmhlaWdodCk7IC8vUG9zaXRpb25pbmcgdGhlIGNhbWVyYVxuXG4gIG1haW5DdHgudHJhbnNsYXRlKC1jYW1lcmEueCArIGhhbGZDYW52YXNXaWR0aCwgLWNhbWVyYS55ICsgaGFsZkNhbnZhc0hlaWdodCk7XG5cbiAgZm9yIChsZXQgaGV4IG9mIGN1cnJlbnRNYXApIHtcbiAgICAvL0hleCBpcyBpZ25vcmVkIGlmIGl0IHdhc24ndCBzZWVuIHlldFxuICAgIC8vaWYgKGhleC52aXNpYmlsaXR5ID09PSAndW5zZWVuJykgY29udGludWVcbiAgICBsZXQgeCA9IGhleC50b1BvaW50KCkueCxcbiAgICAgICAgeSA9IGhleC50b1BvaW50KCkueTsgLy9DaGVja2luZyBpZiBoZXggaXMgdmlzaWJsZSB3aXRoaW4gY2FudmFzXG5cbiAgICBpZiAoTWF0aC5hYnMoeCAtIGNhbWVyYS54KSA+IGhhbGZDYW52YXNXaWR0aCArIGhleFNpemUgfHwgTWF0aC5hYnMoeSAtIGNhbWVyYS55KSA+IGhhbGZDYW52YXNIZWlnaHQgKyBoZXhTaXplKSBjb250aW51ZTsgLy9EcmF3aW5nIGhpZ2hsaWdodCBhcm91bmQgaGV4XG5cbiAgICBpZiAoaGV4LmhpZ2hsaWdodCkge1xuICAgICAgbWFpbkN0eC5zdHJva2VTdHlsZSA9IFwid2hpdGVcIjtcbiAgICAgIG1haW5DdHguYmVnaW5QYXRoKCk7XG4gICAgICBtYWluQ3R4Lm1vdmVUbyh4ICsgYV9mdWxsLCB5IC0gY19mdWxsKTtcbiAgICAgIG1haW5DdHgubGluZVRvKHggKyBiX2Z1bGwsIHkpO1xuICAgICAgbWFpbkN0eC5saW5lVG8oeCArIGFfZnVsbCwgeSArIGNfZnVsbCk7XG4gICAgICBtYWluQ3R4LmxpbmVUbyh4IC0gYV9mdWxsLCB5ICsgY19mdWxsKTtcbiAgICAgIG1haW5DdHgubGluZVRvKHggLSBiX2Z1bGwsIHkpO1xuICAgICAgbWFpbkN0eC5saW5lVG8oeCAtIGFfZnVsbCwgeSAtIGNfZnVsbCk7XG4gICAgICBtYWluQ3R4LmNsb3NlUGF0aCgpO1xuICAgICAgbWFpbkN0eC5zdHJva2UoKTtcbiAgICB9IC8vRHJhd2luZyB0aGUgaGV4XG5cblxuICAgIGxldCBjb2xvciA9IGhleC5kZXRhaWxzID8gYCR7aGV4LmRldGFpbHMuY29sb3Iucn0sICR7aGV4LmRldGFpbHMuY29sb3IuZ30sICR7aGV4LmRldGFpbHMuY29sb3IuYn1gIDogaGV4LnR5cGU7XG4gICAgbWFpbkN0eC5maWxsU3R5bGUgPSBgcmdiYSgke2NvbG9yfSwxKWA7XG4gICAgbWFpbkN0eC5iZWdpblBhdGgoKTtcbiAgICBtYWluQ3R4Lm1vdmVUbyh4ICsgYV9oZXgsIHkgLSBjX2hleCk7XG4gICAgbWFpbkN0eC5saW5lVG8oeCArIGJfaGV4LCB5KTtcbiAgICBtYWluQ3R4LmxpbmVUbyh4ICsgYV9oZXgsIHkgKyBjX2hleCk7XG4gICAgbWFpbkN0eC5saW5lVG8oeCAtIGFfaGV4LCB5ICsgY19oZXgpO1xuICAgIG1haW5DdHgubGluZVRvKHggLSBiX2hleCwgeSk7XG4gICAgbWFpbkN0eC5saW5lVG8oeCAtIGFfaGV4LCB5IC0gY19oZXgpO1xuICAgIG1haW5DdHguY2xvc2VQYXRoKCk7XG4gICAgbWFpbkN0eC5maWxsKCk7XG4gICAgc2V0VGV4dChtYWluQ3R4LCB4LCB5IC0gaGV4U2l6ZSAvIDIsIGAke2hleC54fTske2hleC55fWApO1xuXG4gICAgaWYgKGhleC5kZXRhaWxzKSB7XG4gICAgICBzZXRUZXh0KG1haW5DdHgsIHgsIHksIGAke2hleC5kZXRhaWxzLmVuZXJneX1gKTtcbiAgICAgIHNldFRleHQobWFpbkN0eCwgeCwgeSArIGhleFNpemUgLyAyLCBgbHZsOiAkezEgKiBoZXguZGV0YWlscy5sZXZlbCArIDF9YCk7XG4gICAgfVxuICB9XG5cbiAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGRyYXdNYXApO1xufVxuXG5mdW5jdGlvbiBzZXRUZXh0KGN0eCwgeCwgeSwgdHh0LCBmb250U2l6ZSA9IDEwLCBzdHlsZSA9IFwid2hpdGVcIiwgYWxpZ24gPSAnY2VudGVyJykge1xuICBsZXQgX2ZvbnQgPSBgJHtmb250U2l6ZSAqIChjYW1lcmEuem9vbSArIDEpfXB4IEdlb3JnaWFgO1xuICBjdHguZm9udCA9IF9mb250O1xuICBjdHguZmlsbFN0eWxlID0gc3R5bGU7XG4gIGN0eC50ZXh0QWxpZ24gPSBhbGlnbjtcbiAgY3R4LmZpbGxUZXh0KHR4dCwgeCwgeSwgaGV4U2l6ZSk7XG59XG5cbmZ1bmN0aW9uIGNhbGN1bGF0ZUhleERpbWVuc2lvbnMoKSB7XG4gIGFfZnVsbCA9IGhleFNpemUgLyAyO1xuICBiX2Z1bGwgPSBoZXhTaXplO1xuICBjX2Z1bGwgPSBoZXhTaXplIC8gMiAqIE1hdGguc3FydCgzKTtcbiAgYV9oZXggPSBhX2Z1bGwgKiAwLjk1O1xuICBiX2hleCA9IGJfZnVsbCAqIDAuOTU7XG4gIGNfaGV4ID0gY19mdWxsICogMC45NTtcbn1cblxuZnVuY3Rpb24gd2luZG93UmVzaXplVXBkYXRlKCkge1xuICBtYWluQ2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gIG1haW5DYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICBhbmltQ2FudmFzLndpZHRoID0gd2luZG93LmlubmVyV2lkdGg7XG4gIGFuaW1DYW52YXMuaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuICBoYWxmQ2FudmFzV2lkdGggPSBtYWluQ2FudmFzLndpZHRoIC8gMjtcbiAgaGFsZkNhbnZhc0hlaWdodCA9IG1haW5DYW52YXMuaGVpZ2h0IC8gMjtcbiAgY29uc3QgbWluID0gTWF0aC5taW4oaGFsZkNhbnZhc1dpZHRoLCBoYWxmQ2FudmFzSGVpZ2h0KTtcbiAgc2NhbGVzID0gW21pbiAvIDEwLCBtaW4gLyA3LCBtaW4gLyA1XTtcbn0gLy9IZXggSGlnaGxpZ2h0aW5nXG5cblxuYW5pbUNhbnZhcy5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGFzeW5jICh7XG4gIG9mZnNldFgsXG4gIG9mZnNldFlcbn0pID0+IHtcbiAgY29uc29sZS5sb2coJ2NsaWNrJywgaXNkYmxjbGljayk7XG4gIGF3YWl0IHNsZWVwKDUwMCk7XG4gIGNvbnNvbGUubG9nKCdjbGljaycsIGlzZGJsY2xpY2spO1xuXG4gIGlmIChpc2RibGNsaWNrKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgb2Zmc2V0WCArPSBjYW1lcmEueCArIGJfZnVsbCAtIG1haW5DYW52YXMud2lkdGggLyAyO1xuICBvZmZzZXRZICs9IGNhbWVyYS55ICsgY19mdWxsIC0gbWFpbkNhbnZhcy5oZWlnaHQgLyAyO1xuICBjb25zdCBoZXhDb29yZGluYXRlcyA9IEdyaWQucG9pbnRUb0hleChvZmZzZXRYLCBvZmZzZXRZKTtcblxuICBmb3IgKGxldCBoZXggb2YgY3VycmVudE1hcCkge1xuICAgIGlmIChoZXgueCA9PSBoZXhDb29yZGluYXRlcy54ICYmIGhleC55ID09IGhleENvb3JkaW5hdGVzLnkpIHtcbiAgICAgIGhleC5oaWdobGlnaHQgPSAhaGV4LmhpZ2hsaWdodDtcbiAgICB9IGVsc2Uge1xuICAgICAgaGV4LmhpZ2hsaWdodCA9IGZhbHNlO1xuICAgIH1cbiAgfVxufSk7XG5hbmltQ2FudmFzLmFkZEV2ZW50TGlzdGVuZXIoJ2RibGNsaWNrJywgYXN5bmMgKHtcbiAgb2Zmc2V0WCxcbiAgb2Zmc2V0WVxufSkgPT4ge1xuICBpc2RibGNsaWNrID0gdHJ1ZTtcbiAgY29uc29sZS5sb2coJ2RibGNsaWNrJywgaXNkYmxjbGljayk7XG4gIGF3YWl0IHNsZWVwKDUwMCk7XG4gIGlzZGJsY2xpY2sgPSBmYWxzZTtcbiAgY29uc29sZS5sb2coJ2RibGNsaWNrJywgaXNkYmxjbGljayk7XG4gIG9mZnNldFggKz0gY2FtZXJhLnggKyBiX2Z1bGwgLSBtYWluQ2FudmFzLndpZHRoIC8gMjtcbiAgb2Zmc2V0WSArPSBjYW1lcmEueSArIGNfZnVsbCAtIG1haW5DYW52YXMuaGVpZ2h0IC8gMjtcbiAgY29uc3QgaGV4Q29vcmRpbmF0ZXMgPSBHcmlkLnBvaW50VG9IZXgob2Zmc2V0WCwgb2Zmc2V0WSk7XG4gIGNvbnNvbGUubG9nKGhleENvb3JkaW5hdGVzKTtcbiAgbGV0IGhIZXg7XG4gIGxldCB0SGV4O1xuXG4gIGZvciAobGV0IGhleCBvZiBjdXJyZW50TWFwKSB7XG4gICAgaWYgKGhleC5oaWdobGlnaHQpIHtcbiAgICAgIGhIZXggPSBoZXg7XG4gICAgfVxuXG4gICAgaWYgKGhleC54ID09IGhleENvb3JkaW5hdGVzLnggJiYgaGV4LnkgPT0gaGV4Q29vcmRpbmF0ZXMueSkge1xuICAgICAgdEhleCA9IGhleDtcbiAgICB9XG4gIH1cblxuICBpZiAoIXRIZXgpIHJldHVybjtcbiAgaWYgKGhIZXggJiYgIWhIZXguZGV0YWlscykgcmV0dXJuO1xuICBjb25zb2xlLmxvZygnaEhleCcsIGhIZXgpO1xuICBjb25zb2xlLmxvZygndEhleCcsIHRIZXgpO1xuICBsZXQgY2VsbENvb3JkID0ge1xuICAgIHg6IGhleENvb3JkaW5hdGVzLngsXG4gICAgeTogaGV4Q29vcmRpbmF0ZXMueSxcbiAgICB6OiAtaGV4Q29vcmRpbmF0ZXMueCAtIGhleENvb3JkaW5hdGVzLnlcbiAgfTtcblxuICBpZiAoIWhIZXgpIHtcbiAgICBpZiAoIXRIZXguZGV0YWlscykge1xuICAgICAgYXdhaXQgUFJPVklERVIubmV3R2FtZShjZWxsQ29vcmQpO1xuICAgIH1cbiAgfSBlbHNlIGlmIChoSGV4LmFkZHJlc3MudG9TdHJpbmcoKSA9PSB0SGV4LmFkZHJlc3MudG9TdHJpbmcoKSkge1xuICAgIGF3YWl0IFBST1ZJREVSLnVwZ3JhZGVDZWxsKHRIZXguYWRkcmVzcyk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFpc05laWdoYm9ySGV4KGhIZXgsIHRIZXgpKSByZXR1cm47XG4gICAgbGV0IGVuZXJneSA9IDEwMDA7XG5cbiAgICBpZiAoIXRIZXguZGV0YWlscykge1xuICAgICAgYXdhaXQgUFJPVklERVIubWFya0NlbGwoaEhleC5hZGRyZXNzLCBjZWxsQ29vcmQsIGVuZXJneSk7XG4gICAgfSBlbHNlIGlmIChjb2xvcklzRXF1YWwoaEhleC5kZXRhaWxzLmNvbG9yLCB0SGV4LmRldGFpbHMuY29sb3IpKSB7XG4gICAgICAvLyDQv9C10YDQtdC/0LjRgdCw0YLRjCDRg9GB0LvQvtCy0LjQtSDQv9C+INCy0LvQsNC00LXQu9GM0YbRgyDRj9GH0LXQudC60Lgg0Lgg0YbQstC10YLQsFxuICAgICAgYXdhaXQgUFJPVklERVIuaGVscENlbGwoaEhleC5hZGRyZXNzLCBjZWxsQ29vcmQsIGVuZXJneSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGF3YWl0IFBST1ZJREVSLmF0dGtDZWxsKGhIZXguYWRkcmVzcywgY2VsbENvb3JkLCBlbmVyZ3kpO1xuICAgIH1cbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNvbG9ySXNFcXVhbChjb2xvcjEsIGNvbG9yMikge1xuICByZXR1cm4gY29sb3IxLnIgPT0gY29sb3IyLnIgJiYgY29sb3IxLmcgPT0gY29sb3IyLmcgJiYgY29sb3IxLmIgPT0gY29sb3IyLmI7XG59XG5cbmZ1bmN0aW9uIGlzTmVpZ2hib3JIZXgoaGV4MSwgaGV4Mikge1xuICByZXR1cm4gY3ViZV9kaXN0YW5jZShoZXgxLCBoZXgyKSA9PSAxO1xufVxuXG5mdW5jdGlvbiBjdWJlX2Rpc3RhbmNlKGhleDEsIGhleDIpIHtcbiAgcmV0dXJuIE1hdGgubWF4KE1hdGguYWJzKGhleDEueCAtIGhleDIueCksIE1hdGguYWJzKGhleDEueSAtIGhleDIueSksIE1hdGguYWJzKC1oZXgxLnggLSBoZXgxLnkgLSAoLWhleDIueCAtIGhleDIueSkpKTtcbn1cblxud2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsICgpID0+IHtcbiAgd2luZG93UmVzaXplVXBkYXRlKCk7XG4gIHpvb21VcGRhdGUoKTtcbn0pOyAvL2h0dHA6Ly9qc2ZpZGRsZS5uZXQvZ2ZjYXJ2L1FLZ0hzLyBvciBodHRwOi8vanNmaWRkbGUubmV0L2dmY2Fydi90QXdRVi9cbi8vaHR0cHM6Ly9qc2ZpZGRsZS5uZXQvOTMxd2s3NW4vMi8iLCIvL0ltcG9ydHNcbmltcG9ydCAqIGFzIERJU1BMQVkgZnJvbSAnLi4vc2NyaXB0cy9kaXNwbGF5LmpzJzsgLy9QdWJsaWMgdmFyaWFibGVzXG4vLy1cbi8vUHJpdmF0ZSB2YXJpYWJsZXNcbi8vLVxuLy9QdWJsaWMgZnVuY3Rpb25zXG5cbmV4cG9ydCBmdW5jdGlvbiBpbml0aWF0ZUNvbnRyb2xzKCkge1xuICAvL1pvb20gY29udHJvbHNcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiN6b29tX291dFwiKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoKSA9PiB7XG4gICAgaWYgKERJU1BMQVkuY2FtZXJhLnpvb20gPiAwKSBESVNQTEFZLmNhbWVyYS56b29tLS07XG4gICAgRElTUExBWS56b29tVXBkYXRlKCk7XG4gIH0pO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI3pvb21faW5cIikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4ge1xuICAgIGlmIChESVNQTEFZLmNhbWVyYS56b29tIDwgMikgRElTUExBWS5jYW1lcmEuem9vbSsrO1xuICAgIERJU1BMQVkuem9vbVVwZGF0ZSgpO1xuICB9KTsgLy9DYW1lcmEgcG9zaXRpb24gY29udHJvbHNcblxuICBsZXQgdGltZXIgPSBudWxsO1xuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgKCkgPT4ge1xuICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICB9KTtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCAoKSA9PiB7XG4gICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gIH0pO1xuICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiI2NhbWVyYV91cFwiKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoKSA9PiB7XG4gICAgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBESVNQTEFZLmNhbWVyYS55IC09IDU7XG4gICAgfSwgMTApO1xuICB9KTtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYW1lcmFfbGVmdFwiKS5hZGRFdmVudExpc3RlbmVyKCdtb3VzZWRvd24nLCAoKSA9PiB7XG4gICAgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICBESVNQTEFZLmNhbWVyYS54IC09IDU7XG4gICAgfSwgMTApO1xuICB9KTtcbiAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcIiNjYW1lcmFfcmlnaHRcIikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4ge1xuICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgRElTUExBWS5jYW1lcmEueCArPSA1O1xuICAgIH0sIDEwKTtcbiAgfSk7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjY2FtZXJhX2Rvd25cIikuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgKCkgPT4ge1xuICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgRElTUExBWS5jYW1lcmEueSArPSA1O1xuICAgIH0sIDEwKTtcbiAgfSk7IC8vS2V5Ym9hcmQgY29udHJvbHNcblxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgZSA9PiB7XG4gICAgc3dpdGNoIChlLmNvZGUpIHtcbiAgICAgIGNhc2UgXCJBcnJvd1VwXCI6XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICBESVNQTEFZLmNhbWVyYS55IC09IDU7XG4gICAgICAgIH0sIDEwKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJBcnJvd0xlZnRcIjpcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIERJU1BMQVkuY2FtZXJhLnggLT0gNTtcbiAgICAgICAgfSwgMTApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIERJU1BMQVkuY2FtZXJhLnggKz0gNTtcbiAgICAgICAgfSwgMTApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIkFycm93RG93blwiOlxuICAgICAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgICAgICAgdGltZXIgPSBzZXRJbnRlcnZhbCgoKSA9PiB7XG4gICAgICAgICAgRElTUExBWS5jYW1lcmEueSArPSA1O1xuICAgICAgICB9LCAxMCk7XG4gICAgICAgIGJyZWFrO1xuICAgIH1cbiAgfSk7XG59IC8vUHJpdmF0ZSBmdW5jdGlvbnMiLCJpbXBvcnQgeyBBZGRyZXNzLCBQcm92aWRlclJwY0NsaWVudCwgVHZtRXhjZXB0aW9uIH0gZnJvbSAnZXZlcnNjYWxlLWlucGFnZS1wcm92aWRlcic7XG5pbXBvcnQgeyBFdmVyc2NhbGVTdGFuZGFsb25lQ2xpZW50LCBTaW1wbGVLZXlzdG9yZSwgU2ltcGxlQWNjb3VudHNTdG9yYWdlLCBXYWxsZXRWM0FjY291bnQgfSBmcm9tICdldmVyc2NhbGUtc3RhbmRhbG9uZS1jbGllbnQnO1xuXG5jb25zdCByb3V0ZXJBYmkgPSByZXF1aXJlKCcuLi8uLi9jb250cmFjdHMvYnVpbGQvUm91dGVyLmFiaS5qc29uJyk7XG5cbmNvbnN0IGNlbGxBYmkgPSByZXF1aXJlKCcuLi8uLi9jb250cmFjdHMvYnVpbGQvQ2VsbC5hYmkuanNvbicpO1xuXG5jb25zdCBDb25maWcgPSByZXF1aXJlKFwiLi4vLi4vY29uZmlnLmpzb25cIik7XG5cbmxldCBjdXJyZW50TWFwO1xuY29uc3QgZXZlciA9IG5ldyBQcm92aWRlclJwY0NsaWVudCh7fSk7XG5cbmZ1bmN0aW9uIGJlaGF2aW9yKG5hbWUsIGZuKSB7XG4gIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoYFtkYXRhLWJlaGF2aW9yPSR7bmFtZX1dYCkuZm9yRWFjaChmbik7XG59XG5cbmNvbnN0IGlubmVyVGV4dCA9IHRleHQgPT4gZWxlbSA9PiB7XG4gIGVsZW0uaW5uZXJUZXh0ID0gdGV4dDtcbn07XG5cbmZ1bmN0aW9uIHJlcXVlc3RQZXJtaXNzaW9ucygpIHtcbiAgcmV0dXJuIGV2ZXIucmVxdWVzdFBlcm1pc3Npb25zKHtcbiAgICBwZXJtaXNzaW9uczogWydiYXNpYycsICdhY2NvdW50SW50ZXJhY3Rpb24nXVxuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gZGlzY29ubmVjdEFjdGlvbigpIHtcbiAgY29uc29sZS5sb2coJ2Rpc2Nvbm5lY3RBY3Rpb24nKTtcbiAgYXdhaXQgZXZlci5kaXNjb25uZWN0KCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGNvbm5lY3QoKSB7XG4gIGF3YWl0IGV2ZXIucmVxdWVzdFBlcm1pc3Npb25zKHtcbiAgICBwZXJtaXNzaW9uczogWydiYXNpYycsICdhY2NvdW50SW50ZXJhY3Rpb24nXVxuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tDb25uZWN0KCkge1xuICBjb25zdCBwcm92aWRlclN0YXRlID0gYXdhaXQgZXZlci5nZXRQcm92aWRlclN0YXRlKCk7XG4gIGNvbnN0IHBlcm1pc3Npb25zID0gcHJvdmlkZXJTdGF0ZS5wZXJtaXNzaW9ucztcbiAgY29uc3QgbmV0d29yayA9IHByb3ZpZGVyU3RhdGUuc2VsZWN0ZWRDb25uZWN0aW9uO1xuXG4gIGlmICghY29udHJhY3RBZGRyZXNzKG5ldHdvcmspIHx8ICFwZXJtaXNzaW9ucy5hY2NvdW50SW50ZXJhY3Rpb24pIHtcbiAgICBiZWhhdmlvcignY29ubmVjdCcsIGVsZW0gPT4gZWxlbS5vbmNsaWNrID0gcmVxdWVzdFBlcm1pc3Npb25zKTtcbiAgICBzd2l0Y2hTY3JlZW4oXCJsb2dpblwiKTtcblxuICAgIGNvbnN0IGNvbm5lY3RUZXh0ID0gZWxlbSA9PiB7XG4gICAgICBjb25zdCBkaXNhYmxlZCA9ICFjb250cmFjdEFkZHJlc3MobmV0d29yayk7XG4gICAgICBlbGVtLmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICBlbGVtLmlubmVyVGV4dCA9IGRpc2FibGVkID8gYENvbnRyYWN0IG5vdCBmb3VuZGAgOiBgQ29ubmVjdCB3aXRoICR7bmV0d29ya31gO1xuICAgIH07XG5cbiAgICBiZWhhdmlvcignY29ubmVjdCcsIGNvbm5lY3RUZXh0KTtcbiAgfSBlbHNlIHtcbiAgICAvLyBJTkZPIGZvciB0cmFuc2FjdGlvbnNGb3VuZCBhbmQgY29udHJhY3RTdGF0ZUNoYW5nZWQgbmVlZCBwZXJtaXNzaW9uc1xuICAgIGNvbnN0IHByb3ZpZGVyU3RhdGUgPSBhd2FpdCBldmVyLmdldFByb3ZpZGVyU3RhdGUoKTtcbiAgICAoYXdhaXQgZXZlci5zdWJzY3JpYmUoJ3RyYW5zYWN0aW9uc0ZvdW5kJywge1xuICAgICAgYWRkcmVzczogY29udHJhY3RBZGRyZXNzKHByb3ZpZGVyU3RhdGUuc2VsZWN0ZWRDb25uZWN0aW9uKVxuICAgIH0pKS5vbignZGF0YScsIGV2ZW50ID0+IHtcbiAgICAgIGNvbnNvbGUubG9nKCc6Jywge1xuICAgICAgICBhZGRyZXNzOiBldmVudC5hZGRyZXNzLFxuICAgICAgICB0cmFuc2FjdGlvbnM6IGV2ZW50LnRyYW5zYWN0aW9ucyxcbiAgICAgICAgaW5mbzogZXZlbnQuaW5mb1xuICAgICAgfSk7XG4gICAgfSk7XG4gICAgKGF3YWl0IGV2ZXIuc3Vic2NyaWJlKCdjb250cmFjdFN0YXRlQ2hhbmdlZCcsIHtcbiAgICAgIGFkZHJlc3M6IGNvbnRyYWN0QWRkcmVzcyhwcm92aWRlclN0YXRlLnNlbGVjdGVkQ29ubmVjdGlvbilcbiAgICB9KSkub24oJ2RhdGEnLCBldmVudCA9PiB7XG4gICAgICBjb25zb2xlLmxvZygncGVybWlzc2lvbnNDaGFuZ2VkOicsIHtcbiAgICAgICAgYWRkcmVzczogZXZlbnQuYWRkcmVzcyxcbiAgICAgICAgc3RhdGU6IGV2ZW50LnN0YXRlXG4gICAgICB9KTtcbiAgICB9KTtcbiAgICBzd2l0Y2hTY3JlZW4oXCJtYWluXCIpO1xuICAgIGNvbnN0IGFjY291bnQgPSBwZXJtaXNzaW9ucy5hY2NvdW50SW50ZXJhY3Rpb247XG4gICAgbGV0IGFkZHJlc3MgPSBhY2NvdW50LmFkZHJlc3MudG9TdHJpbmcoKTtcbiAgICBsZXQgcHVia2V5ID0gYWNjb3VudC5hZGRyZXNzLnRvU3RyaW5nKCk7XG4gICAgYmVoYXZpb3IoJ2FkZHJlc3MnLCBpbm5lclRleHQoYCR7YWRkcmVzcy5zdWJzdHIoMCwgNil9Li4uJHthZGRyZXNzLnN1YnN0cigtNCwgNCl9YCkpO1xuICAgIGJlaGF2aW9yKCdwdWJsaWNLZXknLCBpbm5lclRleHQoYCR7cHVia2V5LnN1YnN0cigwLCA2KX0uLi4ke3B1YmtleS5zdWJzdHIoLTQsIDQpfWApKTtcbiAgICBiZWhhdmlvcignZGlzY29ubmVjdEFjdGlvbicsIGVsZW0gPT4gZWxlbS5vbmNsaWNrID0gZGlzY29ubmVjdEFjdGlvbik7XG4gICAgbG9hZE1hcCgpO1xuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHNldE5ldHdvcmtDaGFuZ2VkKG5ldHdvcmspIHtcbiAgY29uc3QgbW9kID0gbmV0d29yayA9PT0gJ21haW5uZXQnID8gJ3N1Y2Nlc3MnIDogJ3NlY29uZGFyeSc7XG4gIGNvbnN0IG91dCA9IGA8c3BhbiBjbGFzcz1cImJhZGdlIGJnLSR7bW9kfVwiPiR7bmV0d29ya308L3NwYW4+YDtcbiAgYmVoYXZpb3IoJ25ldHdvcmsnLCBlbGVtID0+IGVsZW0uaW5uZXJIVE1MID0gb3V0KTtcbiAgYXdhaXQgY2hlY2tDb25uZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGNvbnRyYWN0QWRkcmVzcyhuZXR3b3JrLCBuYW1lID0gXCJyb3V0ZXJcIikge1xuICAvLyBpZiAoYWRkcltuZXR3b3JrXSAmJiBhZGRyW25ldHdvcmtdW25hbWVdKSB7XG4gIC8vIHJldHVybiBuZXcgQWRkcmVzcyhhZGRyW25ldHdvcmtdW25hbWVdKTtcbiAgLy8gfVxuICAvLyByZXR1cm4gbnVsbFxuICByZXR1cm4gbmV3IEFkZHJlc3MoQ29uZmlnLnJvdXRlcik7XG59IC8vIGFzeW5jIGZ1bmN0aW9uIENvbnRyYWN0KCkge1xuLy8gY29uc3QgcHJvdmlkZXJTdGF0ZSA9IGF3YWl0IGV2ZXIuZ2V0UHJvdmlkZXJTdGF0ZSgpO1xuLy8gY29uc3QgYWRkcmVzcyA9IGNvbnRyYWN0QWRkcmVzcyhwcm92aWRlclN0YXRlLnNlbGVjdGVkQ29ubmVjdGlvbik7XG4vLyByZXR1cm4gbmV3IGV2ZXIuQ29udHJhY3QoYWJpLCBhZGRyZXNzKTtcbi8vIH1cblxuXG5mdW5jdGlvbiBzd2l0Y2hTY3JlZW4odG8pIHtcbiAgY29uc29sZS5sb2coJ3N3aXRjaFNjcmVlbjonLCB0byk7XG4gIFtcImV4dGVuc2lvblwiLCBcImxvZ2luXCIsIFwibWFpblwiXS5mb3JFYWNoKHNjcmVlbiA9PiB7XG4gICAgY29uc3Qgc3dpdGNoZXIgPSBlbGVtID0+IGVsZW0uc3R5bGUuZGlzcGxheSA9IHRvID09PSBzY3JlZW4gPyAndGFibGUtcm93JyA6ICdub25lJztcblxuICAgIGJlaGF2aW9yKHNjcmVlbiwgc3dpdGNoZXIpO1xuICB9KTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gbWFpbkZsb3coKSB7XG4gIGNvbnN0IHByb3ZpZGVyU3RhdGUgPSBhd2FpdCBldmVyLmdldFByb3ZpZGVyU3RhdGUoKTtcbiAgY29uc29sZS5sb2coJ3NlbGVjdGVkQ29ubmVjdGlvbjonLCBwcm92aWRlclN0YXRlLnNlbGVjdGVkQ29ubmVjdGlvbik7XG4gIGF3YWl0IHNldE5ldHdvcmtDaGFuZ2VkKHByb3ZpZGVyU3RhdGUuc2VsZWN0ZWRDb25uZWN0aW9uKTtcbiAgKGF3YWl0IGV2ZXIuc3Vic2NyaWJlKCduZXR3b3JrQ2hhbmdlZCcpKS5vbignZGF0YScsIGV2ZW50ID0+IHtcbiAgICBjb25zb2xlLmxvZygnbmV0d29ya0NoYW5nZWQ6JywgZXZlbnQuc2VsZWN0ZWRDb25uZWN0aW9uKTtcbiAgICBzZXROZXR3b3JrQ2hhbmdlZChldmVudC5zZWxlY3RlZENvbm5lY3Rpb24pO1xuICB9KTtcbiAgKGF3YWl0IGV2ZXIuc3Vic2NyaWJlKCdwZXJtaXNzaW9uc0NoYW5nZWQnKSkub24oJ2RhdGEnLCBhc3luYyBldmVudCA9PiB7XG4gICAgY29uc29sZS5sb2coJ3Blcm1pc3Npb25zQ2hhbmdlZDonLCBldmVudC5wZXJtaXNzaW9ucyk7XG4gICAgYXdhaXQgY2hlY2tDb25uZWN0KCk7XG4gIH0pO1xufVxuXG5hc3luYyBmdW5jdGlvbiBsb2FkTWFwKCkge1xuICBhd2FpdCByb3V0ZXJEZXRhaWxzKCk7XG4gIGxldCBjb29yZHMgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGN1cnJlbnRNYXAubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgaGV4ID0gY3VycmVudE1hcFtpXTtcbiAgICBjb29yZHMucHVzaCh7XG4gICAgICB4OiBoZXgueCxcbiAgICAgIHk6IGhleC55LFxuICAgICAgejogLWhleC54IC0gaGV4LnlcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBhZGRyZXNlcyA9IGF3YWl0IGdldEFkZHJlc3NDZWxscyhjb29yZHMpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY3VycmVudE1hcC5sZW5ndGg7IGkrKykge1xuICAgIGxldCBoZXggPSBjdXJyZW50TWFwW2ldO1xuICAgIGhleC5hZGRyZXNzID0gYWRkcmVzZXNbaV07XG4gICAgYXdhaXQgc3Vic2NyaWJlQ2VsbFN0YXRlKGFkZHJlc2VzW2ldLCBoZXgpO1xuICAgIGhleC5kZXRhaWxzID0gYXdhaXQgZ2V0RGV0YWlsc0NlbGwoYWRkcmVzZXNbaV0pO1xuICB9XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBpbml0KG1hcCkge1xuICBjdXJyZW50TWFwID0gbWFwO1xuXG4gIGlmIChhd2FpdCBldmVyLmhhc1Byb3ZpZGVyKCkpIHtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZXZlci5lbnN1cmVJbml0aWFsaXplZCgpO1xuICAgICAgYXdhaXQgbWFpbkZsb3coKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhyb3cgZXJyb3I7IC8vIFRPRE8gaGFuZGxlIGl0XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHN3aXRjaFNjcmVlbihcImV4dGVuc2lvblwiKTtcbiAgfVxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHJvdXRlckRldGFpbHMoKSB7XG4gIGNvbnN0IHByb3ZpZGVyU3RhdGUgPSBhd2FpdCBldmVyLmdldFByb3ZpZGVyU3RhdGUoKTtcbiAgY29uc3Qgcm91dGVyID0gbmV3IGV2ZXIuQ29udHJhY3Qocm91dGVyQWJpLCBjb250cmFjdEFkZHJlc3MocHJvdmlkZXJTdGF0ZS5zZWxlY3RlZENvbm5lY3Rpb24sICdyb3V0ZXInKSk7XG5cbiAgdHJ5IHtcbiAgICBsZXQgZGV0YWlscztcbiAgICBkZXRhaWxzID0gYXdhaXQgcm91dGVyLm1ldGhvZHMuZ2V0RGV0YWlscyh7fSkuY2FsbCgpO1xuICAgIGNvbnNvbGUubG9nKCdnZXREZXRhaWxzIHJvdXRlcicsIGRldGFpbHMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlKTtcblxuICAgIGlmIChlIGluc3RhbmNlb2YgVHZtRXhjZXB0aW9uKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUuY29kZSk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3Vic2NyaWJlQ2VsbFN0YXRlKGFkZHJlc3MsIGhleCkge1xuICB0cnkge1xuICAgIChhd2FpdCBldmVyLnN1YnNjcmliZSgnY29udHJhY3RTdGF0ZUNoYW5nZWQnLCB7XG4gICAgICBhZGRyZXNzOiBhZGRyZXNzXG4gICAgfSkpLm9uKCdkYXRhJywgYXN5bmMgZXZlbnQgPT4ge1xuICAgICAgLy8gY29uc29sZS5sb2coJ2NvbnRyYWN0U3RhdGVDaGFuZ2VkOicsIHtcbiAgICAgIC8vIGFkZHJlc3M6IGV2ZW50LmFkZHJlc3MsXG4gICAgICAvLyBzdGF0ZTogZXZlbnQuc3RhdGUsXG4gICAgICAvLyB9KTtcbiAgICAgIGhleC5kZXRhaWxzID0gYXdhaXQgZ2V0RGV0YWlsc0NlbGwoZXZlbnQuYWRkcmVzcyk7XG4gICAgfSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuXG4gICAgaWYgKGUgaW5zdGFuY2VvZiBUdm1FeGNlcHRpb24pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZS5jb2RlKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBnZXRBZGRyZXNzQ2VsbHMoY29vcmRzKSB7XG4gIGNvbnN0IHByb3ZpZGVyU3RhdGUgPSBhd2FpdCBldmVyLmdldFByb3ZpZGVyU3RhdGUoKTtcbiAgY29uc3Qgcm91dGVyID0gbmV3IGV2ZXIuQ29udHJhY3Qocm91dGVyQWJpLCBjb250cmFjdEFkZHJlc3MocHJvdmlkZXJTdGF0ZS5zZWxlY3RlZENvbm5lY3Rpb24sICdyb3V0ZXInKSk7XG5cbiAgdHJ5IHtcbiAgICBsZXQgZGV0YWlscztcbiAgICBkZXRhaWxzID0gYXdhaXQgcm91dGVyLm1ldGhvZHMuZ2V0QWRkcmVzc0NlbGxzKHtcbiAgICAgIGNvb3Jkc1xuICAgIH0pLmNhbGwoKTtcbiAgICBjb25zb2xlLmxvZygnZ2V0QWRkcmVzc0NlbGxzIHJvdXRlcicsIGRldGFpbHMpO1xuICAgIHJldHVybiBkZXRhaWxzLmFkZHJlc2VzO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlKTtcblxuICAgIGlmIChlIGluc3RhbmNlb2YgVHZtRXhjZXB0aW9uKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUuY29kZSk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbmV3R2FtZShjZWxsQ29vcmQpIHtcbiAgY29uc3QgcHJvdmlkZXJTdGF0ZSA9IGF3YWl0IGV2ZXIuZ2V0UHJvdmlkZXJTdGF0ZSgpO1xuICBjb25zdCBwZXJtaXNzaW9ucyA9IHByb3ZpZGVyU3RhdGUucGVybWlzc2lvbnM7XG4gIGlmICghcGVybWlzc2lvbnMuYWNjb3VudEludGVyYWN0aW9uKSByZXR1cm47XG4gIGNvbnN0IGFjY291bnQgPSBwZXJtaXNzaW9ucy5hY2NvdW50SW50ZXJhY3Rpb247XG4gIGNvbnN0IHJvdXRlciA9IG5ldyBldmVyLkNvbnRyYWN0KHJvdXRlckFiaSwgY29udHJhY3RBZGRyZXNzKHByb3ZpZGVyU3RhdGUuc2VsZWN0ZWRDb25uZWN0aW9uLCAncm91dGVyJykpO1xuXG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJ25ld0dhbWUnLCAxKTtcbiAgICBsZXQgcmVzID0gYXdhaXQgcm91dGVyLm1ldGhvZHMubmV3R2FtZSh7XG4gICAgICBzZW5kR2FzVG86IGFjY291bnQuYWRkcmVzcy50b1N0cmluZygpLFxuICAgICAgYmFzZUNvb3JkOiBjZWxsQ29vcmRcbiAgICB9KS5zZW5kKHtcbiAgICAgIGZyb206IGFjY291bnQuYWRkcmVzcy50b1N0cmluZygpLFxuICAgICAgYW1vdW50OiAnMjAwMDAwMDAwMCdcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZygnbmV3R2FtZScsIHJlcyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuXG4gICAgaWYgKGUgaW5zdGFuY2VvZiBUdm1FeGNlcHRpb24pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZS5jb2RlKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBtYXJrQ2VsbChhZGRyZXNzLCBjZWxsQ29vcmQsIGVuZXJneSkge1xuICBjb25zdCBwcm92aWRlclN0YXRlID0gYXdhaXQgZXZlci5nZXRQcm92aWRlclN0YXRlKCk7XG4gIGNvbnN0IHBlcm1pc3Npb25zID0gcHJvdmlkZXJTdGF0ZS5wZXJtaXNzaW9ucztcbiAgaWYgKCFwZXJtaXNzaW9ucy5hY2NvdW50SW50ZXJhY3Rpb24pIHJldHVybjtcbiAgY29uc3QgYWNjb3VudCA9IHBlcm1pc3Npb25zLmFjY291bnRJbnRlcmFjdGlvbjtcbiAgY29uc3QgY2VsbCA9IG5ldyBldmVyLkNvbnRyYWN0KGNlbGxBYmksIGFkZHJlc3MpO1xuXG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJ21hcmtDZWxsJywgMSk7XG4gICAgbGV0IHJlcyA9IGF3YWl0IGNlbGwubWV0aG9kcy5tYXJrQ2VsbCh7XG4gICAgICBzZW5kR2FzVG86IGFjY291bnQuYWRkcmVzcy50b1N0cmluZygpLFxuICAgICAgdGFyZ2V0Q29vcmQ6IGNlbGxDb29yZCxcbiAgICAgIGVuZXJneTogZW5lcmd5XG4gICAgfSkuc2VuZCh7XG4gICAgICBmcm9tOiBhY2NvdW50LmFkZHJlc3MudG9TdHJpbmcoKSxcbiAgICAgIGFtb3VudDogJzIwMDAwMDAwMDAnXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coJ21hcmtDZWxsJywgcmVzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7XG5cbiAgICBpZiAoZSBpbnN0YW5jZW9mIFR2bUV4Y2VwdGlvbikge1xuICAgICAgY29uc29sZS5lcnJvcihlLmNvZGUpO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIHVwZ3JhZGVDZWxsKGFkZHJlc3MpIHtcbiAgY29uc3QgcHJvdmlkZXJTdGF0ZSA9IGF3YWl0IGV2ZXIuZ2V0UHJvdmlkZXJTdGF0ZSgpO1xuICBjb25zdCBwZXJtaXNzaW9ucyA9IHByb3ZpZGVyU3RhdGUucGVybWlzc2lvbnM7XG4gIGlmICghcGVybWlzc2lvbnMuYWNjb3VudEludGVyYWN0aW9uKSByZXR1cm47XG4gIGNvbnN0IGFjY291bnQgPSBwZXJtaXNzaW9ucy5hY2NvdW50SW50ZXJhY3Rpb247XG4gIGNvbnN0IGNlbGwgPSBuZXcgZXZlci5Db250cmFjdChjZWxsQWJpLCBhZGRyZXNzKTtcblxuICB0cnkge1xuICAgIGNvbnNvbGUubG9nKCd1cGdyYWRlQ2VsbCcsIDEpO1xuICAgIGxldCByZXMgPSBhd2FpdCBjZWxsLm1ldGhvZHMudXBncmFkZUNlbGwoe1xuICAgICAgc2VuZEdhc1RvOiBhY2NvdW50LmFkZHJlc3MudG9TdHJpbmcoKVxuICAgIH0pLnNlbmQoe1xuICAgICAgZnJvbTogYWNjb3VudC5hZGRyZXNzLnRvU3RyaW5nKCksXG4gICAgICBhbW91bnQ6ICcxMDAwMDAwMDAwJ1xuICAgIH0pO1xuICAgIGNvbnNvbGUubG9nKCd1cGdyYWRlQ2VsbCcsIHJlcyk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zb2xlLmVycm9yKGUpO1xuXG4gICAgaWYgKGUgaW5zdGFuY2VvZiBUdm1FeGNlcHRpb24pIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZS5jb2RlKTtcbiAgICB9XG4gIH1cbn1cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBoZWxwQ2VsbChhZGRyZXNzLCBjZWxsQ29vcmQsIGVuZXJneSkge1xuICBjb25zdCBwcm92aWRlclN0YXRlID0gYXdhaXQgZXZlci5nZXRQcm92aWRlclN0YXRlKCk7XG4gIGNvbnN0IHBlcm1pc3Npb25zID0gcHJvdmlkZXJTdGF0ZS5wZXJtaXNzaW9ucztcbiAgaWYgKCFwZXJtaXNzaW9ucy5hY2NvdW50SW50ZXJhY3Rpb24pIHJldHVybjtcbiAgY29uc3QgYWNjb3VudCA9IHBlcm1pc3Npb25zLmFjY291bnRJbnRlcmFjdGlvbjtcbiAgY29uc3QgY2VsbCA9IG5ldyBldmVyLkNvbnRyYWN0KGNlbGxBYmksIGFkZHJlc3MpO1xuXG4gIHRyeSB7XG4gICAgY29uc29sZS5sb2coJ2hlbHBDZWxsJywgMSk7XG4gICAgbGV0IHJlcyA9IGF3YWl0IGNlbGwubWV0aG9kcy5oZWxwQ2VsbCh7XG4gICAgICBzZW5kR2FzVG86IGFjY291bnQuYWRkcmVzcy50b1N0cmluZygpLFxuICAgICAgdGFyZ2V0Q29vcmQ6IGNlbGxDb29yZCxcbiAgICAgIGVuZXJneTogZW5lcmd5XG4gICAgfSkuc2VuZCh7XG4gICAgICBmcm9tOiBhY2NvdW50LmFkZHJlc3MudG9TdHJpbmcoKSxcbiAgICAgIGFtb3VudDogJzEwMDAwMDAwMDAnXG4gICAgfSk7XG4gICAgY29uc29sZS5sb2coJ2hlbHBDZWxsJywgcmVzKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIGNvbnNvbGUuZXJyb3IoZSk7XG5cbiAgICBpZiAoZSBpbnN0YW5jZW9mIFR2bUV4Y2VwdGlvbikge1xuICAgICAgY29uc29sZS5lcnJvcihlLmNvZGUpO1xuICAgIH1cbiAgfVxufVxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGF0dGtDZWxsKGFkZHJlc3MsIGNlbGxDb29yZCwgZW5lcmd5KSB7XG4gIGNvbnN0IHByb3ZpZGVyU3RhdGUgPSBhd2FpdCBldmVyLmdldFByb3ZpZGVyU3RhdGUoKTtcbiAgY29uc3QgcGVybWlzc2lvbnMgPSBwcm92aWRlclN0YXRlLnBlcm1pc3Npb25zO1xuICBpZiAoIXBlcm1pc3Npb25zLmFjY291bnRJbnRlcmFjdGlvbikgcmV0dXJuO1xuICBjb25zdCBhY2NvdW50ID0gcGVybWlzc2lvbnMuYWNjb3VudEludGVyYWN0aW9uO1xuICBjb25zdCBjZWxsID0gbmV3IGV2ZXIuQ29udHJhY3QoY2VsbEFiaSwgYWRkcmVzcyk7XG5cbiAgdHJ5IHtcbiAgICBjb25zb2xlLmxvZygnYXR0a0NlbGwnLCAxKTtcbiAgICBsZXQgcmVzID0gYXdhaXQgY2VsbC5tZXRob2RzLmF0dGtDZWxsKHtcbiAgICAgIHNlbmRHYXNUbzogYWNjb3VudC5hZGRyZXNzLnRvU3RyaW5nKCksXG4gICAgICB0YXJnZXRDb29yZDogY2VsbENvb3JkLFxuICAgICAgZW5lcmd5OiBlbmVyZ3lcbiAgICB9KS5zZW5kKHtcbiAgICAgIGZyb206IGFjY291bnQuYWRkcmVzcy50b1N0cmluZygpLFxuICAgICAgYW1vdW50OiAnMTAwMDAwMDAwMCdcbiAgICB9KTtcbiAgICBjb25zb2xlLmxvZygnYXR0a0NlbGwnLCByZXMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlKTtcblxuICAgIGlmIChlIGluc3RhbmNlb2YgVHZtRXhjZXB0aW9uKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUuY29kZSk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZ2V0RGV0YWlsc0NlbGwoYWRkcmVzcykge1xuICBjb25zdCBjZWxsID0gbmV3IGV2ZXIuQ29udHJhY3QoY2VsbEFiaSwgYWRkcmVzcyk7XG5cbiAgdHJ5IHtcbiAgICBjb25zdCBzdGF0ZVJlcyA9IGF3YWl0IGNlbGwuZ2V0RnVsbFN0YXRlKCk7XG5cbiAgICBpZiAoc3RhdGVSZXMuc3RhdGUgPT0gbnVsbCB8fCAhc3RhdGVSZXMuc3RhdGUuaXNEZXBsb3llZCkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSAvL2NvbnNvbGUubG9nKCdzdGF0ZScsIHN0YXRlUmVzLnN0YXRlKTtcblxuXG4gICAgbGV0IGRldGFpbHM7XG4gICAgZGV0YWlscyA9IGF3YWl0IGNlbGwubWV0aG9kcy5nZXREZXRhaWxzKHt9KS5jYWxsKCk7XG4gICAgY29uc29sZS5sb2coJ2dldERldGFpbHMgY2VsbCcsIGRldGFpbHMpO1xuICAgIHJldHVybiBkZXRhaWxzO1xuICB9IGNhdGNoIChlKSB7XG4gICAgY29uc29sZS5lcnJvcihlKTtcblxuICAgIGlmIChlIGluc3RhbmNlb2YgVHZtRXhjZXB0aW9uKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGUuY29kZSk7XG4gICAgfVxuICB9XG59XG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gc3Vic2NyaWJlUGVybWlzc2lvbnNDaGFuZ2VkKCkge1xuICBhd2FpdCBldmVyLnN1YnNjcmliZSgncGVybWlzc2lvbnNDaGFuZ2VkJykub24oJ2RhdGEnLCBwZXJtaXNzaW9ucyA9PiB7XG4gICAgY29uc29sZS5sb2cocGVybWlzc2lvbnMpO1xuICB9KTtcbn0iLCJcInVzZSBzdHJpY3RcIjsgLy9JbXBvcnQgQ1NTXG5cbmltcG9ydCAnLi9zdHlsZXMvbWFpbi5zY3NzJzsgLy9JbXBvcnQgSlNcblxuaW1wb3J0ICogYXMgTUFQR0VORVJBVE9SIGZyb20gJy4vc2NyaXB0cy9tYXBnZW5lcmF0b3IuanMnO1xuaW1wb3J0ICogYXMgRElTUExBWSBmcm9tICcuL3NjcmlwdHMvZGlzcGxheS5qcyc7XG5pbXBvcnQgKiBhcyBDT05UUk9MUyBmcm9tICcuL3NjcmlwdHMvY29udHJvbHMuanMnO1xuaW1wb3J0ICogYXMgUFJPVklERVIgZnJvbSAnLi9zY3JpcHRzL2V2ZXIuanMnOyAvL2h0dHBzOi8vZ2l0aHViLmNvbS9mbGF1d2VrZXVsL2hvbmV5Y29tYlxuLy9jb25zb2xlLmNsZWFyKCk7XG5cbmxldCBtYXAgPSBNQVBHRU5FUkFUT1IuZ2V0UmFuZG9tTWFwKDIwLCAxNSk7XG5ESVNQTEFZLmluaXRpYXRlTWFwKG1hcCwgUFJPVklERVIpO1xuQ09OVFJPTFMuaW5pdGlhdGVDb250cm9scygpO1xuXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpO1xufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBOzs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQ2pEQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQzVRQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7OztBQzdFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUNwWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///612\n')},431:function(module,exports,__webpack_require__){eval("var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.0\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }  \r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }  \r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }  \r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --\x3e 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }  \r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (true) {\r\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return BigNumber; }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else {}\r\n})(this);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///431\n")},187:module=>{"use strict";eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///187\n")},219:(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjE5LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2V2ZXJzY2FsZS1pbnBhZ2UtcHJvdmlkZXIvZGlzdC9hcGkuanM/MjhiMCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///219\n')},510:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TvmException = exports.Contract = void 0;\nconst utils_1 = __webpack_require__(786);\nconst models_1 = __webpack_require__(851);\n/**\n * @category Contract\n */\nclass Contract {\n    constructor(provider, abi, address) {\n        if (!Array.isArray(abi.functions)) {\n            throw new Error('Invalid abi. Functions array required');\n        }\n        if (!Array.isArray(abi.events)) {\n            throw new Error('Invalid abi. Events array required');\n        }\n        this._provider = provider;\n        this._abi = JSON.stringify(abi);\n        this._functions = abi.functions.reduce((functions, item) => {\n            functions[item.name] = { inputs: item.inputs || [], outputs: item.outputs || [] };\n            return functions;\n        }, {});\n        this._events = abi.events.reduce((events, item) => {\n            events[item.name] = { inputs: item.inputs || [] };\n            return events;\n        }, {});\n        this._address = address;\n        this._methods = new Proxy({}, {\n            get: (_object, method) => {\n                const rawAbi = this._functions[method];\n                return (params = {}) => new ContractMethodImpl(this._provider, rawAbi, this._abi, this._address, method, params);\n            },\n        });\n    }\n    get methods() {\n        return this._methods;\n    }\n    get address() {\n        return this._address;\n    }\n    get abi() {\n        return this._abi;\n    }\n    /**\n     * Requests contract data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getFullState() {\n        await this._provider.ensureInitialized();\n        return await this._provider.rawApi.getFullContractState({\n            address: this.address.toString(),\n        });\n    }\n    /**\n     * Creates new contract transactions stream\n     *\n     * @param subscriber\n     */\n    transactions(subscriber) {\n        return subscriber.transactions(this._address)\n            .flatMap(({ transactions }) => transactions);\n    }\n    /**\n     * Creates new contract events stream\n     *\n     * @param subscriber\n     */\n    events(subscriber) {\n        return subscriber.transactions(this._address)\n            .flatMap(({ transactions }) => transactions)\n            .flatMap((tx) => this.decodeTransactionEvents({ transaction: tx }).then((events) => {\n            events.forEach((event) => event.transaction = tx);\n            return events;\n        }));\n    }\n    async waitForEvent(args = {}) {\n        const { range, filter } = args;\n        const filterFn = typeof filter === 'string'\n            ? ({ event }) => event === filter\n            : filter;\n        let subscriber = args.subscriber;\n        const hasTempSubscriber = subscriber == null;\n        if (subscriber == null) {\n            subscriber = new this._provider.Subscriber();\n        }\n        const event = await (((range === null || range === void 0 ? void 0 : range.fromLt) != null || (range === null || range === void 0 ? void 0 : range.fromUtime) != null)\n            ? subscriber.oldTransactions(this._address, range)\n                .merge(subscriber.transactions(this._address))\n            : subscriber.transactions(this.address)).flatMap(item => item.transactions)\n            .takeWhile(item => range == null ||\n            (range.fromLt == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.fromLt) > 0) &&\n                (range.fromUtime == null || item.createdAt > range.fromUtime) &&\n                (range.toLt == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.toLt) < 0) &&\n                (range.toUtime == null || item.createdAt < range.toUtime))\n            .flatMap(tx => this.decodeTransactionEvents({ transaction: tx })\n            .then((events) => {\n            events.forEach((event) => event.transaction = tx);\n            return events;\n        }))\n            .filterMap(async (event) => {\n            if (filterFn == null || (await filterFn(event))) {\n                return event;\n            }\n            else {\n                return undefined;\n            }\n        })\n            .first();\n        hasTempSubscriber && (await subscriber.unsubscribe());\n        return event;\n    }\n    async getPastEvents(args) {\n        const { range, filter, limit } = args;\n        const filterFn = typeof filter === 'string'\n            ? ({ event }) => event === filter\n            : filter;\n        const result = [];\n        let currentContinuation = args === null || args === void 0 ? void 0 : args.continuation;\n        outer: while (true) {\n            const { transactions, continuation } = await this._provider.getTransactions({\n                address: this._address,\n                continuation: currentContinuation,\n            });\n            if (transactions.length === null) {\n                break;\n            }\n            const filteredTransactions = transactions.filter((item) => (((range === null || range === void 0 ? void 0 : range.fromLt) == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.fromLt) > 0) &&\n                ((range === null || range === void 0 ? void 0 : range.fromUtime) == null || item.createdAt > range.fromUtime) &&\n                ((range === null || range === void 0 ? void 0 : range.toLt) == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.toLt) < 0) &&\n                ((range === null || range === void 0 ? void 0 : range.toUtime) == null || item.createdAt < range.toUtime)));\n            if (filteredTransactions.length > 0) {\n                const parsedEvents = await Promise.all(filteredTransactions.map(async (tx) => {\n                    return {\n                        tx, events: await this.decodeTransactionEvents({ transaction: tx }).then((events) => {\n                            events.forEach((event) => event.transaction = tx);\n                            return events;\n                        }),\n                    };\n                }));\n                for (let { tx, events } of parsedEvents) {\n                    if (filterFn != null) {\n                        events = await Promise.all(events.map(async (event) => (await filterFn(event)) ? event : undefined)).then(events => events.filter((event) => event != null));\n                    }\n                    currentContinuation = tx.id; // update continuation in case of early break\n                    for (const event of events) {\n                        if (limit != null && result.length >= limit) {\n                            break outer;\n                        }\n                        result.push(event);\n                    }\n                    if (limit != null && result.length >= limit) {\n                        break outer;\n                    }\n                }\n            }\n            currentContinuation = continuation;\n            if (currentContinuation == null) {\n                break;\n            }\n        }\n        return { events: result, continuation: currentContinuation };\n    }\n    async decodeTransaction(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeTransaction({\n                transaction: (0, models_1.serializeTransaction)(args.transaction),\n                abi: this._abi,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { method, input, output } = result;\n            const rawAbi = this._functions[method];\n            return {\n                method,\n                input: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, input) : {},\n                output: rawAbi.outputs != null ? (0, models_1.parseTokensObject)(rawAbi.outputs, output) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    async decodeTransactionEvents(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const { events } = await this._provider.rawApi.decodeTransactionEvents({\n                transaction: (0, models_1.serializeTransaction)(args.transaction),\n                abi: this._abi,\n            });\n            const result = [];\n            for (const { event, data } of events) {\n                const rawAbi = this._events[event];\n                result.push({\n                    event,\n                    data: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, data) : {},\n                });\n            }\n            return result;\n        }\n        catch (_) {\n            return [];\n        }\n    }\n    async decodeInputMessage(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeInput({\n                abi: this._abi,\n                body: args.body,\n                internal: args.internal,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { method, input } = result;\n            const rawAbi = this._functions[method];\n            return {\n                method,\n                input: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, input) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    async decodeOutputMessage(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeOutput({\n                abi: this._abi,\n                body: args.body,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { method, output } = result;\n            const rawAbi = this._functions[method];\n            return {\n                method,\n                output: rawAbi.outputs != null ? (0, models_1.parseTokensObject)(rawAbi.outputs, output) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    async decodeEvent(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeEvent({\n                abi: this.abi,\n                body: args.body,\n                event: args.events,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { event, data } = result;\n            const rawAbi = this._events[event];\n            return {\n                event,\n                data: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, data) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n}\nexports.Contract = Contract;\n/**\n * @category Contract\n */\nclass TvmException extends Error {\n    constructor(code) {\n        super(`TvmException: ${code}`);\n        this.code = code;\n    }\n}\nexports.TvmException = TvmException;\nclass ContractMethodImpl {\n    constructor(provider, functionAbi, abi, address, method, params) {\n        this.provider = provider;\n        this.functionAbi = functionAbi;\n        this.abi = abi;\n        this.address = address;\n        this.method = method;\n        this.params = (0, models_1.serializeTokensObject)(params);\n    }\n    async send(args) {\n        await this.provider.ensureInitialized();\n        const { transaction } = await this.provider.rawApi.sendMessage({\n            sender: args.from.toString(),\n            recipient: this.address.toString(),\n            amount: args.amount,\n            bounce: args.bounce == null ? true : args.bounce,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        });\n        return (0, models_1.parseTransaction)(transaction);\n    }\n    async sendDelayed(args) {\n        await this.provider.ensureInitialized();\n        const transactions = new utils_1.DelayedTransactions;\n        const subscription = await this.provider.subscribe('messageStatusUpdated');\n        subscription.on('data', (data) => {\n            if (!data.address.equals(args.from)) {\n                return;\n            }\n            transactions.fillTransaction(data.hash, data.transaction);\n        });\n        const { message } = await this.provider.rawApi.sendMessageDelayed({\n            sender: args.from.toString(),\n            recipient: this.address.toString(),\n            amount: args.amount,\n            bounce: args.bounce == null ? true : args.bounce,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        }).catch(e => {\n            subscription.unsubscribe().catch(console.error);\n            throw e;\n        });\n        const transaction = transactions\n            .waitTransaction(this.address, message.hash)\n            .finally(() => subscription.unsubscribe().catch(console.error));\n        return {\n            messageHash: message.hash,\n            expireAt: message.expireAt,\n            transaction,\n        };\n    }\n    async sendWithResult(args) {\n        await this.provider.ensureInitialized();\n        let subscriber = args.subscriber;\n        const hasTempSubscriber = subscriber == null;\n        if (subscriber == null) {\n            subscriber = new this.provider.Subscriber();\n        }\n        try {\n            // Parent transaction from wallet\n            let parentTransaction = undefined;\n            // Child transaction promise\n            let resolveChildTransactionPromise;\n            const childTransactionPromise = new Promise((resolve) => {\n                resolveChildTransactionPromise = (tx) => resolve(tx);\n            });\n            // Array for collecting transactions on target before parent transaction promise resolution\n            const possibleChildren = [];\n            // Subscribe to this account\n            subscriber.transactions(this.address)\n                .flatMap(batch => batch.transactions)\n                // Listen only messages from sender\n                .filter(item => { var _a; return ((_a = item.inMessage.src) === null || _a === void 0 ? void 0 : _a.equals(args.from)) || false; })\n                .on((tx) => {\n                if (parentTransaction == null) {\n                    // If we don't known whether the message was sent just collect all transactions from the sender\n                    possibleChildren.push(tx);\n                }\n                else if (parentTransaction.possibleMessages.findIndex((msg) => msg.hash == tx.inMessage.hash) >= 0) {\n                    // Resolve promise if transaction was found\n                    resolveChildTransactionPromise === null || resolveChildTransactionPromise === void 0 ? void 0 : resolveChildTransactionPromise(tx);\n                }\n            });\n            // Send message\n            const transaction = await this.send(args);\n            // Extract all outgoing messages from the parent transaction to this contract\n            const possibleMessages = transaction.outMessages.filter(msg => { var _a; return ((_a = msg.dst) === null || _a === void 0 ? void 0 : _a.equals(this.address)) || false; });\n            // Update stream state\n            parentTransaction = {\n                transaction,\n                possibleMessages,\n            };\n            // Check whether child transaction was already found\n            const alreadyReceived = possibleChildren.find((tx) => {\n                return possibleMessages.findIndex((msg) => msg.hash == tx.inMessage.hash) >= 0;\n            });\n            if (alreadyReceived != null) {\n                resolveChildTransactionPromise === null || resolveChildTransactionPromise === void 0 ? void 0 : resolveChildTransactionPromise(alreadyReceived);\n            }\n            const childTransaction = await childTransactionPromise;\n            // Parse output\n            let output = undefined;\n            try {\n                const result = await this.provider.rawApi.decodeTransaction({\n                    transaction: (0, models_1.serializeTransaction)(childTransaction),\n                    abi: this.abi,\n                    method: this.method,\n                });\n                if (result != null) {\n                    output = this.functionAbi.outputs != null\n                        ? (0, models_1.parseTokensObject)(this.functionAbi.outputs, result.output)\n                        : {};\n                }\n            }\n            catch (e) {\n                console.error(e);\n            }\n            // Done\n            return {\n                parentTransaction: parentTransaction.transaction,\n                childTransaction,\n                output,\n            };\n        }\n        finally {\n            hasTempSubscriber && (await subscriber.unsubscribe());\n        }\n    }\n    async estimateFees(args) {\n        await this.provider.ensureInitialized();\n        const { fees } = await this.provider.rawApi.estimateFees({\n            sender: args.from.toString(),\n            recipient: this.address.toString(),\n            amount: args.amount,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        });\n        return fees;\n    }\n    async sendExternal(args) {\n        await this.provider.ensureInitialized();\n        const method = args.withoutSignature === true\n            ? this.provider.rawApi.sendUnsignedExternalMessage\n            : this.provider.rawApi.sendExternalMessage;\n        const { transaction, output } = await method({\n            publicKey: args.publicKey,\n            recipient: this.address.toString(),\n            stateInit: args.stateInit,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n            local: args.local,\n        });\n        return {\n            transaction: (0, models_1.parseTransaction)(transaction),\n            output: output != null ? (0, models_1.parseTokensObject)(this.functionAbi.outputs, output) : undefined,\n        };\n    }\n    async sendExternalDelayed(args) {\n        await this.provider.ensureInitialized();\n        const transactions = new utils_1.DelayedTransactions;\n        const subscription = await this.provider.subscribe('messageStatusUpdated');\n        subscription.on('data', (data) => {\n            if (!data.address.equals(this.address)) {\n                return;\n            }\n            transactions.fillTransaction(data.hash, data.transaction);\n        });\n        const { message } = await this.provider.rawApi.sendExternalMessageDelayed({\n            publicKey: args.publicKey,\n            recipient: this.address.toString(),\n            stateInit: args.stateInit,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        }).catch(e => {\n            subscription.unsubscribe().catch(console.error);\n            throw e;\n        });\n        const transaction = transactions\n            .waitTransaction(this.address, message.hash)\n            .finally(() => subscription.unsubscribe().catch(console.error));\n        return {\n            messageHash: message.hash,\n            expireAt: message.expireAt,\n            transaction,\n        };\n    }\n    async call(args = {}) {\n        await this.provider.ensureInitialized();\n        const { output, code } = await this.provider.rawApi.runLocal({\n            address: this.address.toString(),\n            cachedState: args.cachedState,\n            responsible: args.responsible,\n            functionCall: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        });\n        if (output == null || code != 0) {\n            throw new TvmException(code);\n        }\n        else {\n            return (0, models_1.parseTokensObject)(this.functionAbi.outputs, output);\n        }\n    }\n    async encodeInternal() {\n        await this.provider.ensureInitialized();\n        const { boc } = await this.provider.rawApi.encodeInternalInput({\n            abi: this.abi,\n            method: this.method,\n            params: this.params,\n        });\n        return boc;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///510\n")},511:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProviderNotInitializedException = exports.ProviderNotFoundException = exports.ProviderRpcClient = exports.hasEverscaleProvider = exports.LT_COLLATOR = exports.mergeTransactions = exports.MessageExpiredException = exports.AddressLiteral = exports.Address = exports.Subscriber = void 0;\nconst models_1 = __webpack_require__(851);\nconst utils_1 = __webpack_require__(786);\nconst subscriber = __importStar(__webpack_require__(25));\nconst contract = __importStar(__webpack_require__(510));\n__exportStar(__webpack_require__(219), exports);\n__exportStar(__webpack_require__(851), exports);\n__exportStar(__webpack_require__(510), exports);\nvar stream_1 = __webpack_require__(25);\nObject.defineProperty(exports, \"Subscriber\", ({ enumerable: true, get: function () { return stream_1.Subscriber; } }));\nvar utils_2 = __webpack_require__(786);\nObject.defineProperty(exports, \"Address\", ({ enumerable: true, get: function () { return utils_2.Address; } }));\nObject.defineProperty(exports, \"AddressLiteral\", ({ enumerable: true, get: function () { return utils_2.AddressLiteral; } }));\nObject.defineProperty(exports, \"MessageExpiredException\", ({ enumerable: true, get: function () { return utils_2.MessageExpiredException; } }));\nObject.defineProperty(exports, \"mergeTransactions\", ({ enumerable: true, get: function () { return utils_2.mergeTransactions; } }));\nObject.defineProperty(exports, \"LT_COLLATOR\", ({ enumerable: true, get: function () { return utils_2.LT_COLLATOR; } }));\nconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\nlet ensurePageLoaded;\nif (!isBrowser || document.readyState === 'complete') {\n    ensurePageLoaded = Promise.resolve();\n}\nelse {\n    ensurePageLoaded = new Promise((resolve) => {\n        window.addEventListener('load', () => {\n            resolve();\n        });\n    });\n}\nconst getProvider = () => isBrowser ? window.__ever || window.ton : undefined;\n/**\n * @category Provider\n */\nasync function hasEverscaleProvider() {\n    if (!isBrowser) {\n        return false;\n    }\n    await ensurePageLoaded;\n    return window.__hasEverscaleProvider === true || window.hasTonProvider === true;\n}\nexports.hasEverscaleProvider = hasEverscaleProvider;\n/**\n * @category Provider\n */\nclass ProviderRpcClient {\n    constructor(properties = {}) {\n        this._subscriptions = {\n            connected: new Map(),\n            disconnected: new Map(),\n            transactionsFound: new Map(),\n            contractStateChanged: new Map(),\n            messageStatusUpdated: new Map(),\n            networkChanged: new Map(),\n            permissionsChanged: new Map(),\n            loggedOut: new Map(),\n        };\n        this._contractSubscriptions = new Map();\n        this._properties = properties;\n        const self = this;\n        // Create contract proxy type\n        class ProviderContract extends contract.Contract {\n            constructor(abi, address) {\n                super(self, abi, address);\n            }\n        }\n        this.Contract = ProviderContract;\n        // Create subscriber proxy type\n        class ProviderSubscriber extends subscriber.Subscriber {\n            constructor() {\n                super(self);\n            }\n        }\n        this.Subscriber = ProviderSubscriber;\n        // Wrap provider requests\n        this._api = new Proxy({}, {\n            get: (_object, method) => (params) => {\n                if (this._provider != null) {\n                    return this._provider.request({ method, params });\n                }\n                else {\n                    throw new ProviderNotInitializedException();\n                }\n            },\n        });\n        if (properties.forceUseFallback === true) {\n            this._initializationPromise = properties.fallback != null\n                ? properties.fallback()\n                    .then((provider) => {\n                    this._provider = provider;\n                })\n                : Promise.resolve();\n        }\n        else {\n            // Initialize provider with injected object by default\n            this._provider = getProvider();\n            if (this._provider != null) {\n                // Provider as already injected\n                this._initializationPromise = Promise.resolve();\n            }\n            else {\n                // Wait until page is loaded and initialization complete\n                this._initializationPromise = hasEverscaleProvider()\n                    .then((hasProvider) => new Promise((resolve) => {\n                    if (!hasProvider) {\n                        // Fully loaded page doesn't even contain provider flag\n                        return resolve();\n                    }\n                    // Wait injected provider initialization otherwise\n                    this._provider = getProvider();\n                    if (this._provider != null) {\n                        resolve();\n                    }\n                    else {\n                        const eventName = window.__hasEverscaleProvider === true ? 'ever#initialized' : 'ton#initialized';\n                        window.addEventListener(eventName, (_) => {\n                            this._provider = getProvider();\n                            resolve();\n                        });\n                    }\n                }))\n                    .then(async () => {\n                    if (this._provider == null && properties.fallback != null) {\n                        this._provider = await properties.fallback();\n                    }\n                });\n            }\n        }\n        // Will only register handlers for successfully loaded injected provider\n        this._initializationPromise.then(() => {\n            if (this._provider != null) {\n                this._registerEventHandlers(this._provider);\n            }\n        });\n    }\n    /**\n     * Checks whether this page has injected Everscale provider or\n     * there is a fallback provider.\n     */\n    async hasProvider() {\n        if (this._properties.fallback != null) {\n            return true;\n        }\n        return hasEverscaleProvider();\n    }\n    /**\n     * Waits until provider api will be available. Calls `fallback` if no provider was found\n     *\n     * @throws ProviderNotFoundException when no provider found\n     */\n    async ensureInitialized() {\n        await this._initializationPromise;\n        if (this._provider == null) {\n            throw new ProviderNotFoundException();\n        }\n    }\n    /**\n     * Whether provider api is ready\n     */\n    get isInitialized() {\n        return this._provider != null;\n    }\n    /**\n     * Raw provider\n     */\n    get raw() {\n        if (this._provider != null) {\n            return this._provider;\n        }\n        else {\n            throw new ProviderNotInitializedException();\n        }\n    }\n    /**\n     * Raw provider api\n     */\n    get rawApi() {\n        return this._api;\n    }\n    /**\n     * Creates typed contract wrapper.\n     *\n     * @param abi Readonly object (must be declared with `as const`)\n     * @param address Default contract address\n     *\n     * @deprecated `new ever.Contract(abi, address)` should be used instead\n     */\n    createContract(abi, address) {\n        return new this.Contract(abi, address);\n    }\n    /**\n     * Creates subscriptions group\n     *\n     * @deprecated `new ever.Subscriber()` should be used instead\n     */\n    createSubscriber() {\n        return new this.Subscriber();\n    }\n    /**\n     * Requests new permissions for current origin.\n     * Shows an approval window to the user.\n     * Will overwrite already existing permissions\n     *\n     * ---\n     * Required permissions: none\n     */\n    async requestPermissions(args) {\n        await this.ensureInitialized();\n        const result = await this._api.requestPermissions({\n            permissions: args.permissions,\n        });\n        return (0, models_1.parsePermissions)(result);\n    }\n    /**\n     * Updates `accountInteraction` permission value\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async changeAccount() {\n        await this.ensureInitialized();\n        await this._api.changeAccount();\n    }\n    /**\n     * Removes all permissions for current origin and stops all subscriptions\n     */\n    async disconnect() {\n        await this.ensureInitialized();\n        await this._api.disconnect();\n    }\n    async subscribe(eventName, params) {\n        class SubscriptionImpl {\n            constructor(_subscribe, _unsubscribe) {\n                this._subscribe = _subscribe;\n                this._unsubscribe = _unsubscribe;\n                this._listeners = {\n                    data: [],\n                    subscribed: [],\n                    unsubscribed: [],\n                };\n                this._subscribed = false;\n                this.subscribe = async () => {\n                    if (this._subscribed) {\n                        return;\n                    }\n                    this._subscribed = true;\n                    await this._subscribe(this);\n                    for (const handler of this._listeners['subscribed']) {\n                        handler();\n                    }\n                };\n                this.unsubscribe = async () => {\n                    if (!this._subscribed) {\n                        return;\n                    }\n                    this._subscribed = false;\n                    await this._unsubscribe();\n                    for (const handler of this._listeners['unsubscribed']) {\n                        handler();\n                    }\n                };\n            }\n            on(eventName, listener) {\n                this._listeners[eventName].push(listener);\n                return this;\n            }\n            notify(data) {\n                for (const handler of this._listeners['data']) {\n                    handler(data);\n                }\n            }\n        }\n        const existingSubscriptions = this._subscriptions[eventName];\n        const id = (0, utils_1.getUniqueId)();\n        switch (eventName) {\n            case 'connected':\n            case 'disconnected':\n            case 'messageStatusUpdated':\n            case 'networkChanged':\n            case 'permissionsChanged':\n            case 'loggedOut': {\n                const subscription = new SubscriptionImpl(async (subscription) => {\n                    if (existingSubscriptions.has(id)) {\n                        return;\n                    }\n                    existingSubscriptions.set(id, (data) => {\n                        subscription.notify(data);\n                    });\n                }, async () => {\n                    existingSubscriptions.delete(id);\n                });\n                await subscription.subscribe();\n                return subscription;\n            }\n            case 'transactionsFound':\n            case 'contractStateChanged': {\n                if (params == null) {\n                    throw new Error('Address must be specified for the subscription');\n                }\n                await this.ensureInitialized();\n                const address = params.address.toString();\n                const subscription = new SubscriptionImpl(async (subscription) => {\n                    if (existingSubscriptions.has(id)) {\n                        return;\n                    }\n                    existingSubscriptions.set(id, ((data) => {\n                        if (data.address.toString() === address) {\n                            subscription.notify(data);\n                        }\n                    }));\n                    let contractSubscriptions = this._contractSubscriptions.get(address);\n                    if (contractSubscriptions == null) {\n                        contractSubscriptions = new Map();\n                        this._contractSubscriptions.set(address, contractSubscriptions);\n                    }\n                    const subscriptionState = {\n                        state: eventName === 'contractStateChanged',\n                        transactions: eventName === 'transactionsFound',\n                    };\n                    contractSubscriptions.set(id, subscriptionState);\n                    const { total, withoutExcluded, } = foldSubscriptions(contractSubscriptions.values(), subscriptionState);\n                    try {\n                        if (total.transactions !== withoutExcluded.transactions || total.state !== withoutExcluded.state) {\n                            await this.rawApi.subscribe({ address, subscriptions: total });\n                        }\n                    }\n                    catch (e) {\n                        existingSubscriptions.delete(id);\n                        contractSubscriptions.delete(id);\n                        throw e;\n                    }\n                }, async () => {\n                    existingSubscriptions.delete(id);\n                    const contractSubscriptions = this._contractSubscriptions.get(address);\n                    if (contractSubscriptions == null) {\n                        return;\n                    }\n                    const updates = contractSubscriptions.get(id);\n                    const { total, withoutExcluded } = foldSubscriptions(contractSubscriptions.values(), updates);\n                    contractSubscriptions.delete(id);\n                    if (!withoutExcluded.transactions && !withoutExcluded.state) {\n                        await this.rawApi.unsubscribe({ address });\n                    }\n                    else if (total.transactions !== withoutExcluded.transactions || total.state !== withoutExcluded.state) {\n                        await this.rawApi.subscribe({ address, subscriptions: withoutExcluded });\n                    }\n                });\n                await subscription.subscribe();\n                return subscription;\n            }\n            default: {\n                throw new Error(`Unknown event ${eventName}`);\n            }\n        }\n    }\n    /**\n     * Returns provider api state\n     *\n     * ---\n     * Required permissions: none\n     */\n    async getProviderState() {\n        await this.ensureInitialized();\n        const state = await this._api.getProviderState();\n        return {\n            ...state,\n            permissions: (0, models_1.parsePermissions)(state.permissions),\n        };\n    }\n    /**\n     * Requests contract balance\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getBalance(address) {\n        const { state } = await this.getFullContractState({\n            address,\n        });\n        return state == null ? '0' : state === null || state === void 0 ? void 0 : state.balance;\n    }\n    /**\n     * Requests contract data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getFullContractState(args) {\n        await this.ensureInitialized();\n        return await this._api.getFullContractState({\n            address: args.address.toString(),\n        });\n    }\n    /**\n     * Requests accounts with specified code hash\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getAccountsByCodeHash(args) {\n        await this.ensureInitialized();\n        const { accounts, continuation } = await this._api.getAccountsByCodeHash({\n            ...args,\n        });\n        return {\n            accounts: accounts.map((address) => new utils_1.Address(address)),\n            continuation,\n        };\n    }\n    /**\n     * Requests contract transactions\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getTransactions(args) {\n        await this.ensureInitialized();\n        const { transactions, continuation, info } = await this._api.getTransactions({\n            ...args,\n            address: args.address.toString(),\n        });\n        return {\n            transactions: transactions.map(models_1.parseTransaction),\n            continuation,\n            info,\n        };\n    }\n    /**\n     * Searches transaction by hash\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getTransaction(args) {\n        await this.ensureInitialized();\n        const { transaction } = await this._api.getTransaction({\n            ...args,\n        });\n        return {\n            transaction: transaction ? (0, models_1.parseTransaction)(transaction) : undefined,\n        };\n    }\n    /**\n     * Computes contract address from code and init params\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getExpectedAddress(abi, args) {\n        const { address } = await this.getStateInit(abi, args);\n        return address;\n    }\n    /**\n     * Computes contract address and state from code and init params\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getStateInit(abi, args) {\n        await this.ensureInitialized();\n        const { address, stateInit } = await this._api.getExpectedAddress({\n            abi: JSON.stringify(abi),\n            ...args,\n            initParams: (0, models_1.serializeTokensObject)(args.initParams),\n        });\n        return {\n            address: new utils_1.Address(address),\n            stateInit,\n        };\n    }\n    /**\n     * Computes hash of base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getBocHash(boc) {\n        await this.ensureInitialized();\n        return await this._api.getBocHash({\n            boc,\n        }).then(({ hash }) => hash);\n    }\n    /**\n     * Creates base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async packIntoCell(args) {\n        await this.ensureInitialized();\n        return await this._api.packIntoCell({\n            abiVersion: args.abiVersion,\n            structure: args.structure,\n            data: (0, models_1.serializeTokensObject)(args.data),\n        });\n    }\n    /**\n     * Decodes base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async unpackFromCell(args) {\n        await this.ensureInitialized();\n        const { data } = await this._api.unpackFromCell({\n            ...args,\n            structure: args.structure,\n        });\n        return {\n            data: (0, models_1.parseTokensObject)(args.structure, data),\n        };\n    }\n    /**\n     * Extracts public key from raw account state\n     *\n     * **NOTE:** can only be used on contracts which are deployed and has `pubkey` header\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async extractPublicKey(boc) {\n        await this.ensureInitialized();\n        const { publicKey } = await this._api.extractPublicKey({\n            boc,\n        });\n        return publicKey;\n    }\n    /**\n     * Converts base64 encoded contract code into tvc with default init data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async codeToTvc(code) {\n        await this.ensureInitialized();\n        const { tvc } = await this._api.codeToTvc({\n            code,\n        });\n        return tvc;\n    }\n    /**\n     * Merges code and data into state init\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async mergeTvc(args) {\n        await this.ensureInitialized();\n        return await this._api.mergeTvc(args);\n    }\n    /**\n     * Splits base64 encoded state init into code and data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async splitTvc(tvc) {\n        await this.ensureInitialized();\n        return await this._api.splitTvc({\n            tvc,\n        });\n    }\n    /**\n     * Merges code and data into state init\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async setCodeSalt(args) {\n        let salt;\n        if (typeof args.salt === 'string') {\n            await this.ensureInitialized();\n            salt = args.salt;\n        }\n        else {\n            const { boc } = await this.packIntoCell(args.salt);\n            salt = boc;\n        }\n        return await this._api.setCodeSalt({ code: args.code, salt });\n    }\n    /**\n     * Retrieves salt from code. Returns undefined if code doesn't contain salt\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getCodeSalt(args) {\n        await this.ensureInitialized();\n        const { salt } = await this.rawApi.getCodeSalt({\n            code: args.code,\n        });\n        return salt;\n    }\n    /**\n     * Adds asset to the selected account\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async addAsset(args) {\n        await this.ensureInitialized();\n        let params;\n        switch (args.type) {\n            case 'tip3_token': {\n                params = {\n                    rootContract: args.params.rootContract.toString(),\n                };\n                break;\n            }\n            default:\n                throw new Error('Unknown asset type');\n        }\n        return await this._api.addAsset({\n            account: args.account.toString(),\n            type: args.type,\n            params,\n        });\n    }\n    async verifySignature(args) {\n        await this.ensureInitialized();\n        return await this._api.verifySignature(args);\n    }\n    /**\n     * Signs arbitrary data.\n     *\n     * NOTE: hashes data before signing. Use `signDataRaw` to sign without hash.\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async signData(args) {\n        await this.ensureInitialized();\n        return await this._api.signData(args);\n    }\n    /**\n     * Signs arbitrary data without hashing it\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async signDataRaw(args) {\n        await this.ensureInitialized();\n        return await this._api.signDataRaw(args);\n    }\n    /**\n     * Encrypts arbitrary data with specified algorithm for each specified recipient\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async encryptData(args) {\n        await this.ensureInitialized();\n        const { encryptedData } = await this._api.encryptData(args);\n        return encryptedData;\n    }\n    /**\n     * Decrypts encrypted data. Returns base64 encoded data\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async decryptData(encryptedData) {\n        await this.ensureInitialized();\n        const { data } = await this._api.decryptData({ encryptedData });\n        return data;\n    }\n    /**\n     * Sends an internal message from the user account.\n     * Shows an approval window to the user.\n     *\n     * ---\n     * Required permissions: `accountInteraction`\n     */\n    async sendMessage(args) {\n        await this.ensureInitialized();\n        const { transaction } = await this._api.sendMessage({\n            sender: args.sender.toString(),\n            recipient: args.recipient.toString(),\n            amount: args.amount,\n            bounce: args.bounce,\n            payload: args.payload ? ({\n                abi: args.payload.abi,\n                method: args.payload.method,\n                params: (0, models_1.serializeTokensObject)(args.payload.params),\n            }) : undefined,\n        });\n        return {\n            transaction: (0, models_1.parseTransaction)(transaction),\n        };\n    }\n    /**\n     * Sends an internal message from the user account without waiting for the transaction.\n     * Shows an approval window to the user.\n     *\n     * @see messageStatusUpdated\n     *\n     * ---\n     * Required permissions: `accountInteraction`\n     */\n    async sendMessageDelayed(args) {\n        await this.ensureInitialized();\n        const transactions = new utils_1.DelayedTransactions;\n        const subscription = await this.subscribe('messageStatusUpdated');\n        subscription.on('data', (data) => {\n            if (!data.address.equals(args.sender)) {\n                return;\n            }\n            transactions.fillTransaction(data.hash, data.transaction);\n        });\n        const { message } = await this._api.sendMessageDelayed({\n            sender: args.sender.toString(),\n            recipient: args.recipient.toString(),\n            amount: args.amount,\n            bounce: args.bounce,\n            payload: args.payload ? ({\n                abi: args.payload.abi,\n                method: args.payload.method,\n                params: (0, models_1.serializeTokensObject)(args.payload.params),\n            }) : undefined,\n        }).catch(e => {\n            subscription.unsubscribe().catch(console.error);\n            throw e;\n        });\n        const transaction = transactions\n            .waitTransaction(args.sender, message.hash)\n            .finally(() => subscription.unsubscribe().catch(console.error));\n        return {\n            messageHash: message.hash,\n            expireAt: message.expireAt,\n            transaction,\n        };\n    }\n    _registerEventHandlers(provider) {\n        const knownEvents = {\n            'connected': (data) => data,\n            'disconnected': (data) => data,\n            'transactionsFound': (data) => ({\n                address: new utils_1.Address(data.address),\n                transactions: data.transactions.map(models_1.parseTransaction),\n                info: data.info,\n            }),\n            'contractStateChanged': (data) => ({\n                address: new utils_1.Address(data.address),\n                state: data.state,\n            }),\n            'messageStatusUpdated': (data) => ({\n                address: new utils_1.Address(data.address),\n                hash: data.hash,\n                transaction: data.transaction != null ? (0, models_1.parseTransaction)(data.transaction) : undefined,\n            }),\n            'networkChanged': data => data,\n            'permissionsChanged': (data) => ({\n                permissions: (0, models_1.parsePermissions)(data.permissions),\n            }),\n            'loggedOut': data => data,\n        };\n        for (const [eventName, extractor] of Object.entries(knownEvents)) {\n            provider.addListener(eventName, (data) => {\n                const handlers = this._subscriptions[eventName];\n                const parsed = extractor(data);\n                for (const handler of handlers.values()) {\n                    handler(parsed);\n                }\n            });\n        }\n    }\n}\nexports.ProviderRpcClient = ProviderRpcClient;\n/**\n * @category Provider\n */\nclass ProviderNotFoundException extends Error {\n    constructor() {\n        super('Everscale provider was not found');\n    }\n}\nexports.ProviderNotFoundException = ProviderNotFoundException;\n/**\n * @category Provider\n */\nclass ProviderNotInitializedException extends Error {\n    constructor() {\n        super('Everscale provider was not initialized yet');\n    }\n}\nexports.ProviderNotInitializedException = ProviderNotInitializedException;\nfunction foldSubscriptions(subscriptions, except) {\n    const total = { state: false, transactions: false };\n    const withoutExcluded = Object.assign({}, total);\n    for (const item of subscriptions) {\n        if (withoutExcluded.transactions && withoutExcluded.state) {\n            break;\n        }\n        total.state || (total.state = item.state);\n        total.transactions || (total.transactions = item.transactions);\n        if (item !== except) {\n            withoutExcluded.state || (withoutExcluded.state = item.state);\n            withoutExcluded.transactions || (withoutExcluded.transactions = item.transactions);\n        }\n    }\n    return { total, withoutExcluded };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///511\n")},851:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseTokensObject = exports.serializeTokensObject = exports.parseAccountInteraction = exports.parsePermissions = exports.parseMessage = exports.serializeMessage = exports.parseTransaction = exports.serializeTransaction = void 0;\nconst utils_1 = __webpack_require__(786);\n/**\n * @category Models\n */\nfunction serializeTransaction(transaction) {\n    return {\n        ...transaction,\n        inMessage: serializeMessage(transaction.inMessage),\n        outMessages: transaction.outMessages.map(serializeMessage),\n    };\n}\nexports.serializeTransaction = serializeTransaction;\n/**\n * @category Models\n */\nfunction parseTransaction(transaction) {\n    return {\n        ...transaction,\n        inMessage: parseMessage(transaction.inMessage),\n        outMessages: transaction.outMessages.map(parseMessage),\n    };\n}\nexports.parseTransaction = parseTransaction;\n/**\n * @category Models\n */\nfunction serializeMessage(message) {\n    return {\n        ...message,\n        src: message.src ? message.src.toString() : undefined,\n        dst: message.dst ? message.dst.toString() : undefined,\n    };\n}\nexports.serializeMessage = serializeMessage;\n/**\n * @category Models\n */\nfunction parseMessage(message) {\n    return {\n        ...message,\n        src: message.src ? new utils_1.Address(message.src) : undefined,\n        dst: message.dst ? new utils_1.Address(message.dst) : undefined,\n    };\n}\nexports.parseMessage = parseMessage;\n/**\n * @category Models\n */\nfunction parsePermissions(permissions) {\n    return {\n        ...permissions,\n        accountInteraction: permissions.accountInteraction ? parseAccountInteraction(permissions.accountInteraction) : undefined,\n    };\n}\nexports.parsePermissions = parsePermissions;\n/**\n * @category Models\n */\nfunction parseAccountInteraction(accountInteraction) {\n    return {\n        ...accountInteraction,\n        address: new utils_1.Address(accountInteraction.address),\n    };\n}\nexports.parseAccountInteraction = parseAccountInteraction;\n/**\n * @category Models\n */\nfunction serializeTokensObject(object) {\n    return serializeTokenValue(object);\n}\nexports.serializeTokensObject = serializeTokensObject;\nfunction serializeTokenValue(token) {\n    if (token instanceof utils_1.Address) {\n        return token.toString();\n    }\n    if (Array.isArray(token)) {\n        const result = [];\n        for (const item of token) {\n            result.push(serializeTokenValue(item));\n        }\n        return result;\n    }\n    else if (token != null && typeof token === 'object') {\n        const result = {};\n        for (const [key, value] of Object.entries(token)) {\n            result[key] = serializeTokenValue(value);\n        }\n        return result;\n    }\n    else {\n        return token;\n    }\n}\n/**\n * @category Models\n */\nfunction parseTokensObject(params, object) {\n    const result = {};\n    for (const param of params) {\n        result[param.name] = parseTokenValue(param, object[param.name]);\n    }\n    return result;\n}\nexports.parseTokensObject = parseTokensObject;\nfunction parseTokenValue(param, token) {\n    if (!param.type.startsWith('map')) {\n        const isArray = param.type.endsWith('[]');\n        const isOptional = !isArray && param.type.startsWith('optional');\n        const rawType = (isArray ?\n            param.type.slice(0, -2) :\n            isOptional ?\n                param.type.slice(9, -1) :\n                param.type);\n        if (isArray) {\n            const rawParam = { name: param.name, type: rawType, components: param.components };\n            const result = [];\n            for (const item of token) {\n                result.push(parseTokenValue(rawParam, item));\n            }\n            return result;\n        }\n        else if (isOptional) {\n            if (token == null) {\n                return null;\n            }\n            else {\n                const rawParam = { name: param.name, type: rawType, components: param.components };\n                return parseTokenValue(rawParam, token);\n            }\n        }\n        else if (rawType === 'tuple') {\n            const result = {};\n            if (param.components != null) {\n                for (const component of param.components) {\n                    result[component.name] = parseTokenValue(component, token[component.name]);\n                }\n            }\n            return result;\n        }\n        else if (rawType === 'address') {\n            return new utils_1.Address(token);\n        }\n        else {\n            return token;\n        }\n    }\n    else {\n        let [keyType, valueType] = param.type.split(',');\n        keyType = keyType.slice(4);\n        valueType = valueType.slice(0, -1);\n        const result = [];\n        for (const [key, value] of token) {\n            result.push([parseTokenValue({\n                    name: '',\n                    type: keyType,\n                }, key), parseTokenValue({\n                    name: '',\n                    type: valueType,\n                    components: param.components,\n                }, value)]);\n        }\n        return result;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///851\n")},25:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Subscriber = void 0;\nconst utils_1 = __webpack_require__(786);\nconst models_1 = __webpack_require__(851);\n/**\n * @category Stream\n */\nclass Subscriber {\n    constructor(provider) {\n        this.provider = provider;\n        this.subscriptions = new Map();\n        this.scanners = new Map();\n        this.unsubscribe = async () => this._unsubscribe();\n    }\n    /**\n     * Returns a stream of new transactions\n     */\n    transactions(address) {\n        return this._addSubscription('transactionsFound', address, false);\n    }\n    /**\n     * Returns a finite stream of child transactions\n     * @param transaction - root transaction\n     */\n    trace(transaction) {\n        const id = (0, utils_1.getUniqueId)();\n        return new StreamImpl((onData, onEnd) => {\n            const scanner = new TraceTransactionsScanner(this.provider, {\n                origin: transaction,\n                onData,\n                onEnd: (eof) => {\n                    this.scanners.delete(id);\n                    onEnd(eof);\n                },\n            });\n            this.scanners.set(id, scanner);\n            scanner.start();\n            // Subscription is not required\n            return Promise.resolve();\n        }, async () => {\n            const scanner = this.scanners.get(id);\n            if (scanner != null) {\n                this.scanners.delete(id);\n                await scanner.stop();\n            }\n        }, identity, true);\n    }\n    /**\n     * Returns a stream of old transactions\n     */\n    oldTransactions(address, filter) {\n        const id = (0, utils_1.getUniqueId)();\n        return new StreamImpl((onData, onEnd) => {\n            const scanner = new UnorderedTransactionsScanner(this.provider, {\n                address,\n                onData,\n                onEnd: (eof) => {\n                    this.scanners.delete(id);\n                    onEnd(eof);\n                },\n                ...filter,\n            });\n            this.scanners.set(id, scanner);\n            scanner.start();\n            // Subscription is not required\n            return Promise.resolve();\n        }, async () => {\n            const scanner = this.scanners.get(id);\n            if (scanner != null) {\n                this.scanners.delete(id);\n                await scanner.stop();\n            }\n        }, identity, true);\n    }\n    states(address) {\n        return this._addSubscription('contractStateChanged', address, false);\n    }\n    async _unsubscribe() {\n        const tasks = [];\n        for (const item of this.subscriptions.values()) {\n            for (const [event, eventData] of Object.entries(item)) {\n                delete item[event];\n                if (eventData != null) {\n                    tasks.push(eventData.subscription\n                        .then(item => item.unsubscribe())\n                        .catch(() => {\n                    }));\n                }\n            }\n        }\n        this.subscriptions.clear();\n        for (const scanner of this.scanners.values()) {\n            tasks.push(scanner.stop());\n        }\n        this.scanners.clear();\n        await Promise.all(tasks);\n    }\n    _addSubscription(event, address, isFinite) {\n        const rawAddress = address.toString();\n        const stopProducer = (id) => {\n            const subscriptions = this.subscriptions.get(rawAddress);\n            if (subscriptions == null) {\n                // No subscriptions for the address\n                return;\n            }\n            const eventData = subscriptions[event];\n            if (eventData != null) {\n                const handler = eventData.handlers.get(id);\n                if (handler != null) {\n                    // Remove event handler with the id\n                    eventData.handlers.delete(id);\n                    const { queue, onEnd, state } = handler;\n                    if (!state.finished) {\n                        state.finished = true;\n                        queue.clear();\n                        queue.enqueue(async () => onEnd(state.eof));\n                    }\n                }\n                // Remove event data subscription if there are none of them\n                if (eventData.handlers.size === 0) {\n                    const subscription = eventData.subscription;\n                    delete subscriptions[event];\n                    subscription\n                        .then((subscription) => subscription.unsubscribe())\n                        .catch(console.debug);\n                }\n            }\n            // Remove address subscriptions object if it is empty\n            if (subscriptions.contractStateChanged == null && subscriptions.transactionsFound == null) {\n                this.subscriptions.delete(rawAddress);\n            }\n        };\n        const id = (0, utils_1.getUniqueId)();\n        return new StreamImpl((onData, onEnd) => {\n            const subscriptions = this.subscriptions.get(rawAddress);\n            let eventData = subscriptions === null || subscriptions === void 0 ? void 0 : subscriptions[event];\n            const state = { eof: false, finished: false };\n            // Create handler object\n            const handler = {\n                onData,\n                onEnd,\n                queue: new PromiseQueue(),\n                state,\n            };\n            if (eventData != null) {\n                // Add handler if there is already a handler group\n                eventData.handlers.set(id, handler);\n                return Promise.resolve();\n            }\n            // Create handlers group\n            const handlers = new Map();\n            handlers.set(id, handler);\n            // Create subscription\n            const subscription = this.provider.subscribe(event, { address })\n                .then((subscription) => {\n                subscription.on('data', (data) => {\n                    for (const { onData, queue, state } of handlers.values()) {\n                        // Skip closed streams\n                        if (state.eof || state.finished) {\n                            continue;\n                        }\n                        queue.enqueue(async () => {\n                            if (!(await onData(data))) {\n                                state.eof = true;\n                                stopProducer(id);\n                            }\n                        });\n                    }\n                });\n                subscription.on('unsubscribed', () => {\n                    for (const id of handlers.keys()) {\n                        stopProducer(id);\n                    }\n                });\n                return subscription;\n            }).catch((e) => {\n                console.error(e);\n                for (const id of handlers.keys()) {\n                    stopProducer(id);\n                }\n                throw e;\n            });\n            // Add event data to subscriptions\n            eventData = { subscription, handlers };\n            if (subscriptions == null) {\n                this.subscriptions.set(rawAddress, { [event]: eventData });\n            }\n            else {\n                subscriptions[event] = eventData;\n            }\n            // Wait until subscribed\n            return subscription.then(() => {\n            });\n        }, () => stopProducer(id), identity, isFinite);\n    }\n}\nexports.Subscriber = Subscriber;\nasync function identity(item, handler) {\n    return handler(item);\n}\nclass StreamImpl {\n    constructor(makeProducer, stopProducer, extractor, isFinite) {\n        this.makeProducer = makeProducer;\n        this.stopProducer = stopProducer;\n        this.extractor = extractor;\n        this.isFinite = isFinite;\n        /**\n         * Folds every element into an accumulator by applying an operation, returning the final result\n         */\n        this.fold = this.onlyFinite((init, f, ctx) => {\n            let state = init;\n            return new Promise((resolve, reject) => {\n                const subscribed = this.makeProducer(\n                // onData\n                (data) => this.extractor(data, async (item) => {\n                    state = await f(state, item);\n                    return true;\n                }), \n                // onEnd\n                (eof) => {\n                    if (eof) {\n                        resolve(state);\n                    }\n                    else {\n                        reject(new Error('Subscription closed'));\n                    }\n                });\n                if (ctx != null) {\n                    ctx.subscribed = subscribed;\n                }\n            });\n        });\n        /**\n         * Waits until the end of the stream\n         */\n        this.finished = this.onlyFinite((ctx) => {\n            return new Promise((resolve, reject) => {\n                const subscribed = this.makeProducer(\n                // onData\n                (data) => this.extractor(data, (_item) => true), \n                // onEnd\n                (eof) => {\n                    if (eof) {\n                        resolve(undefined);\n                    }\n                    else {\n                        reject(new Error('Subscription closed'));\n                    }\n                });\n                if (ctx != null) {\n                    ctx.subscribed = subscribed;\n                }\n            });\n        });\n    }\n    async delayed(f) {\n        const { subscribed, result } = f({\n            first: (() => {\n                const ctx = {};\n                const result = this.first(ctx);\n                return { subscribed: ctx.subscribed, result };\n            }),\n            on: (handler) => {\n                const ctx = {};\n                this.on(handler, ctx);\n                return { subscribed: ctx.subscribed, result: undefined };\n            },\n            fold: this.fold != null ? (init, f) => {\n                const ctx = {};\n                const result = this.fold(init, f, ctx);\n                return { subscribed: ctx.subscribed, result };\n            } : undefined,\n            finished: this.finished != null ? () => {\n                const ctx = {};\n                const result = this.finished(ctx);\n                return { subscribed: ctx.subscribed, result };\n            } : undefined,\n        });\n        await subscribed;\n        return () => result;\n    }\n    first(ctx) {\n        const state = { found: false };\n        return new Promise((resolve, reject) => {\n            const subscribed = this.makeProducer(\n            // onData\n            (data) => this.extractor(data, (item) => {\n                Object.assign(state, { found: true, result: item });\n                return false;\n            }), \n            // onEnd\n            (eof) => {\n                if (eof) {\n                    if (this.isFinite) {\n                        resolve((state.found ? state.result : undefined));\n                    }\n                    else if (state.found) {\n                        resolve(state.result);\n                    }\n                    else {\n                        reject(new Error('Unexpected end of stream'));\n                    }\n                }\n                else {\n                    reject(new Error('Subscription closed'));\n                }\n            });\n            if (ctx != null) {\n                ctx.subscribed = subscribed;\n            }\n        });\n    }\n    on(handler, ctx) {\n        const subscribed = this.makeProducer((event) => this.extractor(event, async (item) => {\n            await handler(item);\n            return true;\n        }), (_eof) => {\n        });\n        if (ctx != null) {\n            ctx.subscribed = subscribed;\n        }\n    }\n    merge(other) {\n        return new StreamImpl((onData, onEnd) => {\n            const state = {\n                stopped: false,\n                counter: 0,\n            };\n            const checkEnd = (eof) => {\n                if (state.stopped) {\n                    return;\n                }\n                if (++state.counter == 2 || !eof) {\n                    state.stopped = true;\n                    onEnd(eof);\n                }\n            };\n            return Promise.all([\n                this.makeProducer(onData, checkEnd),\n                other.makeProducer(onData, checkEnd),\n            ]).then(() => {\n            });\n        }, () => {\n            this.stopProducer();\n            other.stopProducer();\n        }, this.extractor, (this.isFinite && other.isFinite));\n    }\n    enumerate() {\n        const state = {\n            index: 0,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            return handler({\n                index: state.index++,\n                item,\n            });\n        }), this.isFinite);\n    }\n    tap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            await f(item);\n            return handler(item);\n        }), this.isFinite);\n    }\n    filter(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (await f(item)) {\n                return handler(item);\n            }\n            else {\n                return true;\n            }\n        }), this.isFinite);\n    }\n    filterMap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const newItem = await f(item);\n            if (newItem !== undefined) {\n                return handler(newItem);\n            }\n            else {\n                return true;\n            }\n        }), this.isFinite);\n    }\n    map(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const newItem = await f(item);\n            return handler(newItem);\n        }), this.isFinite);\n    }\n    flatMap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const items = await f(item);\n            for (const newItem of items) {\n                if (!(await handler(newItem))) {\n                    return false;\n                }\n            }\n            return true;\n        }), this.isFinite);\n    }\n    skip(n) {\n        const state = {\n            index: 0,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, (item) => {\n            if (state.index >= n) {\n                return handler(item);\n            }\n            else {\n                ++state.index;\n                return true;\n            }\n        }), this.isFinite);\n    }\n    skipWhile(f) {\n        const state = {\n            shouldSkip: true,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (!state.shouldSkip || !(await f(item))) {\n                state.shouldSkip = false;\n                return handler(item);\n            }\n            else {\n                return true;\n            }\n        }), this.isFinite);\n    }\n    take(n) {\n        const state = {\n            index: 0,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, (item) => {\n            if (state.index < n) {\n                ++state.index;\n                return handler(item);\n            }\n            else {\n                return false;\n            }\n        }), true);\n    }\n    takeWhile(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (await f(item)) {\n                return handler(item);\n            }\n            else {\n                return false;\n            }\n        }), true);\n    }\n    takeWhileMap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const newItem = await f(item);\n            if (newItem !== undefined) {\n                return handler(newItem);\n            }\n            else {\n                return false;\n            }\n        }), true);\n    }\n    onlyFinite(f) {\n        if (this.isFinite) {\n            return f;\n        }\n        else {\n            return undefined;\n        }\n    }\n}\nclass UnorderedTransactionsScanner {\n    constructor(provider, params) {\n        this.provider = provider;\n        this.params = params;\n        this.queue = new PromiseQueue();\n        this.isRunning = false;\n    }\n    start() {\n        if (this.isRunning || this.promise != null) {\n            return;\n        }\n        this.isRunning = true;\n        this.promise = (async () => {\n            const params = this.params;\n            const state = {\n                complete: false,\n            };\n            while (this.isRunning && !state.complete) {\n                try {\n                    const { transactions, continuation } = await this.provider.getTransactions({\n                        address: this.params.address,\n                        continuation: this.continuation,\n                    });\n                    state.complete = !state.complete && transactions.length == null;\n                    if (!this.isRunning || state.complete) {\n                        break;\n                    }\n                    const filteredTransactions = transactions.filter((item) => ((params.fromLt == null || utils_1.LT_COLLATOR.compare(item.id.lt, params.fromLt) > 0) &&\n                        (params.fromUtime == null || item.createdAt > params.fromUtime)));\n                    if (filteredTransactions.length == 0) {\n                        state.complete = true;\n                        break;\n                    }\n                    const info = {\n                        maxLt: filteredTransactions[0].id.lt,\n                        minLt: filteredTransactions[filteredTransactions.length - 1].id.lt,\n                        batchType: 'old',\n                    };\n                    this.queue.enqueue(async () => {\n                        const isRunning = this.params.onData({\n                            address: this.params.address,\n                            transactions: filteredTransactions,\n                            info,\n                        });\n                        if (!isRunning) {\n                            state.complete = true;\n                            this.isRunning = false;\n                        }\n                    });\n                    if (continuation != null) {\n                        this.continuation = continuation;\n                    }\n                    else {\n                        state.complete = true;\n                        break;\n                    }\n                }\n                catch (e) {\n                    console.error(e);\n                }\n            }\n            this.queue.enqueue(async () => this.params.onEnd(state.complete));\n            this.isRunning = false;\n            this.continuation = undefined;\n        })();\n    }\n    async stop() {\n        this.isRunning = false;\n        this.queue.clear();\n        if (this.promise != null) {\n            await this.promise;\n        }\n        else {\n            this.params.onEnd(false);\n        }\n    }\n}\nclass TraceTransactionsScanner {\n    constructor(provider, params) {\n        this.provider = provider;\n        this.params = params;\n        this.queue = new PromiseQueue();\n        this.isRunning = false;\n        this.semaphore = new utils_1.Semaphore(10);\n    }\n    start() {\n        if (this.isRunning || this.promise != null) {\n            return;\n        }\n        const provider = this.provider;\n        this.isRunning = true;\n        this.promise = (async () => {\n            const state = {\n                complete: false,\n            };\n            const makePendingTransaction = (messageHash) => {\n                const state = { stopped: false };\n                const promise = (async () => {\n                    let timeout = 500;\n                    while (true) {\n                        const release = await this.semaphore.acquire();\n                        if (state.stopped) {\n                            release();\n                            return;\n                        }\n                        const result = await provider.rawApi.findTransaction({\n                            inMessageHash: messageHash,\n                        }).catch(() => ({ transaction: undefined })).finally(() => release());\n                        if (state.stopped) {\n                            return;\n                        }\n                        if (result.transaction != null) {\n                            const transaction = (0, models_1.parseTransaction)(result.transaction);\n                            transaction.account = transaction.inMessage.dst;\n                            return transaction;\n                        }\n                        let resolve;\n                        const promise = new Promise((resolvePromise, rejectPromise) => {\n                            resolve = () => resolvePromise();\n                            state.reject = () => rejectPromise();\n                        });\n                        state.timeout = setTimeout(resolve, timeout);\n                        await promise;\n                        if (state.stopped) {\n                            return;\n                        }\n                        state.reject = undefined;\n                        timeout = Math.min(timeout * 2, 3000);\n                    }\n                })();\n                const reject = () => {\n                    var _a;\n                    state.stopped = true;\n                    (_a = state.reject) === null || _a === void 0 ? void 0 : _a.call(state);\n                    if (state.timeout != null) {\n                        clearTimeout(state.timeout);\n                    }\n                };\n                return { promise, reject };\n            };\n            const transactionsQueue = [this.params.origin];\n            try {\n                outer: while (this.isRunning) {\n                    const transaction = transactionsQueue.shift();\n                    if (transaction == null) {\n                        state.complete = true;\n                        break;\n                    }\n                    // Spawn promises\n                    const pendingTransactions = transaction\n                        .outMessages\n                        .filter((message) => message.dst != null)\n                        .map((message) => {\n                        const messageHash = message.hash;\n                        return makePendingTransaction(messageHash);\n                    });\n                    this.pendingTransactions = pendingTransactions;\n                    for (const { promise } of pendingTransactions) {\n                        const childTransaction = await promise;\n                        if (!this.isRunning || state.complete || childTransaction == null) {\n                            break outer;\n                        }\n                        this.queue.enqueue(async () => {\n                            const isRunning = this.params.onData(childTransaction);\n                            if (!isRunning) {\n                                state.complete = true;\n                                this.isRunning = false;\n                                this.rejectPendingTransactions();\n                            }\n                        });\n                        transactionsQueue.push(childTransaction);\n                    }\n                    this.pendingTransactions = undefined;\n                }\n            }\n            catch (e) {\n                console.error(e);\n                /* do nothing */\n            }\n            finally {\n                this.queue.enqueue(async () => this.params.onEnd(state.complete));\n                this.isRunning = false;\n                this.rejectPendingTransactions();\n            }\n        })();\n    }\n    async stop() {\n        this.isRunning = false;\n        this.queue.clear();\n        this.rejectPendingTransactions();\n        if (this.promise != null) {\n            await this.promise;\n        }\n        else {\n            this.params.onEnd(false);\n        }\n    }\n    rejectPendingTransactions() {\n        if (this.pendingTransactions != null) {\n            for (const pendingTransaction of this.pendingTransactions) {\n                pendingTransaction.reject();\n            }\n            this.pendingTransactions = undefined;\n        }\n        this.semaphore.releaseAll();\n    }\n}\nclass PromiseQueue {\n    constructor() {\n        this.queue = [];\n        this.workingOnPromise = false;\n    }\n    enqueue(promise) {\n        this.queue.push(promise);\n        this._dequeue().catch(() => {\n        });\n    }\n    clear() {\n        this.queue.length = 0;\n    }\n    async _dequeue() {\n        if (this.workingOnPromise) {\n            return;\n        }\n        const item = this.queue.shift();\n        if (!item) {\n            return;\n        }\n        this.workingOnPromise = true;\n        item()\n            .then(() => {\n            this.workingOnPromise = false;\n            this._dequeue();\n        })\n            .catch(() => {\n            this.workingOnPromise = false;\n            this._dequeue();\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///25\n")},786:(__unused_webpack_module,exports)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getUniqueId = exports.mergeTransactions = exports.LT_COLLATOR = exports.Semaphore = exports.DelayedTransactions = exports.MessageExpiredException = exports.AddressLiteral = exports.Address = void 0;\n/**\n * @category Utils\n */\nclass Address {\n    constructor(address) {\n        this.equals = (other) => this._equals(other);\n        this._address = address;\n    }\n    toString() {\n        return this._address;\n    }\n    toJSON() {\n        return this._address;\n    }\n    _equals(other) {\n        if (other instanceof Address) {\n            return this._address === other._address;\n        }\n        else {\n            return this._address === other;\n        }\n    }\n}\nexports.Address = Address;\n/**\n * @category Utils\n */\nclass AddressLiteral extends Address {\n    constructor(address) {\n        super(address);\n    }\n}\nexports.AddressLiteral = AddressLiteral;\n/**\n * @category Utils\n */\nclass MessageExpiredException extends Error {\n    constructor(address, hash) {\n        super('Message expired');\n        this.address = address;\n        this.hash = hash;\n    }\n}\nexports.MessageExpiredException = MessageExpiredException;\nclass DelayedTransactions {\n    constructor() {\n        this.transactions = new Map();\n    }\n    async waitTransaction(address, hash) {\n        var _a;\n        let transaction = (_a = this.transactions.get(hash)) === null || _a === void 0 ? void 0 : _a.promise;\n        if (transaction == null) {\n            let resolve;\n            let reject;\n            transaction = new Promise((promiseResolve, promiseReject) => {\n                resolve = (tx) => promiseResolve(tx);\n                reject = () => promiseReject();\n            });\n            this.transactions.set(hash, {\n                promise: transaction,\n                resolve: resolve,\n                reject: reject,\n            });\n        }\n        const tx = await transaction;\n        if (tx == null) {\n            throw new MessageExpiredException(address, hash);\n        }\n        return tx;\n    }\n    fillTransaction(hash, transaction) {\n        const pendingTransaction = this.transactions.get(hash);\n        if (pendingTransaction != null) {\n            pendingTransaction.resolve(transaction);\n        }\n        else {\n            this.transactions.set(hash, {\n                promise: Promise.resolve(transaction),\n                resolve: () => {\n                },\n                reject: () => {\n                },\n            });\n        }\n    }\n}\nexports.DelayedTransactions = DelayedTransactions;\n/**\n * @category Utils\n */\nclass Semaphore {\n    constructor(count) {\n        this.tasks = [];\n        this.sched = () => {\n            var _a;\n            if (this.count > 0 && this.tasks.length > 0) {\n                this.count--;\n                (_a = this.tasks.shift()) === null || _a === void 0 ? void 0 : _a();\n            }\n        };\n        this.count = count;\n    }\n    acquire() {\n        return new Promise((res, _rej) => {\n            this.tasks.push(() => {\n                let released = false;\n                res(() => {\n                    if (!released) {\n                        released = true;\n                        this.count++;\n                        this.sched();\n                    }\n                });\n            });\n            nextTick(this.sched);\n        });\n    }\n    releaseAll() {\n        var _a;\n        while (this.tasks.length > 0) {\n            (_a = this.tasks.shift()) === null || _a === void 0 ? void 0 : _a();\n        }\n    }\n}\nexports.Semaphore = Semaphore;\nfunction byObserver(Observer) {\n    const node = document.createTextNode('');\n    let queue, currentQueue, bit = 0, i = 0;\n    new Observer(function () {\n        let callback;\n        if (!queue) {\n            if (!currentQueue)\n                return;\n            queue = currentQueue;\n        }\n        else if (currentQueue) {\n            queue = currentQueue.slice(i).concat(queue);\n        }\n        currentQueue = queue;\n        queue = null;\n        i = 0;\n        if (typeof currentQueue === 'function') {\n            callback = currentQueue;\n            currentQueue = null;\n            callback();\n            return;\n        }\n        node.data = (bit = ++bit % 2);\n        while (i < currentQueue.length) {\n            callback = currentQueue[i];\n            i++;\n            if (i === currentQueue.length)\n                currentQueue = null;\n            callback();\n        }\n    }).observe(node, { characterData: true });\n    return function (fn) {\n        if (queue) {\n            if (typeof queue === 'function')\n                queue = [queue, fn];\n            else\n                queue.push(fn);\n            return;\n        }\n        queue = fn;\n        node.data = (bit = ++bit % 2);\n    };\n}\nconst nextTick = (function () {\n    // queueMicrotask\n    if (typeof queueMicrotask === 'function') {\n        return queueMicrotask;\n    }\n    // MutationObserver\n    if ((typeof document === 'object') && document) {\n        if (typeof MutationObserver === 'function')\n            return byObserver(MutationObserver);\n        if (typeof window.WebKitMutationObserver === 'function')\n            return byObserver(window.WebKitMutationObserver);\n    }\n    /* @ts-ignore */\n    if (typeof setImmediate === 'function') {\n        /* @ts-ignore */\n        return setImmediate;\n    }\n    if ((typeof setTimeout === 'function') || (typeof setTimeout === 'object')) {\n        return function (cb) {\n            setTimeout(cb, 0);\n        };\n    }\n    throw new Error('No `nextTick` implementation found');\n}());\n/**\n * @category Utils\n */\nexports.LT_COLLATOR = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n/**\n * Modifies knownTransactions array, merging it with new transactions.\n * All arrays are assumed to be sorted by descending logical time.\n *\n * > Note! This method does not remove duplicates.\n *\n * @param knownTransactions\n * @param newTransactions\n * @param info\n *\n * @category Utils\n */\nfunction mergeTransactions(knownTransactions, newTransactions, info) {\n    if (info.batchType === 'old') {\n        knownTransactions.push(...newTransactions);\n        return knownTransactions;\n    }\n    if (knownTransactions.length === 0) {\n        knownTransactions.push(...newTransactions);\n        return knownTransactions;\n    }\n    // Example:\n    // known lts: [N, N-1, N-2, N-3, (!) N-10,...]\n    // new lts: [N-4, N-5]\n    // batch info: { minLt: N-5, maxLt: N-4, batchType: 'new' }\n    // 1. Skip indices until known transaction lt is greater than the biggest in the batch\n    let i = 0;\n    while (i < knownTransactions.length &&\n        exports.LT_COLLATOR.compare(knownTransactions[i].id.lt, info.maxLt) >= 0) {\n        ++i;\n    }\n    // 2. Insert new transactions\n    knownTransactions.splice(i, 0, ...newTransactions);\n    return knownTransactions;\n}\nexports.mergeTransactions = mergeTransactions;\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\nfunction getUniqueId() {\n    idCounter = (idCounter + 1) % MAX;\n    return idCounter;\n}\nexports.getUniqueId = getUniqueId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///786\n")},758:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.MsigAccount = exports.GenericAccount = void 0;\nconst everscale_inpage_provider_1 = __webpack_require__(511);\n/**\n * @category AccountsStorage\n */\nclass GenericAccount {\n    constructor(args) {\n        this.address = args.address instanceof everscale_inpage_provider_1.Address ? args.address : new everscale_inpage_provider_1.Address(args.address);\n        this.abi = typeof args.abi === \'string\' ? args.abi : JSON.stringify(args.abi);\n        this.prepareMessageImpl = args.prepareMessage;\n        this.publicKey = args.publicKey;\n    }\n    async fetchPublicKey(ctx) {\n        if (this.publicKey != null) {\n            return this.publicKey;\n        }\n        this.publicKey = await ctx.fetchPublicKey(this.address);\n        return this.publicKey;\n    }\n    async prepareMessage(args, ctx) {\n        const publicKey = await this.fetchPublicKey(ctx);\n        const signer = await ctx.getSigner(publicKey);\n        const { method, params, stateInit } = await this.prepareMessageImpl(args, ctx);\n        return await ctx.createExternalMessage({\n            address: this.address,\n            signer,\n            timeout: args.timeout,\n            abi: this.abi,\n            method,\n            params,\n            stateInit,\n        });\n    }\n}\nexports.GenericAccount = GenericAccount;\n/**\n * @category AccountsStorage\n */\nclass MsigAccount extends GenericAccount {\n    constructor(args) {\n        super({\n            address: args.address,\n            publicKey: args.publicKey,\n            abi: MSIG_ABI,\n            prepareMessage: async (args, ctx) => {\n                const payload = args.payload\n                    ? ctx.encodeInternalInput(args.payload)\n                    : \'\';\n                return {\n                    method: \'sendTransaction\',\n                    params: {\n                        dest: args.recipient,\n                        value: args.amount,\n                        bounce: args.bounce,\n                        flags: 3,\n                        payload,\n                    },\n                };\n            },\n        });\n    }\n}\nexports.MsigAccount = MsigAccount;\nconst MSIG_ABI = `{\n  "ABI version": 2,\n  "header": ["pubkey", "time", "expire"],\n  "functions": [{\n    "name": "sendTransaction",\n    "inputs": [\n      {"name":"dest","type":"address"},\n      {"name":"value","type":"uint128"},\n      {"name":"bounce","type":"bool"},\n      {"name":"flags","type":"uint8"},\n      {"name":"payload","type":"cell"}\n    ],\n    "outputs": []\n  }],\n  "events": []\n}`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzU4LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2V2ZXJzY2FsZS1zdGFuZGFsb25lLWNsaWVudC9jbGllbnQvQWNjb3VudHNTdG9yYWdlL0dlbmVyaWMuanM/YzJiYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTXNpZ0FjY291bnQgPSBleHBvcnRzLkdlbmVyaWNBY2NvdW50ID0gdm9pZCAwO1xuY29uc3QgZXZlcnNjYWxlX2lucGFnZV9wcm92aWRlcl8xID0gcmVxdWlyZShcImV2ZXJzY2FsZS1pbnBhZ2UtcHJvdmlkZXJcIik7XG4vKipcbiAqIEBjYXRlZ29yeSBBY2NvdW50c1N0b3JhZ2VcbiAqL1xuY2xhc3MgR2VuZXJpY0FjY291bnQge1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYXJncy5hZGRyZXNzIGluc3RhbmNlb2YgZXZlcnNjYWxlX2lucGFnZV9wcm92aWRlcl8xLkFkZHJlc3MgPyBhcmdzLmFkZHJlc3MgOiBuZXcgZXZlcnNjYWxlX2lucGFnZV9wcm92aWRlcl8xLkFkZHJlc3MoYXJncy5hZGRyZXNzKTtcbiAgICAgICAgdGhpcy5hYmkgPSB0eXBlb2YgYXJncy5hYmkgPT09ICdzdHJpbmcnID8gYXJncy5hYmkgOiBKU09OLnN0cmluZ2lmeShhcmdzLmFiaSk7XG4gICAgICAgIHRoaXMucHJlcGFyZU1lc3NhZ2VJbXBsID0gYXJncy5wcmVwYXJlTWVzc2FnZTtcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBhcmdzLnB1YmxpY0tleTtcbiAgICB9XG4gICAgYXN5bmMgZmV0Y2hQdWJsaWNLZXkoY3R4KSB7XG4gICAgICAgIGlmICh0aGlzLnB1YmxpY0tleSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNLZXk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBhd2FpdCBjdHguZmV0Y2hQdWJsaWNLZXkodGhpcy5hZGRyZXNzKTtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVibGljS2V5O1xuICAgIH1cbiAgICBhc3luYyBwcmVwYXJlTWVzc2FnZShhcmdzLCBjdHgpIHtcbiAgICAgICAgY29uc3QgcHVibGljS2V5ID0gYXdhaXQgdGhpcy5mZXRjaFB1YmxpY0tleShjdHgpO1xuICAgICAgICBjb25zdCBzaWduZXIgPSBhd2FpdCBjdHguZ2V0U2lnbmVyKHB1YmxpY0tleSk7XG4gICAgICAgIGNvbnN0IHsgbWV0aG9kLCBwYXJhbXMsIHN0YXRlSW5pdCB9ID0gYXdhaXQgdGhpcy5wcmVwYXJlTWVzc2FnZUltcGwoYXJncywgY3R4KTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IGN0eC5jcmVhdGVFeHRlcm5hbE1lc3NhZ2Uoe1xuICAgICAgICAgICAgYWRkcmVzczogdGhpcy5hZGRyZXNzLFxuICAgICAgICAgICAgc2lnbmVyLFxuICAgICAgICAgICAgdGltZW91dDogYXJncy50aW1lb3V0LFxuICAgICAgICAgICAgYWJpOiB0aGlzLmFiaSxcbiAgICAgICAgICAgIG1ldGhvZCxcbiAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgICAgIHN0YXRlSW5pdCxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5HZW5lcmljQWNjb3VudCA9IEdlbmVyaWNBY2NvdW50O1xuLyoqXG4gKiBAY2F0ZWdvcnkgQWNjb3VudHNTdG9yYWdlXG4gKi9cbmNsYXNzIE1zaWdBY2NvdW50IGV4dGVuZHMgR2VuZXJpY0FjY291bnQge1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICAgICAgc3VwZXIoe1xuICAgICAgICAgICAgYWRkcmVzczogYXJncy5hZGRyZXNzLFxuICAgICAgICAgICAgcHVibGljS2V5OiBhcmdzLnB1YmxpY0tleSxcbiAgICAgICAgICAgIGFiaTogTVNJR19BQkksXG4gICAgICAgICAgICBwcmVwYXJlTWVzc2FnZTogYXN5bmMgKGFyZ3MsIGN0eCkgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBheWxvYWQgPSBhcmdzLnBheWxvYWRcbiAgICAgICAgICAgICAgICAgICAgPyBjdHguZW5jb2RlSW50ZXJuYWxJbnB1dChhcmdzLnBheWxvYWQpXG4gICAgICAgICAgICAgICAgICAgIDogJyc7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAnc2VuZFRyYW5zYWN0aW9uJyxcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZXN0OiBhcmdzLnJlY2lwaWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBhcmdzLmFtb3VudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJvdW5jZTogYXJncy5ib3VuY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBmbGFnczogMyxcbiAgICAgICAgICAgICAgICAgICAgICAgIHBheWxvYWQsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuTXNpZ0FjY291bnQgPSBNc2lnQWNjb3VudDtcbmNvbnN0IE1TSUdfQUJJID0gYHtcbiAgXCJBQkkgdmVyc2lvblwiOiAyLFxuICBcImhlYWRlclwiOiBbXCJwdWJrZXlcIiwgXCJ0aW1lXCIsIFwiZXhwaXJlXCJdLFxuICBcImZ1bmN0aW9uc1wiOiBbe1xuICAgIFwibmFtZVwiOiBcInNlbmRUcmFuc2FjdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcIm5hbWVcIjpcImRlc3RcIixcInR5cGVcIjpcImFkZHJlc3NcIn0sXG4gICAgICB7XCJuYW1lXCI6XCJ2YWx1ZVwiLFwidHlwZVwiOlwidWludDEyOFwifSxcbiAgICAgIHtcIm5hbWVcIjpcImJvdW5jZVwiLFwidHlwZVwiOlwiYm9vbFwifSxcbiAgICAgIHtcIm5hbWVcIjpcImZsYWdzXCIsXCJ0eXBlXCI6XCJ1aW50OFwifSxcbiAgICAgIHtcIm5hbWVcIjpcInBheWxvYWRcIixcInR5cGVcIjpcImNlbGxcIn1cbiAgICBdLFxuICAgIFwib3V0cHV0c1wiOiBbXVxuICB9XSxcbiAgXCJldmVudHNcIjogW11cbn1gO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///758\n')},766:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.GiverAccount = void 0;\nconst everscale_inpage_provider_1 = __webpack_require__(511);\n/**\n * Any account which supports Giver ABI (GiverV2, GiverV3):\n *\n * ```\n * {\n *   "ABI version": 2,\n *   "header": ["pubkey", "time", "expire"],\n *   "functions": [{\n *     "name": "sendTransaction",\n *     "inputs": [\n *       {"name":"dest","type":"address"},\n *       {"name":"value","type":"uint128"},\n *       {"name":"bounce","type":"bool"},\n *     ],\n *     "outputs": []\n *   }],\n *   "events": []\n * }\n * ```\n *\n * @category AccountsStorage\n */\nclass GiverAccount {\n    constructor(args) {\n        this.address = args.address instanceof everscale_inpage_provider_1.Address ? args.address : new everscale_inpage_provider_1.Address(args.address);\n        this.publicKey = args.publicKey;\n    }\n    static fromVersion(version) {\n        let address;\n        switch (version) {\n            case 2:\n                address = \'0:ece57bcc6c530283becbbd8a3b24d3c5987cdddc3c8b7b33be6e4a6312490415\';\n                break;\n            case 3:\n                address = \'0:78fbd6980c10cf41401b32e9b51810415e7578b52403af80dae68ddf99714498\';\n                break;\n            default:\n                throw new Error(\'Unknown version\');\n        }\n        return new GiverAccount({\n            address,\n            publicKey: GiverAccount.GIVER_KEY_PAIR.publicKey,\n        });\n    }\n    async fetchPublicKey(_ctx) {\n        return this.publicKey;\n    }\n    async prepareMessage(args, ctx) {\n        if (args.payload != null) {\n            console.warn(\'Giver contract does not support payload\');\n        }\n        const signer = await ctx.getSigner(this.publicKey);\n        return await ctx.createExternalMessage({\n            address: this.address,\n            signer,\n            timeout: args.timeout,\n            abi: GIVER_ABI,\n            method: \'sendTransaction\',\n            params: {\n                dest: args.recipient,\n                value: args.amount,\n                bounce: args.bounce,\n            },\n        });\n    }\n}\nexports.GiverAccount = GiverAccount;\nGiverAccount.GIVER_KEY_PAIR = {\n    secretKey: \'172af540e43a524763dd53b26a066d472a97c4de37d5498170564510608250c3\',\n    publicKey: \'2ada2e65ab8eeab09490e3521415f45b6e42df9c760a639bcf53957550b25a16\',\n};\nconst GIVER_ABI = `{\n  "ABI version": 2,\n  "header": ["time", "expire"],\n  "functions": [{\n    "name": "sendTransaction",\n    "inputs": [\n      {"name":"dest","type":"address"},\n      {"name":"value","type":"uint128"},\n      {"name":"bounce","type":"bool"}\n    ],\n    "outputs": []\n  }],\n  "events": []\n}`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNzY2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2V2ZXJzY2FsZS1zdGFuZGFsb25lLWNsaWVudC9jbGllbnQvQWNjb3VudHNTdG9yYWdlL0dpdmVyLmpzP2FjM2MiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkdpdmVyQWNjb3VudCA9IHZvaWQgMDtcbmNvbnN0IGV2ZXJzY2FsZV9pbnBhZ2VfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCJldmVyc2NhbGUtaW5wYWdlLXByb3ZpZGVyXCIpO1xuLyoqXG4gKiBBbnkgYWNjb3VudCB3aGljaCBzdXBwb3J0cyBHaXZlciBBQkkgKEdpdmVyVjIsIEdpdmVyVjMpOlxuICpcbiAqIGBgYFxuICoge1xuICogICBcIkFCSSB2ZXJzaW9uXCI6IDIsXG4gKiAgIFwiaGVhZGVyXCI6IFtcInB1YmtleVwiLCBcInRpbWVcIiwgXCJleHBpcmVcIl0sXG4gKiAgIFwiZnVuY3Rpb25zXCI6IFt7XG4gKiAgICAgXCJuYW1lXCI6IFwic2VuZFRyYW5zYWN0aW9uXCIsXG4gKiAgICAgXCJpbnB1dHNcIjogW1xuICogICAgICAge1wibmFtZVwiOlwiZGVzdFwiLFwidHlwZVwiOlwiYWRkcmVzc1wifSxcbiAqICAgICAgIHtcIm5hbWVcIjpcInZhbHVlXCIsXCJ0eXBlXCI6XCJ1aW50MTI4XCJ9LFxuICogICAgICAge1wibmFtZVwiOlwiYm91bmNlXCIsXCJ0eXBlXCI6XCJib29sXCJ9LFxuICogICAgIF0sXG4gKiAgICAgXCJvdXRwdXRzXCI6IFtdXG4gKiAgIH1dLFxuICogICBcImV2ZW50c1wiOiBbXVxuICogfVxuICogYGBgXG4gKlxuICogQGNhdGVnb3J5IEFjY291bnRzU3RvcmFnZVxuICovXG5jbGFzcyBHaXZlckFjY291bnQge1xuICAgIGNvbnN0cnVjdG9yKGFyZ3MpIHtcbiAgICAgICAgdGhpcy5hZGRyZXNzID0gYXJncy5hZGRyZXNzIGluc3RhbmNlb2YgZXZlcnNjYWxlX2lucGFnZV9wcm92aWRlcl8xLkFkZHJlc3MgPyBhcmdzLmFkZHJlc3MgOiBuZXcgZXZlcnNjYWxlX2lucGFnZV9wcm92aWRlcl8xLkFkZHJlc3MoYXJncy5hZGRyZXNzKTtcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSBhcmdzLnB1YmxpY0tleTtcbiAgICB9XG4gICAgc3RhdGljIGZyb21WZXJzaW9uKHZlcnNpb24pIHtcbiAgICAgICAgbGV0IGFkZHJlc3M7XG4gICAgICAgIHN3aXRjaCAodmVyc2lvbikge1xuICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgIGFkZHJlc3MgPSAnMDplY2U1N2JjYzZjNTMwMjgzYmVjYmJkOGEzYjI0ZDNjNTk4N2NkZGRjM2M4YjdiMzNiZTZlNGE2MzEyNDkwNDE1JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgICAgICBhZGRyZXNzID0gJzA6NzhmYmQ2OTgwYzEwY2Y0MTQwMWIzMmU5YjUxODEwNDE1ZTc1NzhiNTI0MDNhZjgwZGFlNjhkZGY5OTcxNDQ5OCc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biB2ZXJzaW9uJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBHaXZlckFjY291bnQoe1xuICAgICAgICAgICAgYWRkcmVzcyxcbiAgICAgICAgICAgIHB1YmxpY0tleTogR2l2ZXJBY2NvdW50LkdJVkVSX0tFWV9QQUlSLnB1YmxpY0tleSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGZldGNoUHVibGljS2V5KF9jdHgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucHVibGljS2V5O1xuICAgIH1cbiAgICBhc3luYyBwcmVwYXJlTWVzc2FnZShhcmdzLCBjdHgpIHtcbiAgICAgICAgaWYgKGFyZ3MucGF5bG9hZCAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0dpdmVyIGNvbnRyYWN0IGRvZXMgbm90IHN1cHBvcnQgcGF5bG9hZCcpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNpZ25lciA9IGF3YWl0IGN0eC5nZXRTaWduZXIodGhpcy5wdWJsaWNLZXkpO1xuICAgICAgICByZXR1cm4gYXdhaXQgY3R4LmNyZWF0ZUV4dGVybmFsTWVzc2FnZSh7XG4gICAgICAgICAgICBhZGRyZXNzOiB0aGlzLmFkZHJlc3MsXG4gICAgICAgICAgICBzaWduZXIsXG4gICAgICAgICAgICB0aW1lb3V0OiBhcmdzLnRpbWVvdXQsXG4gICAgICAgICAgICBhYmk6IEdJVkVSX0FCSSxcbiAgICAgICAgICAgIG1ldGhvZDogJ3NlbmRUcmFuc2FjdGlvbicsXG4gICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICBkZXN0OiBhcmdzLnJlY2lwaWVudCxcbiAgICAgICAgICAgICAgICB2YWx1ZTogYXJncy5hbW91bnQsXG4gICAgICAgICAgICAgICAgYm91bmNlOiBhcmdzLmJvdW5jZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuR2l2ZXJBY2NvdW50ID0gR2l2ZXJBY2NvdW50O1xuR2l2ZXJBY2NvdW50LkdJVkVSX0tFWV9QQUlSID0ge1xuICAgIHNlY3JldEtleTogJzE3MmFmNTQwZTQzYTUyNDc2M2RkNTNiMjZhMDY2ZDQ3MmE5N2M0ZGUzN2Q1NDk4MTcwNTY0NTEwNjA4MjUwYzMnLFxuICAgIHB1YmxpY0tleTogJzJhZGEyZTY1YWI4ZWVhYjA5NDkwZTM1MjE0MTVmNDViNmU0MmRmOWM3NjBhNjM5YmNmNTM5NTc1NTBiMjVhMTYnLFxufTtcbmNvbnN0IEdJVkVSX0FCSSA9IGB7XG4gIFwiQUJJIHZlcnNpb25cIjogMixcbiAgXCJoZWFkZXJcIjogW1widGltZVwiLCBcImV4cGlyZVwiXSxcbiAgXCJmdW5jdGlvbnNcIjogW3tcbiAgICBcIm5hbWVcIjogXCJzZW5kVHJhbnNhY3Rpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XCJuYW1lXCI6XCJkZXN0XCIsXCJ0eXBlXCI6XCJhZGRyZXNzXCJ9LFxuICAgICAge1wibmFtZVwiOlwidmFsdWVcIixcInR5cGVcIjpcInVpbnQxMjhcIn0sXG4gICAgICB7XCJuYW1lXCI6XCJib3VuY2VcIixcInR5cGVcIjpcImJvb2xcIn1cbiAgICBdLFxuICAgIFwib3V0cHV0c1wiOiBbXVxuICB9XSxcbiAgXCJldmVudHNcIjogW11cbn1gO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///766\n')},128:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HighloadWalletV2 = void 0;\nconst everscale_inpage_provider_1 = __webpack_require__(511);\nconst bignumber_js_1 = __importDefault(__webpack_require__(431));\nconst core_1 = __importDefault(__webpack_require__(521));\nconst { ensureNekotonLoaded, nekoton } = core_1.default;\n/**\n * @category AccountsStorage\n */\nclass HighloadWalletV2 {\n    constructor(address) {\n        this.address = address instanceof everscale_inpage_provider_1.Address ? address : new everscale_inpage_provider_1.Address(address);\n    }\n    static async computeAddress(args) {\n        // TODO: Somehow propagate init params\n        await ensureNekotonLoaded();\n        const publicKey = args.publicKey instanceof bignumber_js_1.default\n            ? args.publicKey\n            : new bignumber_js_1.default(`0x${args.publicKey}`);\n        const tvc = makeStateInit(publicKey);\n        const hash = nekoton.getBocHash(tvc);\n        return new everscale_inpage_provider_1.Address(`${args.workchain != null ? args.workchain : 0}:${hash}`);\n    }\n    static async fromPubkey(args) {\n        const publicKey = new bignumber_js_1.default(`0x${args.publicKey}`);\n        const address = await HighloadWalletV2.computeAddress({ publicKey, workchain: args.workchain });\n        const result = new HighloadWalletV2(address);\n        result.publicKey = publicKey;\n        return result;\n    }\n    async fetchPublicKey(ctx) {\n        let publicKey = this.publicKey;\n        if (publicKey == null) {\n            publicKey = this.publicKey = await ctx.fetchPublicKey(this.address)\n                .then(publicKey => new bignumber_js_1.default(`0x${publicKey}`));\n        }\n        return publicKey.toString(16).padStart(64, '0');\n    }\n    async prepareMessage(args, ctx) {\n        const { publicKey, stateInit } = await this.fetchState(ctx);\n        const signer = await ctx.getSigner(publicKey);\n        const expireAt = ctx.nowSec + args.timeout;\n        const attachedPayload = args.payload\n            ? ctx.encodeInternalInput(args.payload)\n            : undefined;\n        const internalMessage = ctx.encodeInternalMessage({\n            dst: args.recipient,\n            bounce: args.bounce,\n            stateInit: args.stateInit,\n            body: attachedPayload,\n            amount: args.amount,\n        });\n        const params = {\n            messages: [[0, {\n                        flags: 3,\n                        message: internalMessage,\n                    }]],\n        };\n        const messages = ctx.packIntoCell({ structure: MESSAGES_STRUCTURE, data: params });\n        const messagesHash = ctx.getBocHash(messages);\n        params.walletId = WALLET_ID;\n        params.expireAt = expireAt;\n        params.messagesHash = `0x${messagesHash.slice(-8)}`;\n        const unsignedPayload = ctx.packIntoCell({ structure: UNSIGNED_TRANSFER_STRUCTURE, data: params });\n        const hash = ctx.getBocHash(unsignedPayload);\n        const signature = await signer.sign(hash);\n        const { signatureParts } = ctx.extendSignature(signature);\n        params.signatureHigh = signatureParts.high;\n        params.signatureLow = signatureParts.low;\n        const signedPayload = ctx.packIntoCell({ structure: SIGNED_TRANSFER_STRUCTURE, data: params });\n        return ctx.createRawExternalMessage({\n            address: this.address.toString(),\n            body: signedPayload,\n            stateInit,\n            expireAt,\n        });\n    }\n    async fetchState(ctx) {\n        let stateInit = undefined;\n        let publicKey;\n        const state = await ctx.getFullContractState(this.address);\n        if (state == null || !state.isDeployed) {\n            if (this.publicKey == null) {\n                throw new Error('Contract not deployed and public key was not specified');\n            }\n            stateInit = makeStateInit(this.publicKey);\n            publicKey = this.publicKey;\n        }\n        else if (this.publicKey == null) {\n            const data = ctx.extractContractData(state.boc);\n            if (data == null) {\n                throw new Error('Failed to extract contract data');\n            }\n            publicKey = parseInitData(ctx, data).publicKey;\n        }\n        else {\n            publicKey = this.publicKey;\n        }\n        if (this.publicKey == null) {\n            this.publicKey = publicKey;\n        }\n        return {\n            publicKey: publicKey.toString(16).padStart(64, '0'),\n            stateInit,\n        };\n    }\n}\nexports.HighloadWalletV2 = HighloadWalletV2;\nconst parseInitData = (ctx, boc) => {\n    const parsed = ctx.unpackFromCell({ structure: DATA_STRUCTURE, boc, allowPartial: true });\n    if (typeof parsed !== 'object' || typeof parsed['publicKey'] !== 'string') {\n        throw new Error('Invalid contract data');\n    }\n    return {\n        publicKey: new bignumber_js_1.default(parsed.publicKey),\n    };\n};\nconst makeStateInit = (publicKey) => {\n    const data = nekoton.packIntoCell(DATA_STRUCTURE, {\n        walletId: WALLET_ID,\n        lastCleaned: 0,\n        publicKey: publicKey.toFixed(0),\n        queries: false,\n    });\n    return nekoton.mergeTvc(HIGHLOAD_WALLET_V2_CODE, data);\n};\nconst MESSAGES_STRUCTURE = [\n    {\n        name: 'messages',\n        type: 'map(uint16,tuple)',\n        components: [\n            { name: 'flags', type: 'uint8' },\n            { name: 'message', type: 'cell' },\n        ],\n    },\n];\nconst UNSIGNED_TRANSFER_STRUCTURE = [\n    { name: 'walletId', type: 'uint32' },\n    { name: 'expireAt', type: 'uint32' },\n    { name: 'messagesHash', type: 'uint32' },\n    ...MESSAGES_STRUCTURE,\n];\nconst SIGNED_TRANSFER_STRUCTURE = [\n    { name: 'signatureHigh', type: 'uint256' },\n    { name: 'signatureLow', type: 'uint256' },\n    ...UNSIGNED_TRANSFER_STRUCTURE,\n];\nconst DATA_STRUCTURE = [\n    { name: 'walletId', type: 'uint32' },\n    { name: 'lastCleaned', type: 'uint64' },\n    { name: 'publicKey', type: 'uint256' },\n    { name: 'queries', type: 'bool' },\n];\nconst HIGHLOAD_WALLET_V2_CODE = 'te6ccgEBCQEA5QABFP8A9KQT9LzyyAsBAgEgBAIB6vKDCNcYINMf0z/4I6ofUyC58mPtRNDTH9M/0//0BNFTYIBA9A5voTHyYFFzuvKiB/kBVBCH+RDyowL0BNH4AH+OFiGAEPR4b6UgmALTB9QwAfsAkTLiAbPmW4MlochANIBA9EOK5jHIEssfE8s/y//0AMntVAMANCCAQPSWb6UyURCUMFMDud4gkzM2AZIyMOKzAgFICAUCASAHBgBBvl+XaiaGmPmOmf6f+Y+gJoqRBAIHoHN9CYyS2/yV3R8UABe9nOdqJoaa+Y64X/wABNAw';\nconst WALLET_ID = 0;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///128\n")},61:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WalletV3Account = void 0;\nconst everscale_inpage_provider_1 = __webpack_require__(511);\nconst bignumber_js_1 = __importDefault(__webpack_require__(431));\nconst core_1 = __importDefault(__webpack_require__(521));\nconst { ensureNekotonLoaded, nekoton } = core_1.default;\n/**\n * @category AccountsStorage\n */\nclass WalletV3Account {\n    constructor(address) {\n        this.address = address;\n    }\n    static async computeAddress(args) {\n        // TODO: Somehow propagate init params\n        await ensureNekotonLoaded();\n        const publicKey = args.publicKey instanceof bignumber_js_1.default\n            ? args.publicKey\n            : new bignumber_js_1.default(`0x${args.publicKey}`);\n        const tvc = makeStateInit(publicKey);\n        const hash = nekoton.getBocHash(tvc);\n        return new everscale_inpage_provider_1.Address(`${args.workchain != null ? args.workchain : 0}:${hash}`);\n    }\n    static async fromPubkey(args) {\n        const publicKey = new bignumber_js_1.default(`0x${args.publicKey}`);\n        const address = await WalletV3Account.computeAddress({ publicKey, workchain: args.workchain });\n        const result = new WalletV3Account(address);\n        result.publicKey = publicKey;\n        return result;\n    }\n    async fetchPublicKey(ctx) {\n        let publicKey = this.publicKey;\n        if (publicKey == null) {\n            publicKey = this.publicKey = await ctx.fetchPublicKey(this.address)\n                .then(publicKey => new bignumber_js_1.default(`0x${publicKey}`));\n        }\n        return publicKey.toString(16).padStart(64, '0');\n    }\n    async prepareMessage(args, ctx) {\n        const { seqno, publicKey, stateInit } = await this.fetchState(ctx);\n        const signer = await ctx.getSigner(publicKey);\n        const expireAt = ctx.nowSec + args.timeout;\n        const attachedPayload = args.payload\n            ? ctx.encodeInternalInput(args.payload)\n            : undefined;\n        const internalMessage = ctx.encodeInternalMessage({\n            dst: args.recipient,\n            bounce: args.bounce,\n            stateInit: args.stateInit,\n            body: attachedPayload,\n            amount: args.amount,\n        });\n        const params = {\n            walletId: WALLET_ID,\n            expireAt,\n            seqno,\n            flags: 3,\n            message: internalMessage,\n        };\n        const unsignedPayload = ctx.packIntoCell({ structure: UNSIGNED_TRANSFER_STRUCTURE, data: params });\n        const hash = ctx.getBocHash(unsignedPayload);\n        const signature = await signer.sign(hash);\n        const { signatureParts } = ctx.extendSignature(signature);\n        params.signatureHigh = signatureParts.high;\n        params.signatureLow = signatureParts.low;\n        const signedPayload = ctx.packIntoCell({\n            structure: SIGNED_TRANSFER_STRUCTURE,\n            data: params,\n        });\n        return ctx.createRawExternalMessage({\n            address: this.address,\n            body: signedPayload,\n            stateInit,\n            expireAt,\n        });\n    }\n    async fetchState(ctx) {\n        let stateInit = undefined;\n        let result;\n        const state = await ctx.getFullContractState(this.address);\n        if (state == null || !state.isDeployed) {\n            if (this.publicKey == null) {\n                throw new Error('Contract not deployed and public key was not specified');\n            }\n            stateInit = makeStateInit(this.publicKey);\n            result = { seqno: 0, publicKey: this.publicKey };\n        }\n        else {\n            const data = ctx.extractContractData(state.boc);\n            if (data == null) {\n                throw new Error('Failed to extract contract data');\n            }\n            result = parseInitData(ctx, data);\n        }\n        if (this.publicKey == null) {\n            this.publicKey = result.publicKey;\n        }\n        else if (!this.publicKey.eq(result.publicKey)) {\n            throw new Error('Public key mismatch');\n        }\n        return {\n            seqno: result.seqno,\n            publicKey: result.publicKey.toString(16).padStart(64, '0'),\n            stateInit,\n        };\n    }\n}\nexports.WalletV3Account = WalletV3Account;\nconst parseInitData = (ctx, boc) => {\n    const parsed = ctx.unpackFromCell({\n        structure: DATA_STRUCTURE,\n        boc,\n        allowPartial: false,\n    });\n    if (typeof parsed !== 'object' || typeof parsed['seqno'] !== 'string' || typeof parsed['publicKey'] !== 'string') {\n        throw new Error('Invalid contract data ');\n    }\n    return {\n        seqno: parseInt(parsed.seqno),\n        publicKey: new bignumber_js_1.default(parsed.publicKey),\n    };\n};\nconst makeStateInit = (publicKey) => {\n    const data = nekoton.packIntoCell(DATA_STRUCTURE, {\n        seqno: 0,\n        walletId: WALLET_ID,\n        publicKey: publicKey.toFixed(0),\n    });\n    return nekoton.mergeTvc(WALLET_V3_CODE, data);\n};\nconst UNSIGNED_TRANSFER_STRUCTURE = [\n    { name: 'walletId', type: 'uint32' },\n    { name: 'expireAt', type: 'uint32' },\n    { name: 'seqno', type: 'uint32' },\n    { name: 'flags', type: 'uint8' },\n    { name: 'message', type: 'cell' },\n];\nconst SIGNED_TRANSFER_STRUCTURE = [\n    { name: 'signatureHigh', type: 'uint256' },\n    { name: 'signatureLow', type: 'uint256' },\n    ...UNSIGNED_TRANSFER_STRUCTURE,\n];\nconst DATA_STRUCTURE = [\n    { name: 'seqno', type: 'uint32' },\n    { name: 'walletId', type: 'uint32' },\n    { name: 'publicKey', type: 'uint256' },\n];\nconst WALLET_V3_CODE = 'te6ccgEBAQEAcQAA3v8AIN0gggFMl7ohggEznLqxn3Gw7UTQ0x/THzHXC//jBOCk8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVA==';\nconst WALLET_ID = 0x4BA92D8A;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///61\n")},487:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.SimpleAccountsStorage = exports.AccountsStorageContext = exports.HighloadWalletV2 = exports.WalletV3Account = exports.MsigAccount = exports.GenericAccount = exports.GiverAccount = void 0;\nconst everscale_inpage_provider_1 = __webpack_require__(511);\nvar Giver_1 = __webpack_require__(766);\nObject.defineProperty(exports, "GiverAccount", ({ enumerable: true, get: function () { return Giver_1.GiverAccount; } }));\nvar Generic_1 = __webpack_require__(758);\nObject.defineProperty(exports, "GenericAccount", ({ enumerable: true, get: function () { return Generic_1.GenericAccount; } }));\nObject.defineProperty(exports, "MsigAccount", ({ enumerable: true, get: function () { return Generic_1.MsigAccount; } }));\nvar WalletV3_1 = __webpack_require__(61);\nObject.defineProperty(exports, "WalletV3Account", ({ enumerable: true, get: function () { return WalletV3_1.WalletV3Account; } }));\nvar HighloadWalletV2_1 = __webpack_require__(128);\nObject.defineProperty(exports, "HighloadWalletV2", ({ enumerable: true, get: function () { return HighloadWalletV2_1.HighloadWalletV2; } }));\n/**\n * @category AccountsStorage\n */\nclass AccountsStorageContext {\n    constructor(clock, connectionController, nekoton, keystore) {\n        this.clock = clock;\n        this.connectionController = connectionController;\n        this.nekoton = nekoton;\n        this.keystore = keystore;\n    }\n    async getSigner(publicKey) {\n        if (this.keystore == null) {\n            throw new Error(\'Keystore not found\');\n        }\n        const signer = await this.keystore.getSigner(publicKey);\n        if (signer == null) {\n            throw new Error(\'Signer not found\');\n        }\n        return signer;\n    }\n    get nowMs() {\n        return this.clock.nowMs;\n    }\n    get nowSec() {\n        return ~~(this.clock.nowMs / 1000);\n    }\n    async fetchPublicKey(address) {\n        const state = await this.getFullContractState(address);\n        if (state == null || !state.isDeployed) {\n            throw new Error(\'Contract not deployed\');\n        }\n        return this.nekoton.extractPublicKey(state.boc);\n    }\n    async getFullContractState(address) {\n        return this.connectionController.use(async ({ data: { transport } }) => transport.getFullContractState(address.toString()));\n    }\n    extractContractData(boc) {\n        return this.nekoton.extractContractData(boc);\n    }\n    packIntoCell(args) {\n        return this.nekoton.packIntoCell(args.structure, args.data, args.abiVersion);\n    }\n    unpackFromCell(args) {\n        return this.nekoton.unpackFromCell(args.structure, args.boc, args.allowPartial, args.abiVersion);\n    }\n    getBocHash(boc) {\n        return this.nekoton.getBocHash(boc);\n    }\n    extendSignature(signature) {\n        return this.nekoton.extendSignature(signature);\n    }\n    encodeInternalInput(args) {\n        return this.nekoton.encodeInternalInput(args.abi, args.method, args.params);\n    }\n    encodeInternalMessage(args) {\n        return this.nekoton.encodeInternalMessage(args.src, args.dst, args.bounce, args.stateInit, args.body, args.amount);\n    }\n    async createExternalMessage(args) {\n        const unsignedMessage = this.nekoton.createExternalMessage(this.clock, args.address.toString(), args.abi, args.method, args.stateInit, args.params, args.signer.publicKey, args.timeout);\n        try {\n            const signature = await args.signer.sign(unsignedMessage.hash);\n            return unsignedMessage.sign(signature);\n        }\n        finally {\n            unsignedMessage.free();\n        }\n    }\n    createRawExternalMessage(args) {\n        return this.nekoton.createRawExternalMessage(args.address.toString(), args.stateInit, args.body, args.expireAt);\n    }\n}\nexports.AccountsStorageContext = AccountsStorageContext;\n/**\n * @category AccountsStorage\n */\nclass SimpleAccountsStorage {\n    /**\n     * Creates new simple accounts storage.\n     *\n     * If no `defaultAccount` provided, uses first provided entry\n     *\n     * @param args\n     */\n    constructor(args = {}) {\n        this.accounts = new Map();\n        if (args.entries != null) {\n            for (const account of args.entries) {\n                if (this._defaultAccount == null) {\n                    this._defaultAccount = account.address;\n                }\n                this.accounts.set(account.address.toString(), account);\n            }\n        }\n        if (args.defaultAccount != null) {\n            let defaultAccount;\n            if (args.defaultAccount instanceof everscale_inpage_provider_1.Address) {\n                defaultAccount = args.defaultAccount;\n            }\n            else {\n                defaultAccount = new everscale_inpage_provider_1.Address(args.defaultAccount);\n            }\n            if (!this.accounts.has(defaultAccount.toString())) {\n                throw new Error(\'Provided default account not found in storage\');\n            }\n            this._defaultAccount = defaultAccount;\n        }\n    }\n    get defaultAccount() {\n        return this._defaultAccount;\n    }\n    set defaultAccount(value) {\n        const address = value === null || value === void 0 ? void 0 : value.toString();\n        if (address != null && !this.accounts.has(address)) {\n            throw new Error(\'Account not found in storage\');\n        }\n        this._defaultAccount = (value == null || value instanceof everscale_inpage_provider_1.Address) ? value : new everscale_inpage_provider_1.Address(value);\n    }\n    async getAccount(address) {\n        return this.accounts.get(address.toString());\n    }\n    addAccount(account) {\n        const address = account.address;\n        this.accounts.set(address.toString(), account);\n        return address;\n    }\n    hasAccount(address) {\n        return this.accounts.has(address.toString());\n    }\n    removeAccount(address) {\n        this.accounts.delete(address.toString());\n    }\n}\nexports.SimpleAccountsStorage = SimpleAccountsStorage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///487\n')},315:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GqlSocket = void 0;\nconst core_1 = __importDefault(__webpack_require__(521));\nconst { nekoton, fetch, fetchAgent, debugLog } = core_1.default;\nclass GqlSocket {\n    async connect(clock, params) {\n        class GqlSender {\n            constructor(params) {\n                this.nextLatencyDetectionTime = 0;\n                this.params = params;\n                this.latencyDetectionInterval = params.latencyDetectionInterval || 60000;\n                this.endpoints = params.endpoints.map(GqlSocket.expandAddress);\n                if (this.endpoints.length == 1) {\n                    this.currentEndpoint = this.endpoints[0];\n                    this.nextLatencyDetectionTime = Number.MAX_VALUE;\n                }\n            }\n            isLocal() {\n                return this.params.local;\n            }\n            send(data, handler, _longQuery) {\n                ;\n                (async () => {\n                    const now = Date.now();\n                    try {\n                        let endpoint;\n                        if (this.currentEndpoint != null && now < this.nextLatencyDetectionTime) {\n                            // Default route\n                            endpoint = this.currentEndpoint;\n                        }\n                        else if (this.resolutionPromise != null) {\n                            // Already resolving\n                            endpoint = await this.resolutionPromise;\n                            delete this.resolutionPromise;\n                        }\n                        else {\n                            delete this.currentEndpoint;\n                            // Start resolving (current endpoint is null, or it is time to refresh)\n                            this.resolutionPromise = this._selectQueryingEndpoint().then((endpoint) => {\n                                this.currentEndpoint = endpoint;\n                                this.nextLatencyDetectionTime = Date.now() + this.latencyDetectionInterval;\n                                return endpoint;\n                            });\n                            endpoint = await this.resolutionPromise;\n                            delete this.resolutionPromise;\n                        }\n                        const response = await fetch(endpoint.url, {\n                            method: 'post',\n                            headers: DEFAULT_HEADERS,\n                            body: data,\n                            agent: endpoint.agent,\n                        }).then((response) => response.text());\n                        handler.onReceive(response);\n                    }\n                    catch (e) {\n                        handler.onError(e);\n                    }\n                })();\n            }\n            async _selectQueryingEndpoint() {\n                const maxLatency = this.params.maxLatency || 60000;\n                const endpointCount = this.endpoints.length;\n                for (let retryCount = 0; retryCount < 5; ++retryCount) {\n                    let handlers;\n                    const promise = new Promise((resolve, reject) => {\n                        handlers = {\n                            resolve: (endpoint) => resolve(endpoint),\n                            reject: () => reject(undefined),\n                        };\n                    });\n                    let checkedEndpoints = 0;\n                    let lastLatency;\n                    for (const endpoint of this.endpoints) {\n                        GqlSocket.checkLatency(endpoint).then((latency) => {\n                            ++checkedEndpoints;\n                            if (latency !== undefined && latency <= maxLatency) {\n                                return handlers.resolve(endpoint);\n                            }\n                            if (lastLatency === undefined ||\n                                lastLatency.latency === undefined ||\n                                (latency !== undefined && latency < lastLatency.latency)) {\n                                lastLatency = { endpoint, latency };\n                            }\n                            if (checkedEndpoints >= endpointCount) {\n                                if ((lastLatency === null || lastLatency === void 0 ? void 0 : lastLatency.latency) !== undefined) {\n                                    handlers.resolve(lastLatency.endpoint);\n                                }\n                                else {\n                                    handlers.reject();\n                                }\n                            }\n                        });\n                    }\n                    try {\n                        return await promise;\n                    }\n                    catch (e) {\n                        let resolveDelay;\n                        const delayPromise = new Promise((resolve) => {\n                            resolveDelay = () => resolve();\n                        });\n                        setTimeout(() => resolveDelay(), Math.min(100 * retryCount, 5000));\n                        await delayPromise;\n                    }\n                }\n                throw new Error('Not available endpoint found');\n            }\n        }\n        return new nekoton.GqlConnection(clock, new GqlSender(params));\n    }\n    static async checkLatency(endpoint) {\n        const response = await fetch(`${endpoint.url}?query=%7Binfo%7Bversion%20time%20latency%7D%7D`, {\n            method: 'get',\n            agent: endpoint.agent,\n        })\n            .then((response) => response.json())\n            .catch((e) => {\n            debugLog(e);\n            return undefined;\n        });\n        if (typeof response !== 'object' || response == null) {\n            return;\n        }\n        const data = response['data'];\n        if (typeof data !== 'object' || data == null) {\n            return;\n        }\n        const info = data['info'];\n        if (typeof info !== 'object' || info == null) {\n            return;\n        }\n        const latency = info['latency'];\n        if (typeof latency !== 'number') {\n            return;\n        }\n        return latency;\n    }\n}\nexports.GqlSocket = GqlSocket;\nGqlSocket.expandAddress = (baseUrl) => {\n    const lastBackslashIndex = baseUrl.lastIndexOf('/');\n    baseUrl = lastBackslashIndex < 0 ? baseUrl : baseUrl.substring(0, lastBackslashIndex);\n    let url;\n    if (baseUrl.startsWith('http://') || baseUrl.startsWith('https://')) {\n        url = `${baseUrl}/graphql`;\n    }\n    else if (['localhost', '127.0.0.1'].indexOf(baseUrl) >= 0) {\n        url = `http://${baseUrl}/graphql`;\n    }\n    else {\n        url = `https://${baseUrl}/graphql`;\n    }\n    return {\n        url,\n        agent: fetchAgent(url),\n    };\n};\nconst DEFAULT_HEADERS = {\n    'Content-Type': 'application/json',\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///315\n")},863:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionController = exports.createConnectionController = exports.ConnectionError = exports.checkConnection = exports.NETWORK_PRESETS = exports.DEFAULT_NETWORK_GROUP = void 0;\nconst await_semaphore_1 = __webpack_require__(68);\nconst core_1 = __importDefault(__webpack_require__(521));\nconst gql_1 = __webpack_require__(315);\nconst jrpc_1 = __webpack_require__(106);\nconst { nekoton, debugLog } = core_1.default;\nexports.DEFAULT_NETWORK_GROUP = 'mainnet';\n/**\n * @category Client\n */\nexports.NETWORK_PRESETS = {\n    mainnet: {\n        id: 1,\n        group: 'mainnet',\n        type: 'graphql',\n        data: {\n            endpoints: [\n                'eri01.main.everos.dev',\n                'gra01.main.everos.dev',\n                'gra02.main.everos.dev',\n                'lim01.main.everos.dev',\n                'rbx01.main.everos.dev',\n            ],\n            local: false,\n        },\n    },\n    mainnetJrpc: {\n        id: 1,\n        group: 'mainnet',\n        type: 'jrpc',\n        data: {\n            endpoint: 'https://jrpc.everwallet.net/rpc',\n        },\n    },\n    testnet: {\n        id: 2,\n        group: 'testnet',\n        type: 'graphql',\n        data: {\n            endpoints: ['eri01.net.everos.dev', 'rbx01.net.everos.dev', 'gra01.net.everos.dev'],\n            local: false,\n        },\n    },\n    fld: {\n        id: 10,\n        group: 'fld',\n        type: 'graphql',\n        data: {\n            endpoints: ['gql.custler.net'],\n            local: false,\n        },\n    },\n    local: {\n        id: 31337,\n        group: 'localnet',\n        type: 'graphql',\n        data: {\n            endpoints: ['127.0.0.1'],\n            local: true,\n        },\n    },\n};\nfunction loadPreset(params) {\n    if (typeof params === 'string') {\n        const targetPreset = exports.NETWORK_PRESETS[params];\n        if (targetPreset == null) {\n            throw new Error(`Target preset id not found: ${params}`);\n        }\n        return targetPreset;\n    }\n    else {\n        return params;\n    }\n}\n/**\n * Tries to connect with the specified params. Throws an exception in case of error\n *\n * @category Client\n * @throws ConnectionError\n */\nasync function checkConnection(params) {\n    const preset = loadPreset(params);\n    const clock = new nekoton.ClockWithOffset();\n    try {\n        const controller = new ConnectionController(clock);\n        await controller['_connect'](preset);\n        if (controller['_initializedTransport'] != null) {\n            cleanupInitializedTransport(controller['_initializedTransport']);\n        }\n    }\n    catch (e) {\n        throw new ConnectionError(preset, e.toString());\n    }\n    finally {\n        clock.free();\n    }\n}\nexports.checkConnection = checkConnection;\n/**\n * @category Client\n */\nclass ConnectionError extends Error {\n    constructor(params, message) {\n        super(message);\n        this.params = params;\n    }\n}\nexports.ConnectionError = ConnectionError;\nasync function createConnectionController(clock, params, retry = false) {\n    const preset = loadPreset(params);\n    // Try connect\n    while (true) {\n        try {\n            const controller = new ConnectionController(clock);\n            await controller.startSwitchingNetwork(preset).then((handle) => handle.switch());\n            debugLog(`Successfully connected to ${preset.group}`);\n            return controller;\n        }\n        catch (e) {\n            if (retry) {\n                console.error('Connection failed:', e);\n                await new Promise((resolve) => {\n                    setTimeout(() => resolve(), 5000);\n                });\n                debugLog('Restarting connection process');\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n}\nexports.createConnectionController = createConnectionController;\nclass ConnectionController {\n    constructor(clock) {\n        this._networkMutex = new await_semaphore_1.Mutex();\n        this._acquiredTransportCounter = 0;\n        this._clock = clock;\n    }\n    async acquire() {\n        requireInitializedTransport(this._initializedTransport);\n        await this._acquireTransport();\n        return {\n            transport: this._initializedTransport,\n            release: () => this._releaseTransport(),\n        };\n    }\n    async use(f) {\n        requireInitializedTransport(this._initializedTransport);\n        await this._acquireTransport();\n        return f(this._initializedTransport)\n            .finally(() => {\n            this._releaseTransport();\n        });\n    }\n    async startSwitchingNetwork(params) {\n        var _a;\n        class NetworkSwitchHandle {\n            constructor(controller, release, params) {\n                this._controller = controller;\n                this._release = release;\n                this._params = params;\n            }\n            async switch() {\n                await this._controller\n                    ._connect(this._params)\n                    .finally(() => this._release());\n            }\n        }\n        (_a = this._cancelTestTransport) === null || _a === void 0 ? void 0 : _a.call(this);\n        const release = await this._networkMutex.acquire();\n        return new NetworkSwitchHandle(this, release, params);\n    }\n    get initializedTransport() {\n        return this._initializedTransport;\n    }\n    async _connect(params) {\n        if (this._initializedTransport != null) {\n            cleanupInitializedTransport(this._initializedTransport);\n        }\n        this._initializedTransport = undefined;\n        let TestConnectionResult;\n        (function (TestConnectionResult) {\n            TestConnectionResult[TestConnectionResult[\"DONE\"] = 0] = \"DONE\";\n            TestConnectionResult[TestConnectionResult[\"CANCELLED\"] = 1] = \"CANCELLED\";\n        })(TestConnectionResult || (TestConnectionResult = {}));\n        const testTransport = async ({ data: { transport } }, local) => {\n            return new Promise((resolve, reject) => {\n                this._cancelTestTransport = () => resolve(TestConnectionResult.CANCELLED);\n                if (local) {\n                    transport\n                        .getAccountsByCodeHash('4e92716de61d456e58f16e4e867e3e93a7548321eace86301b51c8b80ca6239b', 1)\n                        .then(() => resolve(TestConnectionResult.DONE))\n                        .catch((e) => reject(e));\n                }\n                else {\n                    // Try to get any account state\n                    transport\n                        .getFullContractState('-1:0000000000000000000000000000000000000000000000000000000000000000')\n                        .then(() => resolve(TestConnectionResult.DONE))\n                        .catch((e) => reject(e));\n                }\n                setTimeout(() => reject(new Error('Connection timeout')), 10000);\n            }).finally(() => this._cancelTestTransport = undefined);\n        };\n        try {\n            const { local, transportData } = await (params.type === 'graphql'\n                ? async () => {\n                    const socket = new gql_1.GqlSocket();\n                    const connection = await socket.connect(this._clock, params.data);\n                    const transport = nekoton.Transport.fromGqlConnection(connection);\n                    const transportData = {\n                        id: params.id,\n                        group: params.group,\n                        type: 'graphql',\n                        data: {\n                            socket,\n                            connection,\n                            transport,\n                        },\n                    };\n                    return {\n                        local: params.data.local,\n                        transportData,\n                    };\n                }\n                : async () => {\n                    const socket = new jrpc_1.JrpcSocket();\n                    const connection = await socket.connect(this._clock, params.data);\n                    const transport = nekoton.Transport.fromJrpcConnection(connection);\n                    const transportData = {\n                        id: params.id,\n                        group: params.group,\n                        type: 'jrpc',\n                        data: {\n                            socket,\n                            connection,\n                            transport,\n                        },\n                    };\n                    return {\n                        local: false,\n                        transportData,\n                    };\n                })();\n            try {\n                if (await testTransport(transportData, local) == TestConnectionResult.CANCELLED) {\n                    cleanupInitializedTransport(transportData);\n                    return;\n                }\n            }\n            catch (e) {\n                // Free transport data in case of error\n                cleanupInitializedTransport(transportData);\n                throw e;\n            }\n            this._initializedTransport = transportData;\n        }\n        catch (e) {\n            throw new Error(`Failed to create connection: ${e.toString()}`);\n        }\n    }\n    async _acquireTransport() {\n        debugLog('_acquireTransport');\n        if (this._acquiredTransportCounter > 0) {\n            debugLog('_acquireTransport -> increase');\n            this._acquiredTransportCounter += 1;\n        }\n        else {\n            this._acquiredTransportCounter = 1;\n            if (this._release != null) {\n                console.warn('mutex is already acquired');\n            }\n            else {\n                debugLog('_acquireTransport -> await');\n                this._release = await this._networkMutex.acquire();\n                debugLog('_acquireTransport -> create');\n            }\n        }\n    }\n    _releaseTransport() {\n        var _a;\n        debugLog('_releaseTransport');\n        this._acquiredTransportCounter -= 1;\n        if (this._acquiredTransportCounter <= 0) {\n            debugLog('_releaseTransport -> release');\n            (_a = this._release) === null || _a === void 0 ? void 0 : _a.call(this);\n            this._release = undefined;\n        }\n    }\n}\nexports.ConnectionController = ConnectionController;\nfunction cleanupInitializedTransport(transport) {\n    transport.data.transport.free();\n    transport.data.connection.free();\n}\nfunction requireInitializedTransport(transport) {\n    if (transport == null) {\n        throw new Error('Connection is not initialized');\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///863\n")},106:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JrpcSocket = void 0;\nconst core_1 = __importDefault(__webpack_require__(521));\nconst { nekoton, fetch, fetchAgent } = core_1.default;\nclass JrpcSocket {\n    async connect(clock, params) {\n        class JrpcSender {\n            constructor(params) {\n                this.endpoint = params.endpoint;\n                this.endpointAgent = fetchAgent(this.endpoint);\n                this.alternativeEndpoint = params.alternativeEndpoint != null\n                    ? params.alternativeEndpoint\n                    : params.endpoint;\n                this.alternativeEndpointAgent = fetchAgent(this.alternativeEndpoint);\n            }\n            send(data, handler, requiresDb) {\n                ;\n                (async () => {\n                    try {\n                        const url = requiresDb ? this.endpoint : this.alternativeEndpoint;\n                        const agent = requiresDb ? this.endpointAgent : this.alternativeEndpointAgent;\n                        const response = await fetch(url, {\n                            method: 'post',\n                            headers: DEFAULT_HEADERS,\n                            body: data,\n                            agent,\n                        }).then((response) => response.text());\n                        handler.onReceive(response);\n                    }\n                    catch (e) {\n                        handler.onError(e);\n                    }\n                })();\n            }\n        }\n        return new nekoton.JrpcConnection(clock, new JrpcSender(params));\n    }\n}\nexports.JrpcSocket = JrpcSocket;\nconst DEFAULT_HEADERS = {\n    'Content-Type': 'application/json',\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMTA2LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2V2ZXJzY2FsZS1zdGFuZGFsb25lLWNsaWVudC9jbGllbnQvQ29ubmVjdGlvbkNvbnRyb2xsZXIvanJwYy5qcz9iNDY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5KcnBjU29ja2V0ID0gdm9pZCAwO1xuY29uc3QgY29yZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9jb3JlXCIpKTtcbmNvbnN0IHsgbmVrb3RvbiwgZmV0Y2gsIGZldGNoQWdlbnQgfSA9IGNvcmVfMS5kZWZhdWx0O1xuY2xhc3MgSnJwY1NvY2tldCB7XG4gICAgYXN5bmMgY29ubmVjdChjbG9jaywgcGFyYW1zKSB7XG4gICAgICAgIGNsYXNzIEpycGNTZW5kZXIge1xuICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRwb2ludCA9IHBhcmFtcy5lbmRwb2ludDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZHBvaW50QWdlbnQgPSBmZXRjaEFnZW50KHRoaXMuZW5kcG9pbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWx0ZXJuYXRpdmVFbmRwb2ludCA9IHBhcmFtcy5hbHRlcm5hdGl2ZUVuZHBvaW50ICE9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgPyBwYXJhbXMuYWx0ZXJuYXRpdmVFbmRwb2ludFxuICAgICAgICAgICAgICAgICAgICA6IHBhcmFtcy5lbmRwb2ludDtcbiAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0aXZlRW5kcG9pbnRBZ2VudCA9IGZldGNoQWdlbnQodGhpcy5hbHRlcm5hdGl2ZUVuZHBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbmQoZGF0YSwgaGFuZGxlciwgcmVxdWlyZXNEYikge1xuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gcmVxdWlyZXNEYiA/IHRoaXMuZW5kcG9pbnQgOiB0aGlzLmFsdGVybmF0aXZlRW5kcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZ2VudCA9IHJlcXVpcmVzRGIgPyB0aGlzLmVuZHBvaW50QWdlbnQgOiB0aGlzLmFsdGVybmF0aXZlRW5kcG9pbnRBZ2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogREVGQVVMVF9IRUFERVJTLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UudGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIub25SZWNlaXZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5vbkVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IG5la290b24uSnJwY0Nvbm5lY3Rpb24oY2xvY2ssIG5ldyBKcnBjU2VuZGVyKHBhcmFtcykpO1xuICAgIH1cbn1cbmV4cG9ydHMuSnJwY1NvY2tldCA9IEpycGNTb2NrZXQ7XG5jb25zdCBERUZBVUxUX0hFQURFUlMgPSB7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///106\n")},536:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SubscriptionController = void 0;\nconst await_semaphore_1 = __webpack_require__(68);\nconst utils_1 = __webpack_require__(344);\nconst subscription_1 = __webpack_require__(334);\nconst DEFAULT_POLLING_INTERVAL = 10000; // 10s\nclass SubscriptionController {\n    constructor(connectionController, notify) {\n        this._subscriptions = new Map();\n        this._subscriptionsMutex = new await_semaphore_1.Mutex();\n        this._sendMessageRequests = new Map();\n        this._subscriptionStates = new Map();\n        this._connectionController = connectionController;\n        this._notify = notify;\n    }\n    async sendMessageLocally(address, signedMessage) {\n        const subscriptionId = (0, utils_1.getUniqueId)();\n        try {\n            await this.subscribeToContract(address, { state: true }, subscriptionId);\n            const subscription = this._subscriptions.get(address);\n            if (subscription == null) {\n                throw new Error('Failed to subscribe to contract');\n            }\n            return await subscription.use((contract) => contract.sendMessageLocally(signedMessage));\n        }\n        finally {\n            this.unsubscribeFromContract(address, subscriptionId).catch(console.error);\n        }\n    }\n    sendMessage(address, signedMessage) {\n        let messageRequests = this._sendMessageRequests.get(address);\n        if (messageRequests == null) {\n            messageRequests = new Map();\n            this._sendMessageRequests.set(address, messageRequests);\n        }\n        const subscriptionId = (0, utils_1.getUniqueId)();\n        return new Promise((resolve, reject) => {\n            const id = signedMessage.hash;\n            messageRequests.set(id, { resolve, reject });\n            this.subscribeToContract(address, { state: true }, subscriptionId)\n                .then(async () => {\n                const subscription = this._subscriptions.get(address);\n                if (subscription == null) {\n                    throw new Error('Failed to subscribe to contract');\n                }\n                await subscription.prepareReliablePolling();\n                await subscription\n                    .use(async (contract) => {\n                    await contract.sendMessage(signedMessage);\n                    subscription.skipRefreshTimer();\n                });\n            })\n                .catch((e) => this._rejectMessageRequest(address, id, e))\n                .finally(() => {\n                this.unsubscribeFromContract(address, subscriptionId).catch(console.error);\n            });\n        });\n    }\n    async subscribeToContract(address, params, internalId) {\n        return this._subscriptionsMutex.use(async () => {\n            let mergeInputParams = (currentParams) => {\n                const newParams = { ...currentParams };\n                Object.keys(newParams).map((param) => {\n                    if (param !== 'state' && param !== 'transactions') {\n                        throw new Error(`Unknown subscription topic: ${param}`);\n                    }\n                    const value = params[param];\n                    if (typeof value === 'boolean') {\n                        newParams[param] = value;\n                    }\n                    else if (value == null) {\n                        return;\n                    }\n                    else {\n                        throw new Error(`Unknown subscription topic value ${param}: ${value}`);\n                    }\n                });\n                return newParams;\n            };\n            const subscriptionState = this._subscriptionStates.get(address) || makeDefaultSubscriptionState();\n            let changedParams;\n            if (internalId == null) {\n                // Client subscription without id\n                // Changed params are `SubscriptionState.client`\n                changedParams = mergeInputParams(subscriptionState.client);\n            }\n            else {\n                // Internal subscription with id\n                // Changed params are `SubscriptionState.internal[internalId]`\n                let exisingParams = subscriptionState.internal.get(internalId);\n                if (exisingParams != null) {\n                    // Updating existing internal params\n                    changedParams = mergeInputParams(exisingParams);\n                    // Remove entry if it is empty\n                    if (isEmptySubscription(changedParams)) {\n                        subscriptionState.internal.delete(internalId);\n                    }\n                }\n                else {\n                    // Merge input params with empty struct\n                    changedParams = mergeInputParams({ state: false, transactions: false });\n                }\n            }\n            // Merge changed params with the rest of internal params\n            let computedParams = { ...changedParams };\n            for (const params of subscriptionState.internal.values()) {\n                computedParams.state || (computedParams.state = params.state);\n                computedParams.transactions || (computedParams.transactions = params.transactions);\n            }\n            // Remove subscription if all params are empty\n            if (isEmptySubscription(computedParams)) {\n                this._subscriptionStates.delete(address);\n                await this._tryUnsubscribe(address);\n                return { ...computedParams };\n            }\n            // Create subscription if it doesn't exist\n            let existingSubscription = this._subscriptions.get(address);\n            const isNewSubscription = existingSubscription == null;\n            if (existingSubscription == null) {\n                existingSubscription = await this._createSubscription(address);\n            }\n            // Update subscription state\n            if (internalId == null) {\n                // Update client params\n                subscriptionState.client = changedParams;\n            }\n            else {\n                // Set new internal params\n                subscriptionState.internal.set(internalId, changedParams);\n            }\n            this._subscriptionStates.set(address, subscriptionState);\n            // Start subscription\n            if (isNewSubscription) {\n                await existingSubscription.start();\n            }\n            // Returns only changed params\n            return { ...changedParams };\n        });\n    }\n    async unsubscribeFromContract(address, internalId) {\n        await this.subscribeToContract(address, {\n            state: false,\n            transactions: false,\n        }, internalId);\n    }\n    async unsubscribeFromAllContracts(internalId) {\n        for (const address of this._subscriptions.keys()) {\n            await this.unsubscribeFromContract(address, internalId);\n        }\n    }\n    get subscriptionStates() {\n        const result = {};\n        for (const [key, value] of this._subscriptionStates.entries()) {\n            result[key] = { ...value.client };\n        }\n        return result;\n    }\n    async _createSubscription(address) {\n        class ContractHandler {\n            constructor(address, controller) {\n                this._enabled = false;\n                this._address = address;\n                this._controller = controller;\n            }\n            enabledNotifications() {\n                this._enabled = true;\n            }\n            onMessageExpired(pendingTransaction) {\n                if (this._enabled) {\n                    this._controller\n                        ._resolveMessageRequest(this._address, pendingTransaction.messageHash, undefined)\n                        .catch(console.error);\n                }\n            }\n            onMessageSent(pendingTransaction, transaction) {\n                if (this._enabled) {\n                    this._controller\n                        ._resolveMessageRequest(this._address, pendingTransaction.messageHash, transaction)\n                        .catch(console.error);\n                }\n            }\n            onStateChanged(newState) {\n                if (this._enabled) {\n                    this._controller._notifyStateChanged(this._address, newState);\n                }\n            }\n            onTransactionsFound(transactions, info) {\n                if (this._enabled) {\n                    this._controller._notifyTransactionsFound(this._address, transactions, info);\n                }\n            }\n        }\n        const handler = new ContractHandler(address, this);\n        const subscription = await subscription_1.ContractSubscription.subscribe(this._connectionController, address, handler);\n        subscription.setPollingInterval(DEFAULT_POLLING_INTERVAL);\n        handler.enabledNotifications();\n        this._subscriptions.set(address, subscription);\n        return subscription;\n    }\n    async _tryUnsubscribe(address) {\n        const subscriptionState = this._subscriptionStates.get(address);\n        const sendMessageRequests = this._sendMessageRequests.get(address);\n        if (subscriptionState == null && ((sendMessageRequests === null || sendMessageRequests === void 0 ? void 0 : sendMessageRequests.size) || 0) == 0) {\n            const subscription = this._subscriptions.get(address);\n            this._subscriptions.delete(address);\n            await (subscription === null || subscription === void 0 ? void 0 : subscription.stop());\n        }\n    }\n    async _rejectMessageRequest(address, id, error) {\n        this._deleteMessageRequestAndGetCallback(address, id).reject(error);\n        await this._subscriptionsMutex.use(async () => this._tryUnsubscribe(address));\n    }\n    async _resolveMessageRequest(address, id, transaction) {\n        this._deleteMessageRequestAndGetCallback(address, id).resolve(transaction);\n        await this._subscriptionsMutex.use(async () => this._tryUnsubscribe(address));\n    }\n    _notifyStateChanged(address, state) {\n        const subscriptionState = this._subscriptionStates.get(address);\n        if (subscriptionState === null || subscriptionState === void 0 ? void 0 : subscriptionState.client.state) {\n            this._notify('contractStateChanged', {\n                address,\n                state,\n            });\n        }\n    }\n    _notifyTransactionsFound(address, transactions, info) {\n        const subscriptionState = this._subscriptionStates.get(address);\n        if (subscriptionState === null || subscriptionState === void 0 ? void 0 : subscriptionState.client.transactions) {\n            this._notify('transactionsFound', {\n                address,\n                transactions,\n                info,\n            });\n        }\n    }\n    _deleteMessageRequestAndGetCallback(address, id) {\n        var _a;\n        const callbacks = (_a = this._sendMessageRequests.get(address)) === null || _a === void 0 ? void 0 : _a.get(id);\n        if (!callbacks) {\n            throw new Error(`SendMessage request with id '${id}' not found`);\n        }\n        this._deleteMessageRequest(address, id);\n        return callbacks;\n    }\n    _deleteMessageRequest(address, id) {\n        const accountMessageRequests = this._sendMessageRequests.get(address);\n        if (!accountMessageRequests) {\n            return;\n        }\n        accountMessageRequests.delete(id);\n        if (accountMessageRequests.size == 0) {\n            this._sendMessageRequests.delete(address);\n        }\n    }\n}\nexports.SubscriptionController = SubscriptionController;\nconst makeDefaultSubscriptionState = () => ({\n    internal: new Map(),\n    client: {\n        state: false,\n        transactions: false,\n    },\n});\nconst isEmptySubscription = (params) => !params.state && !params.transactions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///536\n")},334:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ContractSubscription = void 0;\nconst await_semaphore_1 = __webpack_require__(68);\nconst core_1 = __importDefault(__webpack_require__(521));\nconst { nekoton, debugLog } = core_1.default;\nclass ContractSubscription {\n    constructor(connection, release, address, contract) {\n        this._contractMutex = new await_semaphore_1.Mutex();\n        this._pollingInterval = BACKGROUND_POLLING_INTERVAL;\n        this._isRunning = false;\n        this._connection = connection;\n        this._address = address;\n        this._contract = contract;\n        this._releaseTransport = release;\n        this._currentPollingMethod = contract.pollingMethod;\n    }\n    static async subscribe(connectionController, address, handler) {\n        const { transport: { data: { connection, transport } }, release, } = await connectionController.acquire();\n        try {\n            const contract = await transport.subscribeToGenericContract(address, handler);\n            if (contract == null) {\n                throw new Error(`Failed to subscribe to contract: ${address}`);\n            }\n            return new ContractSubscription(connection, release, address, contract);\n        }\n        catch (e) {\n            release();\n            throw e;\n        }\n    }\n    setPollingInterval(interval) {\n        this._pollingInterval = interval;\n    }\n    async start() {\n        if (this._releaseTransport == null) {\n            throw new Error('Contract subscription must not be started after being closed');\n        }\n        if (this._loopPromise) {\n            debugLog('ContractSubscription -> awaiting loop promise');\n            await this._loopPromise;\n        }\n        debugLog('ContractSubscription -> loop started');\n        this._loopPromise = (async () => {\n            const isSimple = !(this._connection instanceof nekoton.GqlConnection);\n            this._isRunning = true;\n            let previousPollingMethod = this._currentPollingMethod;\n            while (this._isRunning) {\n                const pollingMethodChanged = previousPollingMethod != this._currentPollingMethod;\n                previousPollingMethod = this._currentPollingMethod;\n                if (isSimple || this._currentPollingMethod == 'manual') {\n                    this._currentBlockId = undefined;\n                    debugLog('ContractSubscription -> manual -> waiting begins');\n                    const pollingInterval = this._currentPollingMethod == 'manual'\n                        ? this._pollingInterval\n                        : INTENSIVE_POLLING_INTERVAL;\n                    await new Promise((resolve) => {\n                        const timerHandle = setTimeout(() => {\n                            this._refreshTimer = undefined;\n                            resolve();\n                        }, pollingInterval);\n                        this._refreshTimer = [timerHandle, resolve];\n                    });\n                    debugLog('ContractSubscription -> manual -> waiting ends');\n                    if (!this._isRunning) {\n                        break;\n                    }\n                    debugLog('ContractSubscription -> manual -> refreshing begins');\n                    try {\n                        this._currentPollingMethod = await this._contractMutex.use(async () => {\n                            await this._contract.refresh();\n                            return this._contract.pollingMethod;\n                        });\n                    }\n                    catch (e) {\n                        console.error(`Error during account refresh (${this._address})`, e);\n                    }\n                    debugLog('ContractSubscription -> manual -> refreshing ends');\n                }\n                else {\n                    // SAFETY: connection is always GqlConnection here due to `isSimple`\n                    const connection = this._connection;\n                    debugLog('ContractSubscription -> reliable start');\n                    if (pollingMethodChanged && this._suggestedBlockId != null) {\n                        this._currentBlockId = this._suggestedBlockId;\n                    }\n                    this._suggestedBlockId = undefined;\n                    let nextBlockId;\n                    if (this._currentBlockId == null) {\n                        console.warn('Starting reliable connection with unknown block');\n                        try {\n                            const latestBlock = await connection.getLatestBlock(this._address);\n                            this._currentBlockId = latestBlock.id;\n                            nextBlockId = this._currentBlockId;\n                        }\n                        catch (e) {\n                            console.error(`Failed to get latest block for ${this._address}`, e);\n                            continue;\n                        }\n                    }\n                    else {\n                        try {\n                            nextBlockId = await connection.waitForNextBlock(this._currentBlockId, this._address, NEXT_BLOCK_TIMEOUT);\n                        }\n                        catch (e) {\n                            console.error(`Failed to wait for next block for ${this._address}`);\n                            continue; // retry\n                        }\n                    }\n                    try {\n                        this._currentPollingMethod = await this._contractMutex.use(async () => {\n                            await this._contract.handleBlock(nextBlockId);\n                            return this._contract.pollingMethod;\n                        });\n                        this._currentBlockId = nextBlockId;\n                    }\n                    catch (e) {\n                        console.error(`Failed to handle block for ${this._address}`, e);\n                    }\n                }\n            }\n            debugLog('ContractSubscription -> loop finished');\n        })();\n    }\n    skipRefreshTimer() {\n        var _a, _b;\n        clearTimeout((_a = this._refreshTimer) === null || _a === void 0 ? void 0 : _a[0]);\n        (_b = this._refreshTimer) === null || _b === void 0 ? void 0 : _b[1]();\n        this._refreshTimer = undefined;\n    }\n    async pause() {\n        if (!this._isRunning) {\n            return;\n        }\n        this._isRunning = false;\n        this.skipRefreshTimer();\n        await this._loopPromise;\n        this._loopPromise = undefined;\n        this._currentPollingMethod = await this._contractMutex.use(async () => {\n            return this._contract.pollingMethod;\n        });\n        this._currentBlockId = undefined;\n        this._suggestedBlockId = undefined;\n    }\n    async stop() {\n        var _a;\n        await this.pause();\n        this._contract.free();\n        (_a = this._releaseTransport) === null || _a === void 0 ? void 0 : _a.call(this);\n        this._releaseTransport = undefined;\n    }\n    async prepareReliablePolling() {\n        try {\n            if (this._connection instanceof nekoton.GqlConnection) {\n                this._suggestedBlockId = (await this._connection.getLatestBlock(this._address)).id;\n            }\n        }\n        catch (e) {\n            throw new Error(`Failed to prepare reliable polling: ${e.toString()}`);\n        }\n    }\n    async use(f) {\n        const release = await this._contractMutex.acquire();\n        return f(this._contract)\n            .then((res) => {\n            release();\n            return res;\n        })\n            .catch((err) => {\n            release();\n            throw err;\n        });\n    }\n}\nexports.ContractSubscription = ContractSubscription;\nconst NEXT_BLOCK_TIMEOUT = 60; // 60s\nconst INTENSIVE_POLLING_INTERVAL = 2000; // 2s\nconst BACKGROUND_POLLING_INTERVAL = 60000;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///334\n")},241:(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.Clock = void 0;\n/**\n * Wrapper around clocks which are used in `EverscaleStandaloneClient` instances\n *\n * @category Client\n */\nclass Clock {\n    constructor(offset) {\n        this.impls = [];\n        this.currentOffset = 0;\n        if (offset != null) {\n            this.currentOffset = offset;\n        }\n    }\n    /**\n     * Clock offset in milliseconds\n     */\n    get offset() {\n        return this.currentOffset;\n    }\n    /**\n     * Set clock offset in milliseconds\n     */\n    set offset(value) {\n        this.currentOffset = value;\n        for (const impl of this.impls) {\n            impl.updateOffset(this.currentOffset);\n        }\n    }\n    /**\n     * Returns current time in milliseconds\n     */\n    get time() {\n        return new Date().getTime() + this.offset;\n    }\n    /**\n     * Detaches all affected providers\n     *\n     * NOTE: affected providers offset remains the same\n     */\n    detach() {\n        this.impls = [];\n    }\n}\nexports.Clock = Clock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMjQxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2V2ZXJzY2FsZS1zdGFuZGFsb25lLWNsaWVudC9jbGllbnQvY2xvY2suanM/MzZhYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ2xvY2sgPSB2b2lkIDA7XG4vKipcbiAqIFdyYXBwZXIgYXJvdW5kIGNsb2NrcyB3aGljaCBhcmUgdXNlZCBpbiBgRXZlcnNjYWxlU3RhbmRhbG9uZUNsaWVudGAgaW5zdGFuY2VzXG4gKlxuICogQGNhdGVnb3J5IENsaWVudFxuICovXG5jbGFzcyBDbG9jayB7XG4gICAgY29uc3RydWN0b3Iob2Zmc2V0KSB7XG4gICAgICAgIHRoaXMuaW1wbHMgPSBbXTtcbiAgICAgICAgdGhpcy5jdXJyZW50T2Zmc2V0ID0gMDtcbiAgICAgICAgaWYgKG9mZnNldCAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLmN1cnJlbnRPZmZzZXQgPSBvZmZzZXQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvY2sgb2Zmc2V0IGluIG1pbGxpc2Vjb25kc1xuICAgICAqL1xuICAgIGdldCBvZmZzZXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmN1cnJlbnRPZmZzZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldCBjbG9jayBvZmZzZXQgaW4gbWlsbGlzZWNvbmRzXG4gICAgICovXG4gICAgc2V0IG9mZnNldCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnRPZmZzZXQgPSB2YWx1ZTtcbiAgICAgICAgZm9yIChjb25zdCBpbXBsIG9mIHRoaXMuaW1wbHMpIHtcbiAgICAgICAgICAgIGltcGwudXBkYXRlT2Zmc2V0KHRoaXMuY3VycmVudE9mZnNldCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjdXJyZW50IHRpbWUgaW4gbWlsbGlzZWNvbmRzXG4gICAgICovXG4gICAgZ2V0IHRpbWUoKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0ZSgpLmdldFRpbWUoKSArIHRoaXMub2Zmc2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZXRhY2hlcyBhbGwgYWZmZWN0ZWQgcHJvdmlkZXJzXG4gICAgICpcbiAgICAgKiBOT1RFOiBhZmZlY3RlZCBwcm92aWRlcnMgb2Zmc2V0IHJlbWFpbnMgdGhlIHNhbWVcbiAgICAgKi9cbiAgICBkZXRhY2goKSB7XG4gICAgICAgIHRoaXMuaW1wbHMgPSBbXTtcbiAgICB9XG59XG5leHBvcnRzLkNsb2NrID0gQ2xvY2s7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///241\n')},637:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EverscaleStandaloneClient = exports.SUPPORTED_PERMISSIONS = exports.VERSION = exports.DEFAULT_CLIENT_PROPERTIES = exports.Clock = exports.SimpleKeystore = exports.checkConnection = exports.ConnectionError = exports.NETWORK_PRESETS = void 0;\nconst fast_safe_stringify_1 = __importDefault(__webpack_require__(445));\nconst core_1 = __importDefault(__webpack_require__(521));\nconst utils_1 = __webpack_require__(344);\nconst ConnectionController_1 = __webpack_require__(863);\nconst SubscriptionController_1 = __webpack_require__(536);\nconst AccountsStorage_1 = __webpack_require__(487);\nvar ConnectionController_2 = __webpack_require__(863);\nObject.defineProperty(exports, \"NETWORK_PRESETS\", ({ enumerable: true, get: function () { return ConnectionController_2.NETWORK_PRESETS; } }));\nvar ConnectionController_3 = __webpack_require__(863);\nObject.defineProperty(exports, \"ConnectionError\", ({ enumerable: true, get: function () { return ConnectionController_3.ConnectionError; } }));\nObject.defineProperty(exports, \"checkConnection\", ({ enumerable: true, get: function () { return ConnectionController_3.checkConnection; } }));\n__exportStar(__webpack_require__(487), exports);\nvar keystore_1 = __webpack_require__(837);\nObject.defineProperty(exports, \"SimpleKeystore\", ({ enumerable: true, get: function () { return keystore_1.SimpleKeystore; } }));\nvar clock_1 = __webpack_require__(241);\nObject.defineProperty(exports, \"Clock\", ({ enumerable: true, get: function () { return clock_1.Clock; } }));\nconst { ensureNekotonLoaded, nekoton } = core_1.default;\nfunction validateMessageProperties(message) {\n    const m = message || {};\n    return {\n        retryCount: m.retryCount != null ? Math.max(1, ~~m.retryCount) : 5,\n        timeout: m.timeout != null ? Math.max(1, ~~m.timeout) : 60,\n        timeoutGrowFactor: m.timeoutGrowFactor || 1.2,\n        retryTransfers: true,\n    };\n}\n/**\n * @category Client\n */\nexports.DEFAULT_CLIENT_PROPERTIES = {\n    connection: ConnectionController_1.DEFAULT_NETWORK_GROUP,\n};\n/**\n * @category Client\n */\nexports.VERSION = '0.2.25';\n/**\n * @category Client\n */\nexports.SUPPORTED_PERMISSIONS = ['basic', 'accountInteraction'];\n/**\n * @category Client\n */\nclass EverscaleStandaloneClient extends utils_1.SafeEventEmitter {\n    constructor(ctx) {\n        super();\n        this._handlers = {\n            requestPermissions,\n            changeAccount,\n            disconnect,\n            subscribe,\n            unsubscribe,\n            unsubscribeAll,\n            getProviderState,\n            getFullContractState,\n            getAccountsByCodeHash,\n            getTransactions,\n            getTransaction,\n            findTransaction,\n            runLocal,\n            getExpectedAddress,\n            getBocHash,\n            packIntoCell,\n            unpackFromCell,\n            extractPublicKey,\n            codeToTvc,\n            mergeTvc,\n            splitTvc,\n            setCodeSalt,\n            getCodeSalt,\n            encodeInternalInput,\n            decodeInput,\n            decodeOutput,\n            decodeEvent,\n            decodeTransaction,\n            decodeTransactionEvents,\n            verifySignature,\n            sendUnsignedExternalMessage,\n            // addAsset, // not supported\n            signData,\n            signDataRaw,\n            // encryptData, // not supported\n            // decryptData, // not supported\n            // estimateFees, // not supported\n            sendMessage,\n            sendMessageDelayed,\n            sendExternalMessage,\n            sendExternalMessageDelayed,\n        };\n        this._context = ctx;\n    }\n    static async create(params) {\n        await ensureNekotonLoaded(params.initInput);\n        // NOTE: capture client inside notify using wrapper object\n        const notificationContext = {};\n        const notify = (method, params) => {\n            var _a;\n            (_a = notificationContext.client) === null || _a === void 0 ? void 0 : _a.emit(method, params);\n        };\n        const clock = new core_1.default.nekoton.ClockWithOffset();\n        if (params.clock != null) {\n            params.clock['impls'].push(clock);\n            clock.updateOffset(params.clock.offset);\n        }\n        try {\n            const connectionController = await (0, ConnectionController_1.createConnectionController)(clock, params.connection);\n            const subscriptionController = new SubscriptionController_1.SubscriptionController(connectionController, notify);\n            const client = new EverscaleStandaloneClient({\n                permissions: {},\n                connectionController,\n                subscriptionController,\n                properties: {\n                    message: validateMessageProperties(params.message),\n                },\n                keystore: params.keystore,\n                accountsStorage: params.accountsStorage,\n                clock,\n                notify,\n            });\n            // NOTE: WeakRef is not working here, so hope it will be garbage collected\n            notificationContext.client = client;\n            return client;\n        }\n        catch (e) {\n            if (params.clock != null) {\n                params.clock['impls'].pop();\n            }\n            clock.free();\n            throw e;\n        }\n    }\n    request(req) {\n        const handler = this._handlers[req.method];\n        if (handler == null) {\n            throw invalidRequest(req, `Method '${req.method}' is not supported by standalone provider`);\n        }\n        return handler(this._context, req);\n    }\n    addListener(eventName, listener) {\n        return super.addListener(eventName, listener);\n    }\n    removeListener(eventName, listener) {\n        return super.removeListener(eventName, listener);\n    }\n    on(eventName, listener) {\n        return super.on(eventName, listener);\n    }\n    once(eventName, listener) {\n        return super.once(eventName, listener);\n    }\n    prependListener(eventName, listener) {\n        return super.prependListener(eventName, listener);\n    }\n    prependOnceListener(eventName, listener) {\n        return super.prependOnceListener(eventName, listener);\n    }\n}\nexports.EverscaleStandaloneClient = EverscaleStandaloneClient;\nconst requestPermissions = async (ctx, req) => {\n    requireParams(req);\n    const { permissions } = req.params;\n    requireArray(req, req.params, 'permissions');\n    const newPermissions = { ...ctx.permissions };\n    for (const permission of permissions) {\n        if (permission === 'basic' || permission === 'tonClient') {\n            newPermissions.basic = true;\n        }\n        else if (permission === 'accountInteraction') {\n            if (newPermissions.accountInteraction != null) {\n                continue;\n            }\n            newPermissions.accountInteraction = await makeAccountInteractionPermission(req, ctx);\n        }\n        else {\n            throw invalidRequest(req, `Permission '${permission}' is not supported by standalone provider`);\n        }\n    }\n    ctx.permissions = newPermissions;\n    // NOTE: be sure to return object copy to prevent adding new permissions\n    const permissionsCopy = JSON.parse(JSON.stringify(newPermissions));\n    ctx.notify('permissionsChanged', {\n        permissions: permissionsCopy,\n    });\n    return permissionsCopy;\n};\nconst changeAccount = async (ctx, req) => {\n    requireAccountsStorage(req, ctx);\n    const newPermissions = { ...ctx.permissions };\n    newPermissions.accountInteraction = await makeAccountInteractionPermission(req, ctx);\n    ctx.permissions = newPermissions;\n    // NOTE: be sure to return object copy to prevent adding new permissions\n    const permissionsCopy = JSON.parse(JSON.stringify(newPermissions));\n    ctx.notify('permissionsChanged', {\n        permissions: permissionsCopy,\n    });\n    return permissionsCopy;\n};\nconst disconnect = async (ctx, _req) => {\n    ctx.permissions = {};\n    await ctx.subscriptionController.unsubscribeFromAllContracts();\n    ctx.notify('permissionsChanged', { permissions: {} });\n    return undefined;\n};\nconst subscribe = async (ctx, req) => {\n    requireParams(req);\n    const { address, subscriptions } = req.params;\n    requireString(req, req.params, 'address');\n    requireOptionalObject(req, req.params, 'subscriptions');\n    let repackedAddress;\n    try {\n        repackedAddress = nekoton.repackAddress(address);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    try {\n        return await ctx.subscriptionController.subscribeToContract(repackedAddress, subscriptions);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst unsubscribe = async (ctx, req) => {\n    requireParams(req);\n    const { address } = req.params;\n    requireString(req, req.params, 'address');\n    let repackedAddress;\n    try {\n        repackedAddress = nekoton.repackAddress(address);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    await ctx.subscriptionController.unsubscribeFromContract(repackedAddress);\n    return undefined;\n};\nconst unsubscribeAll = async (ctx, _req) => {\n    await ctx.subscriptionController.unsubscribeFromAllContracts();\n    return undefined;\n};\nconst getProviderState = async (ctx, req) => {\n    const transport = ctx.connectionController.initializedTransport;\n    if (transport == null) {\n        throw invalidRequest(req, 'Connection controller was not initialized');\n    }\n    const version = exports.VERSION;\n    return {\n        version,\n        numericVersion: (0, utils_1.convertVersionToInt32)(version),\n        networkId: transport.id,\n        selectedConnection: transport.group,\n        supportedPermissions: [...exports.SUPPORTED_PERMISSIONS],\n        permissions: JSON.parse(JSON.stringify(ctx.permissions)),\n        subscriptions: ctx.subscriptionController.subscriptionStates,\n    };\n};\nconst getFullContractState = async (ctx, req) => {\n    requireParams(req);\n    const { address } = req.params;\n    requireString(req, req.params, 'address');\n    const { connectionController } = ctx;\n    try {\n        return connectionController.use(async ({ data: { transport } }) => ({\n            state: await transport.getFullContractState(address),\n        }));\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getAccountsByCodeHash = async (ctx, req) => {\n    requireParams(req);\n    const { codeHash, limit, continuation } = req.params;\n    requireString(req, req.params, 'codeHash');\n    requireOptionalNumber(req, req.params, 'limit');\n    requireOptionalString(req, req.params, 'continuation');\n    const { connectionController } = ctx;\n    try {\n        return connectionController.use(({ data: { transport } }) => transport.getAccountsByCodeHash(codeHash, limit || 50, continuation));\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getTransactions = async (ctx, req) => {\n    requireParams(req);\n    const { address, continuation, limit } = req.params;\n    requireString(req, req.params, 'address');\n    requireOptional(req, req.params, 'continuation', requireTransactionId);\n    requireOptionalNumber(req, req.params, 'limit');\n    const { connectionController } = ctx;\n    try {\n        return connectionController.use(({ data: { transport } }) => transport.getTransactions(address, continuation === null || continuation === void 0 ? void 0 : continuation.lt, limit || 50));\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getTransaction = async (ctx, req) => {\n    requireParams(req);\n    const { hash } = req.params;\n    requireString(req, req.params, 'hash');\n    const { connectionController } = ctx;\n    try {\n        return {\n            transaction: await connectionController.use(({ data: { transport } }) => transport.getTransaction(hash)),\n        };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst findTransaction = async (ctx, req) => {\n    requireParams(req);\n    const { inMessageHash } = req.params;\n    requireOptional(req, req.params, 'inMessageHash', requireString);\n    const { connectionController } = ctx;\n    // TODO: add more filters\n    if (inMessageHash == null) {\n        return {\n            transaction: undefined,\n        };\n    }\n    try {\n        return {\n            transaction: await connectionController.use(({ data: { transport } }) => transport.getDstTransaction(inMessageHash)),\n        };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst runLocal = async (ctx, req) => {\n    requireParams(req);\n    const { address, cachedState, responsible, functionCall } = req.params;\n    requireString(req, req.params, 'address');\n    requireOptional(req, req.params, 'cachedState', requireContractState);\n    requireOptionalBoolean(req, req.params, 'responsible');\n    requireFunctionCall(req, req.params, 'functionCall');\n    const { clock, connectionController } = ctx;\n    let contractState = cachedState;\n    if (contractState == null) {\n        contractState = await connectionController.use(async ({ data: { transport } }) => transport.getFullContractState(address));\n    }\n    if (contractState == null) {\n        throw invalidRequest(req, 'Account not found');\n    }\n    if (!contractState.isDeployed || contractState.lastTransactionId == null) {\n        throw invalidRequest(req, 'Account is not deployed');\n    }\n    try {\n        const { output, code } = nekoton.runLocal(clock, contractState.boc, functionCall.abi, functionCall.method, functionCall.params, responsible || false);\n        return { output, code };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getExpectedAddress = async (_ctx, req) => {\n    requireParams(req);\n    const { tvc, abi, workchain, publicKey, initParams } = req.params;\n    requireString(req, req.params, 'tvc');\n    requireString(req, req.params, 'abi');\n    requireOptionalNumber(req, req.params, 'workchain');\n    requireOptionalString(req, req.params, 'publicKey');\n    try {\n        return nekoton.getExpectedAddress(tvc, abi, workchain || 0, publicKey, initParams);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getBocHash = async (_ctx, req) => {\n    requireParams(req);\n    const { boc } = req.params;\n    requireString(req, req.params, 'boc');\n    try {\n        return { hash: nekoton.getBocHash(boc) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst packIntoCell = async (_ctx, req) => {\n    requireParams(req);\n    const { structure, data, abiVersion } = req.params;\n    requireArray(req, req.params, 'structure');\n    requireOptional(req, req.params, 'abiVersion', requireString);\n    try {\n        return { boc: nekoton.packIntoCell(structure, data, abiVersion) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst unpackFromCell = async (_ctx, req) => {\n    requireParams(req);\n    const { structure, boc, allowPartial, abiVersion } = req.params;\n    requireArray(req, req.params, 'structure');\n    requireString(req, req.params, 'boc');\n    requireBoolean(req, req.params, 'allowPartial');\n    requireOptional(req, req.params, 'abiVersion', requireString);\n    try {\n        return { data: nekoton.unpackFromCell(structure, boc, allowPartial, abiVersion) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst extractPublicKey = async (_ctx, req) => {\n    requireParams(req);\n    const { boc } = req.params;\n    requireString(req, req.params, 'boc');\n    try {\n        return { publicKey: nekoton.extractPublicKey(boc) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst codeToTvc = async (_ctx, req) => {\n    requireParams(req);\n    const { code } = req.params;\n    requireString(req, req.params, 'code');\n    try {\n        return { tvc: nekoton.codeToTvc(code) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst mergeTvc = async (_ctx, req) => {\n    requireParams(req);\n    const { code, data } = req.params;\n    requireString(req, req.params, 'code');\n    requireString(req, req.params, 'data');\n    try {\n        return { tvc: nekoton.mergeTvc(code, data) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst splitTvc = async (_ctx, req) => {\n    requireParams(req);\n    const { tvc } = req.params;\n    requireString(req, req.params, 'tvc');\n    try {\n        return nekoton.splitTvc(tvc);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst setCodeSalt = async (_ctx, req) => {\n    requireParams(req);\n    const { code, salt } = req.params;\n    requireString(req, req.params, 'code');\n    requireString(req, req.params, 'salt');\n    try {\n        return { code: nekoton.setCodeSalt(code, salt) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getCodeSalt = async (_ctx, req) => {\n    requireParams(req);\n    const { code } = req.params;\n    requireString(req, req.params, 'code');\n    try {\n        return { salt: nekoton.getCodeSalt(code) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst encodeInternalInput = async (_ctx, req) => {\n    requireParams(req);\n    requireFunctionCall(req, req, 'params');\n    const { abi, method, params } = req.params;\n    try {\n        return { boc: nekoton.encodeInternalInput(abi, method, params) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst decodeInput = async (_ctx, req) => {\n    requireParams(req);\n    const { body, abi, method, internal } = req.params;\n    requireString(req, req.params, 'body');\n    requireString(req, req.params, 'abi');\n    requireMethodOrArray(req, req.params, 'method');\n    requireBoolean(req, req.params, 'internal');\n    try {\n        return nekoton.decodeInput(body, abi, method, internal) || null;\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst decodeOutput = async (_ctx, req) => {\n    requireParams(req);\n    const { body, abi, method } = req.params;\n    requireString(req, req.params, 'body');\n    requireString(req, req.params, 'abi');\n    requireMethodOrArray(req, req.params, 'method');\n    try {\n        return nekoton.decodeOutput(body, abi, method) || null;\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst decodeEvent = async (_ctx, req) => {\n    requireParams(req);\n    const { body, abi, event } = req.params;\n    requireString(req, req.params, 'body');\n    requireString(req, req.params, 'abi');\n    requireMethodOrArray(req, req.params, 'event');\n    try {\n        return nekoton.decodeEvent(body, abi, event) || null;\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst decodeTransaction = async (_ctx, req) => {\n    requireParams(req);\n    const { transaction, abi, method } = req.params;\n    requireString(req, req.params, 'abi');\n    requireMethodOrArray(req, req.params, 'method');\n    try {\n        return nekoton.decodeTransaction(transaction, abi, method) || null;\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst decodeTransactionEvents = async (_ctx, req) => {\n    requireParams(req);\n    const { transaction, abi } = req.params;\n    requireString(req, req.params, 'abi');\n    try {\n        return { events: nekoton.decodeTransactionEvents(transaction, abi) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst verifySignature = async (_ctx, req) => {\n    requireParams(req);\n    const { publicKey, dataHash, signature } = req.params;\n    requireString(req, req.params, 'publicKey');\n    requireString(req, req.params, 'dataHash');\n    requireString(req, req.params, 'signature');\n    try {\n        return { isValid: nekoton.verifySignature(publicKey, dataHash, signature) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst sendUnsignedExternalMessage = async (ctx, req) => {\n    requireParams(req);\n    const { recipient, stateInit, payload, local } = req.params;\n    requireString(req, req.params, 'recipient');\n    requireOptionalString(req, req.params, 'stateInit');\n    requireOptionalRawFunctionCall(req, req.params, 'payload');\n    requireOptionalBoolean(req, req.params, 'local');\n    let repackedRecipient;\n    try {\n        repackedRecipient = nekoton.repackAddress(recipient);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    const { clock, subscriptionController, properties } = ctx;\n    const makeSignedMessage = (timeout) => {\n        try {\n            if (typeof payload === 'string' || payload == null) {\n                const expireAt = ~~(clock.nowMs / 1000) + timeout;\n                return nekoton.createRawExternalMessage(repackedRecipient, stateInit, payload, expireAt);\n            }\n            else {\n                return nekoton.createExternalMessageWithoutSignature(clock, repackedRecipient, payload.abi, payload.method, stateInit, payload.params, timeout);\n            }\n        }\n        catch (e) {\n            throw invalidRequest(req, e.toString());\n        }\n    };\n    const handleTransaction = (transaction) => {\n        let output;\n        try {\n            if (typeof payload === 'object' && typeof payload != null) {\n                const decoded = nekoton.decodeTransaction(transaction, payload.abi, payload.method);\n                output = decoded === null || decoded === void 0 ? void 0 : decoded.output;\n            }\n        }\n        catch (_) { /* do nothing */\n        }\n        return { transaction, output };\n    };\n    // Force local execution\n    if (local === true) {\n        const signedMessage = makeSignedMessage(60);\n        const transaction = await subscriptionController.sendMessageLocally(repackedRecipient, signedMessage);\n        return handleTransaction(transaction);\n    }\n    // Send and wait with several retries\n    let timeout = properties.message.timeout;\n    for (let retry = 0; retry < properties.message.retryCount; ++retry) {\n        const signedMessage = makeSignedMessage(timeout);\n        const transaction = await subscriptionController.sendMessage(repackedRecipient, signedMessage);\n        if (transaction == null) {\n            timeout *= properties.message.timeoutGrowFactor;\n            continue;\n        }\n        return handleTransaction(transaction);\n    }\n    // Execute locally\n    const errorMessage = 'Message expired';\n    const signedMessage = makeSignedMessage(60);\n    const transaction = await subscriptionController.sendMessageLocally(repackedRecipient, signedMessage)\n        .catch((e) => {\n        throw invalidRequest(req, `${errorMessage}. ${e.toString()}`);\n    });\n    const additionalText = transaction.exitCode != null ? `. Possible exit code: ${transaction.exitCode}` : '';\n    throw invalidRequest(req, `${errorMessage}${additionalText}`);\n};\nconst signData = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireParams(req);\n    const { publicKey, data } = req.params;\n    requireString(req, req.params, 'publicKey');\n    requireString(req, req.params, 'data');\n    const { keystore } = ctx;\n    const signer = await keystore.getSigner(publicKey);\n    if (signer == null) {\n        throw invalidRequest(req, 'Signer not found for public key');\n    }\n    try {\n        const dataHash = nekoton.getDataHash(data);\n        return {\n            dataHash,\n            ...(await signer.sign(dataHash).then(nekoton.extendSignature)),\n        };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst signDataRaw = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireParams(req);\n    const { publicKey, data } = req.params;\n    requireString(req, req.params, 'publicKey');\n    requireString(req, req.params, 'data');\n    const { keystore } = ctx;\n    const signer = await keystore.getSigner(publicKey);\n    if (signer == null) {\n        throw invalidRequest(req, 'Signer not found for public key');\n    }\n    try {\n        return await signer.sign(data).then(nekoton.extendSignature);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst sendMessage = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireAccountsStorage(req, ctx);\n    requireParams(req);\n    const { sender, recipient, amount, bounce, payload } = req.params;\n    requireString(req, req.params, 'sender');\n    requireString(req, req.params, 'recipient');\n    requireString(req, req.params, 'amount');\n    requireBoolean(req, req.params, 'bounce');\n    requireOptional(req, req.params, 'payload', requireFunctionCall);\n    const { clock, properties, subscriptionController, connectionController, keystore, accountsStorage } = ctx;\n    let repackedSender;\n    let repackedRecipient;\n    let account;\n    try {\n        repackedSender = nekoton.repackAddress(sender);\n        repackedRecipient = nekoton.repackAddress(recipient);\n        account = await accountsStorage.getAccount(repackedSender).then((account) => {\n            if (account != null) {\n                return account;\n            }\n            else {\n                throw new Error('Sender not found');\n            }\n        });\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    const makeSignedMessage = async (timeout) => {\n        try {\n            return account.prepareMessage({\n                recipient: repackedRecipient,\n                amount,\n                bounce,\n                payload,\n                stateInit: undefined,\n                timeout,\n            }, new AccountsStorage_1.AccountsStorageContext(clock, connectionController, nekoton, keystore));\n        }\n        catch (e) {\n            throw invalidRequest(req, e.toString());\n        }\n    };\n    // Send and wait with several retries\n    let timeout = properties.message.timeout;\n    // Set `retryCount` if not explicitly disabled\n    const retryCount = properties.message.retryTransfers !== false ? properties.message.retryCount : 1;\n    for (let retry = 0; retry < retryCount; ++retry) {\n        const signedMessage = await makeSignedMessage(timeout);\n        const transaction = await subscriptionController.sendMessage(repackedSender, signedMessage);\n        if (transaction == null) {\n            timeout *= properties.message.timeoutGrowFactor;\n            continue;\n        }\n        return { transaction };\n    }\n    // Execute locally\n    const errorMessage = 'Message expired';\n    const signedMessage = await makeSignedMessage(60);\n    const transaction = await subscriptionController.sendMessageLocally(repackedSender, signedMessage)\n        .catch((e) => {\n        throw invalidRequest(req, `${errorMessage}. ${e.toString()}`);\n    });\n    const additionalText = transaction.exitCode != null ? `. Possible exit code: ${transaction.exitCode}` : '';\n    throw invalidRequest(req, `${errorMessage}${additionalText}`);\n};\nconst sendMessageDelayed = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireAccountsStorage(req, ctx);\n    requireParams(req);\n    const { sender, recipient, amount, bounce, payload } = req.params;\n    requireString(req, req.params, 'sender');\n    requireString(req, req.params, 'recipient');\n    requireString(req, req.params, 'amount');\n    requireBoolean(req, req.params, 'bounce');\n    requireOptional(req, req.params, 'payload', requireFunctionCall);\n    const { clock, subscriptionController, connectionController, keystore, accountsStorage, notify } = ctx;\n    let repackedSender;\n    let repackedRecipient;\n    try {\n        repackedSender = nekoton.repackAddress(sender);\n        repackedRecipient = nekoton.repackAddress(recipient);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    let signedMessage;\n    try {\n        const account = await accountsStorage.getAccount(repackedSender);\n        if (account == null) {\n            throw new Error('Sender not found');\n        }\n        signedMessage = await account.prepareMessage({\n            recipient: repackedRecipient,\n            amount,\n            bounce,\n            payload,\n            stateInit: undefined,\n            timeout: 60, // TEMP\n        }, new AccountsStorage_1.AccountsStorageContext(clock, connectionController, nekoton, keystore));\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    subscriptionController.sendMessage(repackedSender, signedMessage)\n        .then(transaction => {\n        notify('messageStatusUpdated', {\n            address: repackedSender,\n            hash: signedMessage.hash,\n            transaction,\n        });\n    })\n        .catch(console.error);\n    return {\n        message: {\n            account: repackedSender,\n            hash: signedMessage.hash,\n            expireAt: signedMessage.expireAt,\n        },\n    };\n};\nconst sendExternalMessage = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireParams(req);\n    const { publicKey, recipient, stateInit, payload, local } = req.params;\n    requireString(req, req.params, 'publicKey');\n    requireString(req, req.params, 'recipient');\n    requireOptionalString(req, req.params, 'stateInit');\n    requireFunctionCall(req, req.params, 'payload');\n    requireOptionalBoolean(req, req.params, 'local');\n    let repackedRecipient;\n    try {\n        repackedRecipient = nekoton.repackAddress(recipient);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    const { clock, subscriptionController, keystore, properties } = ctx;\n    const signer = await keystore.getSigner(publicKey);\n    if (signer == null) {\n        throw invalidRequest(req, 'Signer not found for public key');\n    }\n    const makeSignedMessage = async (timeout) => {\n        let unsignedMessage;\n        try {\n            unsignedMessage = nekoton.createExternalMessage(clock, repackedRecipient, payload.abi, payload.method, stateInit, payload.params, publicKey, timeout);\n        }\n        catch (e) {\n            throw invalidRequest(req, e.toString());\n        }\n        try {\n            const signature = await signer.sign(unsignedMessage.hash);\n            return unsignedMessage.sign(signature);\n        }\n        catch (e) {\n            throw invalidRequest(req, e.toString());\n        }\n        finally {\n            unsignedMessage.free();\n        }\n    };\n    const handleTransaction = (transaction) => {\n        let output;\n        try {\n            const decoded = nekoton.decodeTransaction(transaction, payload.abi, payload.method);\n            output = decoded === null || decoded === void 0 ? void 0 : decoded.output;\n        }\n        catch (_) { /* do nothing */\n        }\n        return { transaction, output };\n    };\n    // Force local execution\n    if (local === true) {\n        const signedMessage = await makeSignedMessage(60);\n        const transaction = await subscriptionController.sendMessageLocally(repackedRecipient, signedMessage);\n        return handleTransaction(transaction);\n    }\n    // Send and wait with several retries\n    let timeout = properties.message.timeout;\n    for (let retry = 0; retry < properties.message.retryCount; ++retry) {\n        const signedMessage = await makeSignedMessage(timeout);\n        const transaction = await subscriptionController.sendMessage(repackedRecipient, signedMessage);\n        if (transaction == null) {\n            timeout *= properties.message.timeoutGrowFactor;\n            continue;\n        }\n        return handleTransaction(transaction);\n    }\n    // Execute locally\n    const errorMessage = 'Message expired';\n    const signedMessage = await makeSignedMessage(60);\n    const transaction = await subscriptionController.sendMessageLocally(repackedRecipient, signedMessage)\n        .catch((e) => {\n        throw invalidRequest(req, `${errorMessage}. ${e.toString()}`);\n    });\n    const additionalText = transaction.exitCode != null ? `. Possible exit code: ${transaction.exitCode}` : '';\n    throw invalidRequest(req, `${errorMessage}${additionalText}`);\n};\nconst sendExternalMessageDelayed = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireParams(req);\n    const { publicKey, recipient, stateInit, payload } = req.params;\n    requireString(req, req.params, 'publicKey');\n    requireString(req, req.params, 'recipient');\n    requireOptionalString(req, req.params, 'stateInit');\n    requireFunctionCall(req, req.params, 'payload');\n    let repackedRecipient;\n    try {\n        repackedRecipient = nekoton.repackAddress(recipient);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    const { clock, subscriptionController, keystore, properties, notify } = ctx;\n    const signer = await keystore.getSigner(publicKey);\n    if (signer == null) {\n        throw invalidRequest(req, 'Signer not found for public key');\n    }\n    let unsignedMessage;\n    try {\n        unsignedMessage = nekoton.createExternalMessage(clock, repackedRecipient, payload.abi, payload.method, stateInit, payload.params, publicKey, properties.message.timeout);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    let signedMessage;\n    try {\n        const signature = await signer.sign(unsignedMessage.hash);\n        signedMessage = unsignedMessage.sign(signature);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    finally {\n        unsignedMessage.free();\n    }\n    subscriptionController.sendMessage(repackedRecipient, signedMessage)\n        .then(transaction => {\n        notify('messageStatusUpdated', {\n            address: repackedRecipient,\n            hash: signedMessage.hash,\n            transaction,\n        });\n    })\n        .catch(console.error);\n    return {\n        message: {\n            account: repackedRecipient,\n            hash: signedMessage.hash,\n            expireAt: signedMessage.expireAt,\n        },\n    };\n};\nfunction requireKeystore(req, context) {\n    if (context.keystore == null) {\n        throw invalidRequest(req, 'Keystore not found');\n    }\n}\nfunction requireAccountsStorage(req, context) {\n    if (context.accountsStorage == null) {\n        throw invalidRequest(req, 'AccountsStorage not found');\n    }\n}\nfunction requireParams(req) {\n    if (req.params == null || typeof req.params !== 'object') {\n        throw invalidRequest(req, 'required params object');\n    }\n}\nfunction requireObject(req, object, key) {\n    const property = object[key];\n    if (typeof property !== 'object') {\n        throw invalidRequest(req, `'${String(key)}' must be an object`);\n    }\n}\nfunction requireOptionalObject(req, object, key) {\n    const property = object[key];\n    if (property != null && typeof property !== 'object') {\n        throw invalidRequest(req, `'${String(key)}' must be an object if specified`);\n    }\n}\nfunction requireBoolean(req, object, key) {\n    const property = object[key];\n    if (typeof property !== 'boolean') {\n        throw invalidRequest(req, `'${String(key)}' must be a boolean`);\n    }\n}\nfunction requireOptionalBoolean(req, object, key) {\n    const property = object[key];\n    if (property != null && typeof property !== 'boolean') {\n        throw invalidRequest(req, `'${String(key)}' must be a boolean if specified`);\n    }\n}\nfunction requireString(req, object, key) {\n    const property = object[key];\n    if (typeof property !== 'string' || property.length === 0) {\n        throw invalidRequest(req, `'${String(key)}' must be non-empty string`);\n    }\n}\nfunction requireOptionalString(req, object, key) {\n    const property = object[key];\n    if (property != null && (typeof property !== 'string' || property.length === 0)) {\n        throw invalidRequest(req, `'${String(key)}' must be a non-empty string if provided`);\n    }\n}\nfunction requireOptionalNumber(req, object, key) {\n    const property = object[key];\n    if (property != null && typeof property !== 'number') {\n        throw invalidRequest(req, `'${String(key)}' must be a number if provider`);\n    }\n}\nfunction requireArray(req, object, key) {\n    const property = object[key];\n    if (!Array.isArray(property)) {\n        throw invalidRequest(req, `'${String(key)}' must be an array`);\n    }\n}\nfunction requireOptional(req, object, key, predicate) {\n    const property = object[key];\n    if (property != null) {\n        predicate(req, object, key);\n    }\n}\nfunction requireTransactionId(req, object, key) {\n    requireObject(req, object, key);\n    const property = object[key];\n    requireString(req, property, 'lt');\n    requireString(req, property, 'hash');\n}\nfunction requireLastTransactionId(req, object, key) {\n    requireObject(req, object, key);\n    const property = object[key];\n    requireBoolean(req, property, 'isExact');\n    requireString(req, property, 'lt');\n    requireOptionalString(req, property, 'hash');\n}\nfunction requireContractState(req, object, key) {\n    requireObject(req, object, key);\n    const property = object[key];\n    requireString(req, property, 'balance');\n    requireOptional(req, property, 'lastTransactionId', requireLastTransactionId);\n    requireBoolean(req, property, 'isDeployed');\n}\nfunction requireFunctionCall(req, object, key) {\n    requireObject(req, object, key);\n    const property = object[key];\n    requireString(req, property, 'abi');\n    requireString(req, property, 'method');\n    requireObject(req, property, 'params');\n}\nfunction requireOptionalRawFunctionCall(req, object, key) {\n    const property = object[key];\n    if (typeof property === 'string' || property == null) {\n        return;\n    }\n    else if (typeof property === 'object') {\n        requireString(req, property, 'abi');\n        requireString(req, property, 'method');\n        requireObject(req, property, 'params');\n    }\n    else {\n        throw invalidRequest(req, `'${String(key)}' must be a function all or optional string`);\n    }\n}\nfunction requireMethodOrArray(req, object, key) {\n    const property = object[key];\n    if (property != null && typeof property !== 'string' && !Array.isArray(property)) {\n        throw invalidRequest(req, `'${String(key)}' must be a method name or an array of possible names`);\n    }\n}\nasync function makeAccountInteractionPermission(req, ctx) {\n    requireAccountsStorage(req, ctx);\n    const defaultAccount = ctx.accountsStorage.defaultAccount;\n    if (defaultAccount == null) {\n        throw invalidRequest(req, 'Default account not set in accounts storage');\n    }\n    const account = await ctx.accountsStorage.getAccount(defaultAccount);\n    if (account == null) {\n        throw invalidRequest(req, 'Default account not found');\n    }\n    const publicKey = await account.fetchPublicKey(new AccountsStorage_1.AccountsStorageContext(ctx.clock, ctx.connectionController, nekoton));\n    return {\n        address: account.address.toString(),\n        publicKey,\n        contractType: 'unknown',\n    };\n}\nconst invalidRequest = (req, message, data) => new NekotonRpcError(2, `${req.method}: ${message}`, data);\nclass NekotonRpcError extends Error {\n    constructor(code, message, data) {\n        if (!Number.isInteger(code)) {\n            throw new Error('\"code\" must be an integer');\n        }\n        if (!message || typeof message !== 'string') {\n            throw new Error('\"message\" must be a nonempty string');\n        }\n        super(message);\n        this.code = code;\n        this.data = data;\n    }\n    serialize() {\n        const serialized = {\n            code: this.code,\n            message: this.message,\n        };\n        if (this.data !== undefined) {\n            serialized.data = this.data;\n        }\n        if (this.stack) {\n            serialized.stack = this.stack;\n        }\n        return serialized;\n    }\n    toString() {\n        return (0, fast_safe_stringify_1.default)(this.serialize(), stringifyReplacer, 2);\n    }\n}\nconst stringifyReplacer = (_, value) => {\n    if (value === '[Circular]') {\n        return undefined;\n    }\n    return value;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///637\n")},837:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nexports.SimpleKeystore = void 0;\nconst core_1 = __importDefault(__webpack_require__(521));\nconst { nekoton } = core_1.default;\n/**\n * @category Keystore\n */\nclass SimpleKeystore {\n    constructor(entries = {}) {\n        this.signers = new Map();\n        this.signersByPublicKey = new Map();\n        for (const [id, signer] of Object.entries(entries)) {\n            this.addKeyPair(id, signer);\n        }\n    }\n    static generateKeyPair() {\n        return nekoton.ed25519_generateKeyPair();\n    }\n    addKeyPair(idOrKeypair, rest) {\n        let id;\n        let keyPair;\n        if (typeof idOrKeypair == \'string\') {\n            id = idOrKeypair;\n            keyPair = rest;\n        }\n        else {\n            id = idOrKeypair.publicKey;\n            keyPair = idOrKeypair;\n        }\n        const signer = new SimpleSigner(keyPair);\n        this.signers.set(id, signer);\n        this.signersByPublicKey.set(keyPair.publicKey, signer);\n    }\n    removeKeyPair(id) {\n        const signer = this.signers.get(id);\n        if (signer != null) {\n            this.signers.delete(id);\n            this.signersByPublicKey.delete(signer.publicKey);\n        }\n    }\n    /**\n     * Generate and add a new key\n     *\n     * @returns keyId of the new signer\n     */\n    async withNewKey(f, options = {}) {\n        const newKey = SimpleKeystore.generateKeyPair();\n        const keyId = options.keyId != null ? options.keyId : newKey.publicKey;\n        const keepOnError = options.keepOnError || false;\n        this.addKeyPair(keyId, newKey);\n        return f(keyId)\n            .then(retain => {\n            if (retain === false) {\n                this.removeKeyPair(keyId);\n            }\n            return keyId;\n        })\n            .catch((e) => {\n            if (!keepOnError) {\n                this.removeKeyPair(keyId);\n            }\n            throw e;\n        });\n    }\n    async getSigner(id) {\n        return this.signers.get(id) || this.signersByPublicKey.get(id);\n    }\n}\nexports.SimpleKeystore = SimpleKeystore;\nclass SimpleSigner {\n    constructor(keyPair) {\n        this.keyPair = keyPair;\n        this.publicKey = this.keyPair.publicKey;\n    }\n    async sign(rawData) {\n        return nekoton.ed25519_sign(this.keyPair.secretKey, rawData);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiODM3LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2V2ZXJzY2FsZS1zdGFuZGFsb25lLWNsaWVudC9jbGllbnQva2V5c3RvcmUuanM/NzQzZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2ltcG9ydERlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9faW1wb3J0RGVmYXVsdCkgfHwgZnVuY3Rpb24gKG1vZCkge1xuICAgIHJldHVybiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSA/IG1vZCA6IHsgXCJkZWZhdWx0XCI6IG1vZCB9O1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU2ltcGxlS2V5c3RvcmUgPSB2b2lkIDA7XG5jb25zdCBjb3JlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4uL2NvcmVcIikpO1xuY29uc3QgeyBuZWtvdG9uIH0gPSBjb3JlXzEuZGVmYXVsdDtcbi8qKlxuICogQGNhdGVnb3J5IEtleXN0b3JlXG4gKi9cbmNsYXNzIFNpbXBsZUtleXN0b3JlIHtcbiAgICBjb25zdHJ1Y3RvcihlbnRyaWVzID0ge30pIHtcbiAgICAgICAgdGhpcy5zaWduZXJzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLnNpZ25lcnNCeVB1YmxpY0tleSA9IG5ldyBNYXAoKTtcbiAgICAgICAgZm9yIChjb25zdCBbaWQsIHNpZ25lcl0gb2YgT2JqZWN0LmVudHJpZXMoZW50cmllcykpIHtcbiAgICAgICAgICAgIHRoaXMuYWRkS2V5UGFpcihpZCwgc2lnbmVyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBzdGF0aWMgZ2VuZXJhdGVLZXlQYWlyKCkge1xuICAgICAgICByZXR1cm4gbmVrb3Rvbi5lZDI1NTE5X2dlbmVyYXRlS2V5UGFpcigpO1xuICAgIH1cbiAgICBhZGRLZXlQYWlyKGlkT3JLZXlwYWlyLCByZXN0KSB7XG4gICAgICAgIGxldCBpZDtcbiAgICAgICAgbGV0IGtleVBhaXI7XG4gICAgICAgIGlmICh0eXBlb2YgaWRPcktleXBhaXIgPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGlkID0gaWRPcktleXBhaXI7XG4gICAgICAgICAgICBrZXlQYWlyID0gcmVzdDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlkID0gaWRPcktleXBhaXIucHVibGljS2V5O1xuICAgICAgICAgICAga2V5UGFpciA9IGlkT3JLZXlwYWlyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHNpZ25lciA9IG5ldyBTaW1wbGVTaWduZXIoa2V5UGFpcik7XG4gICAgICAgIHRoaXMuc2lnbmVycy5zZXQoaWQsIHNpZ25lcik7XG4gICAgICAgIHRoaXMuc2lnbmVyc0J5UHVibGljS2V5LnNldChrZXlQYWlyLnB1YmxpY0tleSwgc2lnbmVyKTtcbiAgICB9XG4gICAgcmVtb3ZlS2V5UGFpcihpZCkge1xuICAgICAgICBjb25zdCBzaWduZXIgPSB0aGlzLnNpZ25lcnMuZ2V0KGlkKTtcbiAgICAgICAgaWYgKHNpZ25lciAhPSBudWxsKSB7XG4gICAgICAgICAgICB0aGlzLnNpZ25lcnMuZGVsZXRlKGlkKTtcbiAgICAgICAgICAgIHRoaXMuc2lnbmVyc0J5UHVibGljS2V5LmRlbGV0ZShzaWduZXIucHVibGljS2V5KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBHZW5lcmF0ZSBhbmQgYWRkIGEgbmV3IGtleVxuICAgICAqXG4gICAgICogQHJldHVybnMga2V5SWQgb2YgdGhlIG5ldyBzaWduZXJcbiAgICAgKi9cbiAgICBhc3luYyB3aXRoTmV3S2V5KGYsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBjb25zdCBuZXdLZXkgPSBTaW1wbGVLZXlzdG9yZS5nZW5lcmF0ZUtleVBhaXIoKTtcbiAgICAgICAgY29uc3Qga2V5SWQgPSBvcHRpb25zLmtleUlkICE9IG51bGwgPyBvcHRpb25zLmtleUlkIDogbmV3S2V5LnB1YmxpY0tleTtcbiAgICAgICAgY29uc3Qga2VlcE9uRXJyb3IgPSBvcHRpb25zLmtlZXBPbkVycm9yIHx8IGZhbHNlO1xuICAgICAgICB0aGlzLmFkZEtleVBhaXIoa2V5SWQsIG5ld0tleSk7XG4gICAgICAgIHJldHVybiBmKGtleUlkKVxuICAgICAgICAgICAgLnRoZW4ocmV0YWluID0+IHtcbiAgICAgICAgICAgIGlmIChyZXRhaW4gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVLZXlQYWlyKGtleUlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBrZXlJZDtcbiAgICAgICAgfSlcbiAgICAgICAgICAgIC5jYXRjaCgoZSkgPT4ge1xuICAgICAgICAgICAgaWYgKCFrZWVwT25FcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlS2V5UGFpcihrZXlJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgZ2V0U2lnbmVyKGlkKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNpZ25lcnMuZ2V0KGlkKSB8fCB0aGlzLnNpZ25lcnNCeVB1YmxpY0tleS5nZXQoaWQpO1xuICAgIH1cbn1cbmV4cG9ydHMuU2ltcGxlS2V5c3RvcmUgPSBTaW1wbGVLZXlzdG9yZTtcbmNsYXNzIFNpbXBsZVNpZ25lciB7XG4gICAgY29uc3RydWN0b3Ioa2V5UGFpcikge1xuICAgICAgICB0aGlzLmtleVBhaXIgPSBrZXlQYWlyO1xuICAgICAgICB0aGlzLnB1YmxpY0tleSA9IHRoaXMua2V5UGFpci5wdWJsaWNLZXk7XG4gICAgfVxuICAgIGFzeW5jIHNpZ24ocmF3RGF0YSkge1xuICAgICAgICByZXR1cm4gbmVrb3Rvbi5lZDI1NTE5X3NpZ24odGhpcy5rZXlQYWlyLnNlY3JldEtleSwgcmF3RGF0YSk7XG4gICAgfVxufVxuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///837\n')},344:(__unused_webpack_module,exports,__webpack_require__)=>{"use strict";eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getUniqueId = exports.convertVersionToInt32 = exports.SafeEventEmitter = void 0;\nconst events_1 = __webpack_require__(187);\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    }\n    catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(() => {\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for (let i = 0; i < n; i += 1) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events_1.EventEmitter {\n    emit(type, ...args) {\n        let doError = type === 'error';\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        }\n        else if (!doError) {\n            return false;\n        }\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                ;\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                throw er;\n            }\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);\n            err.context = er;\n            throw err;\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === 'function') {\n            safeApply(handler, this, args);\n        }\n        else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for (let i = 0; i < len; i += 1) {\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nexports.SafeEventEmitter = SafeEventEmitter;\n/**\n * @category Utils\n */\nconst convertVersionToInt32 = (version) => {\n    const parts = version.split('.');\n    if (parts.length !== 3) {\n        throw new Error('Received invalid version string');\n    }\n    parts.forEach((part) => {\n        if (~~part > 999) {\n            throw new Error(`Version string invalid, ${part} is too large`);\n        }\n    });\n    let multiplier = 1000000;\n    let numericVersion = 0;\n    for (let i = 0; i < 3; i++) {\n        numericVersion += ~~parts[i] * multiplier;\n        multiplier /= 1000;\n    }\n    return numericVersion;\n};\nexports.convertVersionToInt32 = convertVersionToInt32;\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\nfunction getUniqueId() {\n    idCounter = (idCounter + 1) % MAX;\n    return idCounter;\n}\nexports.getUniqueId = getUniqueId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiMzQ0LmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2V2ZXJzY2FsZS1zdGFuZGFsb25lLWNsaWVudC9jbGllbnQvdXRpbHMuanM/ZWYyYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0VW5pcXVlSWQgPSBleHBvcnRzLmNvbnZlcnRWZXJzaW9uVG9JbnQzMiA9IGV4cG9ydHMuU2FmZUV2ZW50RW1pdHRlciA9IHZvaWQgMDtcbmNvbnN0IGV2ZW50c18xID0gcmVxdWlyZShcImV2ZW50c1wiKTtcbmZ1bmN0aW9uIHNhZmVBcHBseShoYW5kbGVyLCBjb250ZXh0LCBhcmdzKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgUmVmbGVjdC5hcHBseShoYW5kbGVyLCBjb250ZXh0LCBhcmdzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICAvLyBUaHJvdyBlcnJvciBhZnRlciB0aW1lb3V0IHNvIGFzIG5vdCB0byBpbnRlcnJ1cHQgdGhlIHN0YWNrXG4gICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9KTtcbiAgICB9XG59XG5mdW5jdGlvbiBhcnJheUNsb25lKGFycikge1xuICAgIGNvbnN0IG4gPSBhcnIubGVuZ3RoO1xuICAgIGNvbnN0IGNvcHkgPSBuZXcgQXJyYXkobik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpICs9IDEpIHtcbiAgICAgICAgY29weVtpXSA9IGFycltpXTtcbiAgICB9XG4gICAgcmV0dXJuIGNvcHk7XG59XG5jbGFzcyBTYWZlRXZlbnRFbWl0dGVyIGV4dGVuZHMgZXZlbnRzXzEuRXZlbnRFbWl0dGVyIHtcbiAgICBlbWl0KHR5cGUsIC4uLmFyZ3MpIHtcbiAgICAgICAgbGV0IGRvRXJyb3IgPSB0eXBlID09PSAnZXJyb3InO1xuICAgICAgICBjb25zdCBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICAgIGlmIChldmVudHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZG9FcnJvciA9IGRvRXJyb3IgJiYgZXZlbnRzLmVycm9yID09PSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWRvRXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZG9FcnJvcikge1xuICAgICAgICAgICAgbGV0IGVyO1xuICAgICAgICAgICAgaWYgKGFyZ3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICBbZXJdID0gYXJncztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlciBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZXI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoYFVuaGFuZGxlZCBlcnJvci4ke2VyID8gYCAoJHtlci5tZXNzYWdlfSlgIDogJyd9YCk7XG4gICAgICAgICAgICBlcnIuY29udGV4dCA9IGVyO1xuICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG4gICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGhhbmRsZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHNhZmVBcHBseShoYW5kbGVyLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDEpIHtcbiAgICAgICAgICAgICAgICBzYWZlQXBwbHkobGlzdGVuZXJzW2ldLCB0aGlzLCBhcmdzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG59XG5leHBvcnRzLlNhZmVFdmVudEVtaXR0ZXIgPSBTYWZlRXZlbnRFbWl0dGVyO1xuLyoqXG4gKiBAY2F0ZWdvcnkgVXRpbHNcbiAqL1xuY29uc3QgY29udmVydFZlcnNpb25Ub0ludDMyID0gKHZlcnNpb24pID0+IHtcbiAgICBjb25zdCBwYXJ0cyA9IHZlcnNpb24uc3BsaXQoJy4nKTtcbiAgICBpZiAocGFydHMubGVuZ3RoICE9PSAzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignUmVjZWl2ZWQgaW52YWxpZCB2ZXJzaW9uIHN0cmluZycpO1xuICAgIH1cbiAgICBwYXJ0cy5mb3JFYWNoKChwYXJ0KSA9PiB7XG4gICAgICAgIGlmICh+fnBhcnQgPiA5OTkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVmVyc2lvbiBzdHJpbmcgaW52YWxpZCwgJHtwYXJ0fSBpcyB0b28gbGFyZ2VgKTtcbiAgICAgICAgfVxuICAgIH0pO1xuICAgIGxldCBtdWx0aXBsaWVyID0gMTAwMDAwMDtcbiAgICBsZXQgbnVtZXJpY1ZlcnNpb24gPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgICAgIG51bWVyaWNWZXJzaW9uICs9IH5+cGFydHNbaV0gKiBtdWx0aXBsaWVyO1xuICAgICAgICBtdWx0aXBsaWVyIC89IDEwMDA7XG4gICAgfVxuICAgIHJldHVybiBudW1lcmljVmVyc2lvbjtcbn07XG5leHBvcnRzLmNvbnZlcnRWZXJzaW9uVG9JbnQzMiA9IGNvbnZlcnRWZXJzaW9uVG9JbnQzMjtcbmNvbnN0IE1BWCA9IDQyOTQ5NjcyOTU7XG5sZXQgaWRDb3VudGVyID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogTUFYKTtcbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICAgIGlkQ291bnRlciA9IChpZENvdW50ZXIgKyAxKSAlIE1BWDtcbiAgICByZXR1cm4gaWRDb3VudGVyO1xufVxuZXhwb3J0cy5nZXRVbmlxdWVJZCA9IGdldFVuaXF1ZUlkO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///344\n")},521:(__unused_webpack_module,exports)=>{"use strict";eval('\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst core = {\n    ensureNekotonLoaded: undefined,\n    nekoton: undefined,\n    fetch: undefined,\n    fetchAgent: () => undefined,\n    debugLog: undefined,\n};\nexports.default = core;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTIxLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2V2ZXJzY2FsZS1zdGFuZGFsb25lLWNsaWVudC9jb3JlLmpzP2M5ODQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBjb3JlID0ge1xuICAgIGVuc3VyZU5la290b25Mb2FkZWQ6IHVuZGVmaW5lZCxcbiAgICBuZWtvdG9uOiB1bmRlZmluZWQsXG4gICAgZmV0Y2g6IHVuZGVmaW5lZCxcbiAgICBmZXRjaEFnZW50OiAoKSA9PiB1bmRlZmluZWQsXG4gICAgZGVidWdMb2c6IHVuZGVmaW5lZCxcbn07XG5leHBvcnRzLmRlZmF1bHQgPSBjb3JlO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///521\n')},91:function(__unused_webpack_module,exports,__webpack_require__){"use strict";eval('\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, "default", { enumerable: true, value: v });\n}) : function(o, v) {\n    o["default"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { "default": mod };\n};\nObject.defineProperty(exports, "__esModule", ({ value: true }));\nconst nekoton_wasm_1 = __importStar(__webpack_require__(559)), nt = nekoton_wasm_1;\nconst core_1 = __importDefault(__webpack_require__(521));\nlet clientInitializationStarted = false;\nlet notifyClientInitialized;\nconst initializationPromise = new Promise((resolve, reject) => {\n    notifyClientInitialized = { resolve, reject };\n});\ncore_1.default.ensureNekotonLoaded = (initInput) => {\n    if (!clientInitializationStarted) {\n        clientInitializationStarted = true;\n        (0, nekoton_wasm_1.default)(initInput).then(notifyClientInitialized.resolve).catch(notifyClientInitialized.reject);\n    }\n    return initializationPromise;\n};\ncore_1.default.nekoton = nt;\ncore_1.default.fetch = fetch;\ncore_1.default.debugLog = console.debug;\n__exportStar(__webpack_require__(637), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiOTEuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZXgtYmF0dGxlLWdhbWUvLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLXN0YW5kYWxvbmUtY2xpZW50L2luZGV4LmpzPzBlNzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19jcmVhdGVCaW5kaW5nID0gKHRoaXMgJiYgdGhpcy5fX2NyZWF0ZUJpbmRpbmcpIHx8IChPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IobSwgayk7XG4gICAgaWYgKCFkZXNjIHx8IChcImdldFwiIGluIGRlc2MgPyAhbS5fX2VzTW9kdWxlIDogZGVzYy53cml0YWJsZSB8fCBkZXNjLmNvbmZpZ3VyYWJsZSkpIHtcbiAgICAgIGRlc2MgPSB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24oKSB7IHJldHVybiBtW2tdOyB9IH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBrMiwgZGVzYyk7XG59KSA6IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgb1trMl0gPSBtW2tdO1xufSkpO1xudmFyIF9fc2V0TW9kdWxlRGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19zZXRNb2R1bGVEZWZhdWx0KSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCB2KSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIFwiZGVmYXVsdFwiLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2IH0pO1xufSkgOiBmdW5jdGlvbihvLCB2KSB7XG4gICAgb1tcImRlZmF1bHRcIl0gPSB2O1xufSk7XG52YXIgX19pbXBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydFN0YXIpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICBpZiAobW9kICYmIG1vZC5fX2VzTW9kdWxlKSByZXR1cm4gbW9kO1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICBpZiAobW9kICE9IG51bGwpIGZvciAodmFyIGsgaW4gbW9kKSBpZiAoayAhPT0gXCJkZWZhdWx0XCIgJiYgT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG1vZCwgaykpIF9fY3JlYXRlQmluZGluZyhyZXN1bHQsIG1vZCwgayk7XG4gICAgX19zZXRNb2R1bGVEZWZhdWx0KHJlc3VsdCwgbW9kKTtcbiAgICByZXR1cm4gcmVzdWx0O1xufTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5jb25zdCBuZWtvdG9uX3dhc21fMSA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwibmVrb3Rvbi13YXNtXCIpKSwgbnQgPSBuZWtvdG9uX3dhc21fMTtcbmNvbnN0IGNvcmVfMSA9IF9faW1wb3J0RGVmYXVsdChyZXF1aXJlKFwiLi9jb3JlXCIpKTtcbmxldCBjbGllbnRJbml0aWFsaXphdGlvblN0YXJ0ZWQgPSBmYWxzZTtcbmxldCBub3RpZnlDbGllbnRJbml0aWFsaXplZDtcbmNvbnN0IGluaXRpYWxpemF0aW9uUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBub3RpZnlDbGllbnRJbml0aWFsaXplZCA9IHsgcmVzb2x2ZSwgcmVqZWN0IH07XG59KTtcbmNvcmVfMS5kZWZhdWx0LmVuc3VyZU5la290b25Mb2FkZWQgPSAoaW5pdElucHV0KSA9PiB7XG4gICAgaWYgKCFjbGllbnRJbml0aWFsaXphdGlvblN0YXJ0ZWQpIHtcbiAgICAgICAgY2xpZW50SW5pdGlhbGl6YXRpb25TdGFydGVkID0gdHJ1ZTtcbiAgICAgICAgKDAsIG5la290b25fd2FzbV8xLmRlZmF1bHQpKGluaXRJbnB1dCkudGhlbihub3RpZnlDbGllbnRJbml0aWFsaXplZC5yZXNvbHZlKS5jYXRjaChub3RpZnlDbGllbnRJbml0aWFsaXplZC5yZWplY3QpO1xuICAgIH1cbiAgICByZXR1cm4gaW5pdGlhbGl6YXRpb25Qcm9taXNlO1xufTtcbmNvcmVfMS5kZWZhdWx0Lm5la290b24gPSBudDtcbmNvcmVfMS5kZWZhdWx0LmZldGNoID0gZmV0Y2g7XG5jb3JlXzEuZGVmYXVsdC5kZWJ1Z0xvZyA9IGNvbnNvbGUuZGVidWc7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY2xpZW50XCIpLCBleHBvcnRzKTtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///91\n')},445:module=>{eval("module.exports = stringify\nstringify.default = stringify\nstringify.stable = deterministicStringify\nstringify.stableStringify = deterministicStringify\n\nvar LIMIT_REPLACE_NODE = '[...]'\nvar CIRCULAR_REPLACE_NODE = '[Circular]'\n\nvar arr = []\nvar replacerStack = []\n\nfunction defaultOptions () {\n  return {\n    depthLimit: Number.MAX_SAFE_INTEGER,\n    edgesLimit: Number.MAX_SAFE_INTEGER\n  }\n}\n\n// Regular stringify\nfunction stringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  decirc(obj, '', 0, [], undefined, 0, options)\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(obj, replacer, spacer)\n    } else {\n      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction setReplace (replace, val, k, parent) {\n  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)\n  if (propertyDescriptor.get !== undefined) {\n    if (propertyDescriptor.configurable) {\n      Object.defineProperty(parent, k, { value: replace })\n      arr.push([parent, k, val, propertyDescriptor])\n    } else {\n      replacerStack.push([val, k, replace])\n    }\n  } else {\n    parent[k] = replace\n    arr.push([parent, k, val])\n  }\n}\n\nfunction decirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        decirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      var keys = Object.keys(val)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        decirc(val[key], key, i, stack, val, depth, options)\n      }\n    }\n    stack.pop()\n  }\n}\n\n// Stable-stringify\nfunction compareFunction (a, b) {\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\nfunction deterministicStringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(tmp, replacer, spacer)\n    } else {\n      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    // Ensure that we restore the object as it was.\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction deterministicDecirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n    try {\n      if (typeof val.toJSON === 'function') {\n        return\n      }\n    } catch (_) {\n      return\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        deterministicDecirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      // Create a temporary object in the required way\n      var tmp = {}\n      var keys = Object.keys(val).sort(compareFunction)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        deterministicDecirc(val[key], key, i, stack, val, depth, options)\n        tmp[key] = val[key]\n      }\n      if (typeof parent !== 'undefined') {\n        arr.push([parent, k, val])\n        parent[k] = tmp\n      } else {\n        return tmp\n      }\n    }\n    stack.pop()\n  }\n}\n\n// wraps replacer function to handle values we couldn't replace\n// and mark them as replaced value\nfunction replaceGetterValues (replacer) {\n  replacer =\n    typeof replacer !== 'undefined'\n      ? replacer\n      : function (k, v) {\n        return v\n      }\n  return function (key, val) {\n    if (replacerStack.length > 0) {\n      for (var i = 0; i < replacerStack.length; i++) {\n        var part = replacerStack[i]\n        if (part[1] === key && part[0] === val) {\n          val = part[2]\n          replacerStack.splice(i, 1)\n          break\n        }\n      }\n    }\n    return replacer.call(this, key, val)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///445\n")},559:(module,__webpack_exports__,__webpack_require__)=>{"use strict";eval('__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   "checkAddress": () => (/* binding */ checkAddress),\n/* harmony export */   "repackAddress": () => (/* binding */ repackAddress),\n/* harmony export */   "runLocal": () => (/* binding */ runLocal),\n/* harmony export */   "makeFullAccountBoc": () => (/* binding */ makeFullAccountBoc),\n/* harmony export */   "parseFullAccountBoc": () => (/* binding */ parseFullAccountBoc),\n/* harmony export */   "executeLocal": () => (/* binding */ executeLocal),\n/* harmony export */   "getExpectedAddress": () => (/* binding */ getExpectedAddress),\n/* harmony export */   "getBocHash": () => (/* binding */ getBocHash),\n/* harmony export */   "packIntoCell": () => (/* binding */ packIntoCell),\n/* harmony export */   "unpackFromCell": () => (/* binding */ unpackFromCell),\n/* harmony export */   "extractContractData": () => (/* binding */ extractContractData),\n/* harmony export */   "extractPublicKey": () => (/* binding */ extractPublicKey),\n/* harmony export */   "codeToTvc": () => (/* binding */ codeToTvc),\n/* harmony export */   "mergeTvc": () => (/* binding */ mergeTvc),\n/* harmony export */   "splitTvc": () => (/* binding */ splitTvc),\n/* harmony export */   "setCodeSalt": () => (/* binding */ setCodeSalt),\n/* harmony export */   "getCodeSalt": () => (/* binding */ getCodeSalt),\n/* harmony export */   "encodeInternalInput": () => (/* binding */ encodeInternalInput),\n/* harmony export */   "encodeInternalMessage": () => (/* binding */ encodeInternalMessage),\n/* harmony export */   "decodeInput": () => (/* binding */ decodeInput),\n/* harmony export */   "decodeEvent": () => (/* binding */ decodeEvent),\n/* harmony export */   "decodeOutput": () => (/* binding */ decodeOutput),\n/* harmony export */   "decodeTransaction": () => (/* binding */ decodeTransaction),\n/* harmony export */   "decodeTransactionEvents": () => (/* binding */ decodeTransactionEvents),\n/* harmony export */   "getDataHash": () => (/* binding */ getDataHash),\n/* harmony export */   "ed25519_generateKeyPair": () => (/* binding */ ed25519_generateKeyPair),\n/* harmony export */   "ed25519_sign": () => (/* binding */ ed25519_sign),\n/* harmony export */   "extendSignature": () => (/* binding */ extendSignature),\n/* harmony export */   "verifySignature": () => (/* binding */ verifySignature),\n/* harmony export */   "createRawExternalMessage": () => (/* binding */ createRawExternalMessage),\n/* harmony export */   "createExternalMessageWithoutSignature": () => (/* binding */ createExternalMessageWithoutSignature),\n/* harmony export */   "createExternalMessage": () => (/* binding */ createExternalMessage),\n/* harmony export */   "ClockWithOffset": () => (/* binding */ ClockWithOffset),\n/* harmony export */   "GenericContract": () => (/* binding */ GenericContract),\n/* harmony export */   "GqlConnection": () => (/* binding */ GqlConnection),\n/* harmony export */   "GqlQuery": () => (/* binding */ GqlQuery),\n/* harmony export */   "JrpcConnection": () => (/* binding */ JrpcConnection),\n/* harmony export */   "JrpcQuery": () => (/* binding */ JrpcQuery),\n/* harmony export */   "Transport": () => (/* binding */ Transport),\n/* harmony export */   "UnsignedMessage": () => (/* binding */ UnsignedMessage),\n/* harmony export */   "initSync": () => (/* binding */ initSync),\n/* harmony export */   "default": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\n\nlet wasm;\n\nconst cachedTextDecoder = new TextDecoder(\'utf-8\', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedFloat64Memory0 = new Float64Array();\n\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = new TextEncoder(\'utf-8\');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === \'function\'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == \'number\' || type == \'boolean\' || val == null) {\n        return  `${val}`;\n    }\n    if (type == \'string\') {\n        return `"${val}"`;\n    }\n    if (type == \'symbol\') {\n        const description = val.description;\n        if (description == null) {\n            return \'Symbol\';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == \'function\') {\n        const name = val.name;\n        if (typeof name == \'string\' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return \'Function\';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = \'[\';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += \', \' + debugString(val[i]);\n        }\n        debug += \']\';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard \'[object ClassName]\'\n        return toString.call(val);\n    }\n    if (className == \'Object\') {\n        // we\'re a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return \'Object(\' + JSON.stringify(val) + \')\';\n        } catch (_) {\n            return \'Object\';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won\'t\n        // be deallocated while we\'re invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_32(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hcb77729c6af9d376(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n* @param {string} address\n* @returns {boolean}\n*/\nfunction checkAddress(address) {\n    const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.checkAddress(ptr0, len0);\n    return ret !== 0;\n}\n\n/**\n* @param {string} address\n* @returns {string}\n*/\nfunction repackAddress(address) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.repackAddress(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {ClockWithOffset} clock\n* @param {string} account_stuff_boc\n* @param {string} contract_abi\n* @param {string} method\n* @param {TokensObject} input\n* @param {boolean} responsible\n* @returns {ExecutionOutput}\n*/\nfunction runLocal(clock, account_stuff_boc, contract_abi, method, input, responsible) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(clock, ClockWithOffset);\n        const ptr0 = passStringToWasm0(account_stuff_boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(method, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.runLocal(retptr, clock.ptr, ptr0, len0, ptr1, len1, ptr2, len2, addHeapObject(input), responsible);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} account_stuff_boc\n* @returns {string}\n*/\nfunction makeFullAccountBoc(account_stuff_boc) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(account_stuff_boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.makeFullAccountBoc(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {string} account\n* @returns {FullContractState | undefined}\n*/\nfunction parseFullAccountBoc(account) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(account, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.parseFullAccountBoc(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} config\n* @param {string} account\n* @param {string} message\n* @param {number} utime\n* @param {boolean} disable_signature_check\n* @returns {TransactionExecutorOutput}\n*/\nfunction executeLocal(config, account, message, utime, disable_signature_check) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(config, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(account, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.executeLocal(retptr, ptr0, len0, ptr1, len1, ptr2, len2, utime, disable_signature_check);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} tvc\n* @param {string} contract_abi\n* @param {number} workchain_id\n* @param {string | undefined} public_key\n* @param {TokensObject} init_data\n* @returns {ExpectedAddress}\n*/\nfunction getExpectedAddress(tvc, contract_abi, workchain_id, public_key, init_data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(tvc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(public_key) ? 0 : passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        wasm.getExpectedAddress(retptr, ptr0, len0, ptr1, len1, workchain_id, ptr2, len2, addHeapObject(init_data));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} boc\n* @returns {string}\n*/\nfunction getBocHash(boc) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.getBocHash(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {Array<AbiParam>} params\n* @param {TokensObject} tokens\n* @param {string | undefined} abi_version\n* @returns {string}\n*/\nfunction packIntoCell(params, tokens, abi_version) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = isLikeNone(abi_version) ? 0 : passStringToWasm0(abi_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.packIntoCell(retptr, addHeapObject(params), addHeapObject(tokens), ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {Array<AbiParam>} params\n* @param {string} boc\n* @param {boolean} allow_partial\n* @param {string | undefined} abi_version\n* @returns {TokensObject}\n*/\nfunction unpackFromCell(params, boc, allow_partial, abi_version) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(abi_version) ? 0 : passStringToWasm0(abi_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.unpackFromCell(retptr, addHeapObject(params), ptr0, len0, allow_partial, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} boc\n* @returns {string | undefined}\n*/\nfunction extractContractData(boc) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.extractContractData(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        let v1;\n        if (r0 !== 0) {\n            v1 = getStringFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n        }\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} boc\n* @returns {string}\n*/\nfunction extractPublicKey(boc) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.extractPublicKey(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {string} code\n* @returns {string}\n*/\nfunction codeToTvc(code) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.codeToTvc(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {string} code\n* @param {string} data\n* @returns {string}\n*/\nfunction mergeTvc(code, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.mergeTvc(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr2, len2);\n    }\n}\n\n/**\n* @param {string} tvc\n* @returns {StateInit}\n*/\nfunction splitTvc(tvc) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(tvc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.splitTvc(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} code\n* @param {string} salt\n* @returns {string}\n*/\nfunction setCodeSalt(code, salt) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.setCodeSalt(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr2, len2);\n    }\n}\n\n/**\n* @param {string} code\n* @returns {string | undefined}\n*/\nfunction getCodeSalt(code) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.getCodeSalt(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        let v1;\n        if (r0 !== 0) {\n            v1 = getStringFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n        }\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} contract_abi\n* @param {string} method\n* @param {TokensObject} input\n* @returns {string}\n*/\nfunction encodeInternalInput(contract_abi, method, input) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(method, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.encodeInternalInput(retptr, ptr0, len0, ptr1, len1, addHeapObject(input));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr2, len2);\n    }\n}\n\n/**\n* @param {string | undefined} src\n* @param {string} dst\n* @param {boolean} bounce\n* @param {string | undefined} state_init\n* @param {string | undefined} body\n* @param {string} amount\n* @returns {string}\n*/\nfunction encodeInternalMessage(src, dst, bounce, state_init, body, amount) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = isLikeNone(src) ? 0 : passStringToWasm0(src, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(dst, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(state_init) ? 0 : passStringToWasm0(state_init, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(body) ? 0 : passStringToWasm0(body, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ptr4 = passStringToWasm0(amount, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        wasm.encodeInternalMessage(retptr, ptr0, len0, ptr1, len1, bounce, ptr2, len2, ptr3, len3, ptr4, len4);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr5 = r0;\n        var len5 = r1;\n        if (r3) {\n            ptr5 = 0; len5 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr5, len5);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr5, len5);\n    }\n}\n\n/**\n* @param {string} message_body\n* @param {string} contract_abi\n* @param {MethodName} method\n* @param {boolean} internal\n* @returns {DecodedInput | undefined}\n*/\nfunction decodeInput(message_body, contract_abi, method, internal) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(message_body, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.decodeInput(retptr, ptr0, len0, ptr1, len1, addHeapObject(method), internal);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} message_body\n* @param {string} contract_abi\n* @param {MethodName} event\n* @returns {DecodedEvent | undefined}\n*/\nfunction decodeEvent(message_body, contract_abi, event) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(message_body, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.decodeEvent(retptr, ptr0, len0, ptr1, len1, addHeapObject(event));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} message_body\n* @param {string} contract_abi\n* @param {MethodName} method\n* @returns {DecodedOutput | undefined}\n*/\nfunction decodeOutput(message_body, contract_abi, method) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(message_body, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.decodeOutput(retptr, ptr0, len0, ptr1, len1, addHeapObject(method));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {Transaction} transaction\n* @param {string} contract_abi\n* @param {MethodName} method\n* @returns {DecodedTransaction | undefined}\n*/\nfunction decodeTransaction(transaction, contract_abi, method) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.decodeTransaction(retptr, addHeapObject(transaction), ptr0, len0, addHeapObject(method));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {Transaction} transaction\n* @param {string} contract_abi\n* @returns {DecodedTransactionEvents}\n*/\nfunction decodeTransactionEvents(transaction, contract_abi) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.decodeTransactionEvents(retptr, addHeapObject(transaction), ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} data\n* @returns {string}\n*/\nfunction getDataHash(data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.getDataHash(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @returns {Ed25519KeyPair}\n*/\nfunction ed25519_generateKeyPair() {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.ed25519_generateKeyPair(retptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} secret_key\n* @param {string} data\n* @returns {string}\n*/\nfunction ed25519_sign(secret_key, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(secret_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.ed25519_sign(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr2, len2);\n    }\n}\n\n/**\n* @param {string} signature\n* @returns {ExtendedSignature}\n*/\nfunction extendSignature(signature) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.extendSignature(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} public_key\n* @param {string} data\n* @param {string} signature\n* @returns {boolean}\n*/\nfunction verifySignature(public_key, data, signature) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.verifySignature(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} dst\n* @param {string | undefined} state_init\n* @param {string | undefined} body\n* @param {number} expire_at\n* @returns {SignedMessage}\n*/\nfunction createRawExternalMessage(dst, state_init, body, expire_at) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(dst, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(state_init) ? 0 : passStringToWasm0(state_init, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(body) ? 0 : passStringToWasm0(body, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        wasm.createRawExternalMessage(retptr, ptr0, len0, ptr1, len1, ptr2, len2, expire_at);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {ClockWithOffset} clock\n* @param {string} dst\n* @param {string} contract_abi\n* @param {string} method\n* @param {string | undefined} state_init\n* @param {TokensObject} input\n* @param {number} timeout\n* @returns {SignedMessage}\n*/\nfunction createExternalMessageWithoutSignature(clock, dst, contract_abi, method, state_init, input, timeout) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(clock, ClockWithOffset);\n        const ptr0 = passStringToWasm0(dst, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(method, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(state_init) ? 0 : passStringToWasm0(state_init, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        wasm.createExternalMessageWithoutSignature(retptr, clock.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, addHeapObject(input), timeout);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {ClockWithOffset} clock\n* @param {string} dst\n* @param {string} contract_abi\n* @param {string} method\n* @param {string | undefined} state_init\n* @param {TokensObject} input\n* @param {string} public_key\n* @param {number} timeout\n* @returns {UnsignedMessage}\n*/\nfunction createExternalMessage(clock, dst, contract_abi, method, state_init, input, public_key, timeout) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(clock, ClockWithOffset);\n        const ptr0 = passStringToWasm0(dst, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(method, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(state_init) ? 0 : passStringToWasm0(state_init, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ptr4 = passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        wasm.createExternalMessage(retptr, clock.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, addHeapObject(input), ptr4, len4, timeout);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return UnsignedMessage.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\nfunction __wbg_adapter_163(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__hecba896d1563d223(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n*/\nclass ClockWithOffset {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ClockWithOffset.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_clockwithoffset_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = wasm.clockwithoffset_new();\n        return ClockWithOffset.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    get nowMs() {\n        const ret = wasm.clockwithoffset_nowMs(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} offset_ms\n    */\n    updateOffset(offset_ms) {\n        wasm.clockwithoffset_updateOffset(this.ptr, offset_ms);\n    }\n    /**\n    * @returns {number}\n    */\n    offsetMs() {\n        const ret = wasm.clockwithoffset_offsetMs(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nclass GenericContract {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenericContract.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genericcontract_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    get address() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genericcontract_address(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {SignedMessage} message\n    * @returns {Promise<Transaction>}\n    */\n    sendMessageLocally(message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genericcontract_sendMessageLocally(retptr, this.ptr, addHeapObject(message));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {SignedMessage} message\n    * @returns {Promise<PendingTransaction>}\n    */\n    sendMessage(message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genericcontract_sendMessage(retptr, this.ptr, addHeapObject(message));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Promise<void>}\n    */\n    refresh() {\n        const ret = wasm.genericcontract_refresh(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @param {string} block_id\n    * @returns {Promise<void>}\n    */\n    handleBlock(block_id) {\n        const ptr0 = passStringToWasm0(block_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.genericcontract_handleBlock(this.ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * @param {string} lt\n    * @returns {Promise<void>}\n    */\n    preloadTransactions(lt) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(lt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genericcontract_preloadTransactions(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {PollingMethod}\n    */\n    get pollingMethod() {\n        const ret = wasm.genericcontract_pollingMethod(this.ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nclass GqlConnection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GqlConnection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_gqlconnection_free(ptr);\n    }\n    /**\n    * @param {ClockWithOffset} clock\n    * @param {IGqlSender} sender\n    */\n    constructor(clock, sender) {\n        _assertClass(clock, ClockWithOffset);\n        const ret = wasm.gqlconnection_new(clock.ptr, addHeapObject(sender));\n        return GqlConnection.__wrap(ret);\n    }\n    /**\n    * @param {string} address\n    * @returns {Promise<LatestBlock>}\n    */\n    getLatestBlock(address) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.gqlconnection_getLatestBlock(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} current_block_id\n    * @param {string} address\n    * @param {number} timeout\n    * @returns {Promise<string>}\n    */\n    waitForNextBlock(current_block_id, address, timeout) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(current_block_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.gqlconnection_waitForNextBlock(retptr, this.ptr, ptr0, len0, ptr1, len1, timeout);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass GqlQuery {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GqlQuery.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_gqlquery_free(ptr);\n    }\n    /**\n    * @param {string} data\n    */\n    onReceive(data) {\n        const ptr = this.__destroy_into_raw();\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.gqlquery_onReceive(ptr, ptr0, len0);\n    }\n    /**\n    * @param {any} arg0\n    */\n    onError(arg0) {\n        const ptr = this.__destroy_into_raw();\n        wasm.gqlquery_onError(ptr, addHeapObject(arg0));\n    }\n    /**\n    */\n    onTimeout() {\n        const ptr = this.__destroy_into_raw();\n        wasm.gqlquery_onTimeout(ptr);\n    }\n}\n/**\n*/\nclass JrpcConnection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JrpcConnection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jrpcconnection_free(ptr);\n    }\n    /**\n    * @param {ClockWithOffset} clock\n    * @param {any} sender\n    */\n    constructor(clock, sender) {\n        _assertClass(clock, ClockWithOffset);\n        const ret = wasm.jrpcconnection_new(clock.ptr, addHeapObject(sender));\n        return JrpcConnection.__wrap(ret);\n    }\n}\n/**\n*/\nclass JrpcQuery {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JrpcQuery.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jrpcquery_free(ptr);\n    }\n    /**\n    * @param {string} data\n    */\n    onReceive(data) {\n        const ptr = this.__destroy_into_raw();\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.jrpcquery_onReceive(ptr, ptr0, len0);\n    }\n    /**\n    * @param {any} arg0\n    */\n    onError(arg0) {\n        const ptr = this.__destroy_into_raw();\n        wasm.jrpcquery_onError(ptr, addHeapObject(arg0));\n    }\n    /**\n    */\n    onTimeout() {\n        const ptr = this.__destroy_into_raw();\n        wasm.jrpcquery_onTimeout(ptr);\n    }\n}\n/**\n*/\nclass Transport {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Transport.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transport_free(ptr);\n    }\n    /**\n    * @param {GqlConnection} gql\n    * @returns {Transport}\n    */\n    static fromGqlConnection(gql) {\n        _assertClass(gql, GqlConnection);\n        const ret = wasm.transport_fromGqlConnection(gql.ptr);\n        return Transport.__wrap(ret);\n    }\n    /**\n    * @param {JrpcConnection} jrpc\n    * @returns {Transport}\n    */\n    static fromJrpcConnection(jrpc) {\n        _assertClass(jrpc, JrpcConnection);\n        const ret = wasm.transport_fromJrpcConnection(jrpc.ptr);\n        return Transport.__wrap(ret);\n    }\n    /**\n    * @param {string} address\n    * @param {any} handler\n    * @returns {Promise<GenericContract>}\n    */\n    subscribeToGenericContract(address, handler) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transport_subscribeToGenericContract(retptr, this.ptr, ptr0, len0, addHeapObject(handler));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} address\n    * @returns {Promise<FullContractState | undefined>}\n    */\n    getFullContractState(address) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transport_getFullContractState(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} code_hash\n    * @param {number} limit\n    * @param {string | undefined} continuation\n    * @returns {Promise<AccountsList>}\n    */\n    getAccountsByCodeHash(code_hash, limit, continuation) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(code_hash, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(continuation) ? 0 : passStringToWasm0(continuation, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.transport_getAccountsByCodeHash(retptr, this.ptr, ptr0, len0, limit, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} address\n    * @param {string | undefined} continuation\n    * @param {number} limit\n    * @returns {Promise<TransactionsList>}\n    */\n    getTransactions(address, continuation, limit) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(continuation) ? 0 : passStringToWasm0(continuation, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.transport_getTransactions(retptr, this.ptr, ptr0, len0, ptr1, len1, limit);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} hash\n    * @returns {Promise<Transaction | undefined>}\n    */\n    getTransaction(hash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hash, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transport_getTransaction(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} message_hash\n    * @returns {Promise<Transaction | undefined>}\n    */\n    getDstTransaction(message_hash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(message_hash, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transport_getDstTransaction(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass UnsignedMessage {\n\n    static __wrap(ptr) {\n        const obj = Object.create(UnsignedMessage.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_unsignedmessage_free(ptr);\n    }\n    /**\n    * @param {ClockWithOffset} clock\n    */\n    refreshTimeout(clock) {\n        _assertClass(clock, ClockWithOffset);\n        wasm.unsignedmessage_refreshTimeout(this.ptr, clock.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    expireAt() {\n        const ret = wasm.unsignedmessage_expireAt(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {string}\n    */\n    get hash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unsignedmessage_hash(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} signature\n    * @returns {SignedMessage}\n    */\n    sign(signature) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.unsignedmessage_sign(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {SignedMessage}\n    */\n    signFake() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unsignedmessage_signFake(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === \'function\' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === \'function\') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get(\'Content-Type\') != \'application/wasm\') {\n                    console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_6e3bbe7c8bd4dbd8 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === \'number\' ? obj : undefined;\n        getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;\n        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n    };\n    imports.wbg.__wbindgen_is_null = function(arg0) {\n        const ret = getObject(arg0) === null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === \'string\' ? obj : undefined;\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === \'object\' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === \'string\';\n        return ret;\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_now_58886682b7e790d7 = function() {\n        const ret = Date.now();\n        return ret;\n    };\n    imports.wbg.__wbg_new_8d2af00bc1e329ee = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_0b9bfdd97583284e = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_send_55c5735308610fc0 = function(arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).send(getStringFromWasm0(arg1, arg2), GqlQuery.__wrap(arg3), arg4 !== 0);\n    };\n    imports.wbg.__wbg_send_c4fe5ef5f4851b5a = function(arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).send(getStringFromWasm0(arg1, arg2), JrpcQuery.__wrap(arg3), arg4 !== 0);\n    };\n    imports.wbg.__wbg_new_1d9a920c6bfc44a8 = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_740e4b286702d964 = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_genericcontract_new = function(arg0) {\n        const ret = GenericContract.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_onMessageSent_fc2ded3b8153507a = function(arg0, arg1, arg2) {\n        getObject(arg0).onMessageSent(takeObject(arg1), takeObject(arg2));\n    };\n    imports.wbg.__wbg_onMessageExpired_fbdb4b1a8bb0e7c5 = function(arg0, arg1) {\n        getObject(arg0).onMessageExpired(takeObject(arg1));\n    };\n    imports.wbg.__wbg_onStateChanged_e696a7b987dba9ea = function(arg0, arg1) {\n        getObject(arg0).onStateChanged(takeObject(arg1));\n    };\n    imports.wbg.__wbg_onTransactionsFound_33b7b56c770e2e88 = function(arg0, arg1, arg2) {\n        getObject(arg0).onTransactionsFound(takeObject(arg1), takeObject(arg2));\n    };\n    imports.wbg.__wbg_keys_0702294afaeb6044 = function(arg0) {\n        const ret = Object.keys(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_57245cc7d7c7619d = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_boolean_get = function(arg0) {\n        const v = getObject(arg0);\n        const ret = typeof(v) === \'boolean\' ? (v ? 1 : 0) : 2;\n        return ret;\n    };\n    imports.wbg.__wbg_isLocal_0cc0f6258c8cf6ca = function(arg0) {\n        const ret = getObject(arg0).isLocal();\n        return ret;\n    };\n    imports.wbg.__wbg_new_9962f939219f1820 = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_163(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_static_accessor_NODE_MODULE_cf6401cc1091279e = function() {\n        const ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_0cc2ada8524d6f83 = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_c11acceab27a6c87 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_7ff1ce49caf23815 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_a746e79b322b9336 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_crypto_2036bed7c44c25e7 = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_a21fc88caf1ecdc8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_f5933855e4f48a19 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_765201544a2b6869 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_self_6d479506f72c6a71 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_f2557cc78490aceb = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_7f206bda628d5286 = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_ba75c50d1cf384f4 = function() { return handleError(function () {\n        const ret = __webpack_require__.g.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newnoargs_b5b063fc6c2f0376 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_97ae9d8645dc388b = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_isArray_27c46c67f498e15d = function(arg0) {\n        const ret = Array.isArray(getObject(arg0));\n        return ret;\n    };\n    imports.wbg.__wbg_call_168da88779e35f61 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_set_bf3f89b92d5a34bf = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_randomFillSync_065afffde01daa66 = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_subarray_58ad4efbb5bcb886 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_b99eec4244a475bb = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_length_9e1ae1900cb0fbd5 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_3f3d764d4747d564 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8c3f0052272a457a = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_83db9690f9353e79 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_then_11f7a54d67b4bfad = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_resolve_99fe17964f31ffc0 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6437 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 925, __wbg_adapter_32);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedFloat64Memory0 = new Float64Array();\n    cachedInt32Memory0 = new Int32Array();\n    cachedUint8Memory0 = new Uint8Array();\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === \'undefined\') {\n        input = new URL(/* asset import */ __webpack_require__(444), __webpack_require__.b);\n    }\n    const imports = getImports();\n\n    if (typeof input === \'string\' || (typeof Request === \'function\' && input instanceof Request) || (typeof URL === \'function\' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///559\n')},444:(g,I,n)=>{"use strict";g.exports=n.p+"3610d36b17fcc23a1d17.wasm"}},__webpack_module_cache__={};function __webpack_require__(g){var I=__webpack_module_cache__[g];if(void 0!==I)return I.exports;var n=__webpack_module_cache__[g]={id:g,loaded:!1,exports:{}};return __webpack_modules__[g].call(n.exports,n,n.exports,__webpack_require__),n.loaded=!0,n.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.d=(g,I)=>{for(var n in I)__webpack_require__.o(I,n)&&!__webpack_require__.o(g,n)&&Object.defineProperty(g,n,{enumerable:!0,get:I[n]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(g){if("object"==typeof window)return window}}(),__webpack_require__.hmd=g=>((g=Object.create(g)).children||(g.children=[]),Object.defineProperty(g,"exports",{enumerable:!0,set:()=>{throw new Error("ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: "+g.id)}}),g),__webpack_require__.o=(g,I)=>Object.prototype.hasOwnProperty.call(g,I),__webpack_require__.r=g=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(g,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(g,"__esModule",{value:!0})},(()=>{var g;__webpack_require__.g.importScripts&&(g=__webpack_require__.g.location+"");var I=__webpack_require__.g.document;if(!g&&I&&(I.currentScript&&(g=I.currentScript.src),!g)){var n=I.getElementsByTagName("script");n.length&&(g=n[n.length-1].src)}if(!g)throw new Error("Automatic publicPath is not supported in this browser");g=g.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=g})(),__webpack_require__.b=document.baseURI||self.location.href;var __webpack_exports__=__webpack_require__(612)})();