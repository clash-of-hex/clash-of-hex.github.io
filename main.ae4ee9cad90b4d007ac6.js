/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./config.json":
/*!*********************!*\
  !*** ./config.json ***!
  \*********************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"testnet":{"router":"0:c769f598769b44349277be2508a035b743f3d9963010aa9250b2a4c69f84d1ed","gameroot":"0:2d68ccad6049d94bf7eda1d26dc79dc5c22a78dfd887c9e71510a00db4bfbc9a","codeHash":"fa7bb90da63c9ccf2032b8c12ca73db9b909c7630df89571d10c597de66cf78b","endpoint":"https://devnet.evercloud.dev/4b0e77393fba46759305e30cea4aaa95/graphql"},"localnet":{"router":"0:95bb6f16b9c00359365d252ab326ea53d8e8f2a264bc2919b9bd5cd0301f2b03","gameroot":"0:948f614578db3d32756872efe9888e95647f7080782d8749dc75d161becb1c7f","codeHash":"116b7a815dc63e8d3bd07e93d529ca978c87baf8738f90ab666b28437c3505c1","endpoint":"http://localhost/graphql"}}');

/***/ }),

/***/ "./contracts/build/Cell.abi.json":
/*!***************************************!*\
  !*** ./contracts/build/Cell.abi.json ***!
  \***************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"ABI version":2,"version":"2.2","header":["pubkey","time","expire"],"functions":[{"name":"constructor","inputs":[{"name":"router","type":"address"},{"name":"owner","type":"address"},{"name":"endTime","type":"uint128"},{"name":"speed","type":"uint64"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"color","type":"tuple"},{"name":"energy","type":"uint64"}],"outputs":[]},{"name":"getRouter","inputs":[],"outputs":[{"name":"router","type":"address"}]},{"name":"getDetails","inputs":[],"outputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"color","type":"tuple"},{"name":"level","type":"uint64"},{"name":"speed","type":"uint64"},{"name":"endTime","type":"uint128"},{"name":"energy","type":"uint64"},{"name":"energySec","type":"uint64"},{"name":"energyMax","type":"uint64"},{"name":"lastCalcTime","type":"uint128"},{"name":"owner","type":"address"}]},{"name":"calculateEnergy","inputs":[],"outputs":[{"name":"energy","type":"uint64"}]},{"name":"markCell","inputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"targetCoord","type":"tuple"},{"name":"energy","type":"uint64"}],"outputs":[]},{"name":"helpCell","inputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"targetCoord","type":"tuple"},{"name":"energy","type":"uint64"}],"outputs":[]},{"name":"_helpCell","inputs":[{"name":"owner","type":"address"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"color","type":"tuple"},{"name":"energy","type":"uint64"}],"outputs":[]},{"name":"attkCell","inputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"targetCoord","type":"tuple"},{"name":"energy","type":"uint64"}],"outputs":[]},{"name":"_attkCell","inputs":[{"name":"owner","type":"address"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"color","type":"tuple"},{"name":"energy","type":"uint64"}],"outputs":[]},{"name":"upgradeCell","inputs":[],"outputs":[]},{"name":"_resolveCell","inputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"}],"outputs":[{"name":"cellAddress","type":"address"}]},{"name":"destruct","inputs":[{"name":"dest_addr","type":"address"}],"outputs":[]}],"data":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"key":1,"name":"_coord","type":"tuple"}],"events":[],"fields":[{"name":"_pubkey","type":"uint256"},{"name":"_timestamp","type":"uint64"},{"name":"_constructorFlag","type":"bool"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"_coord","type":"tuple"},{"name":"_costPerLevel","type":"uint64[]"},{"name":"_energyPerLevel","type":"uint64[]"},{"name":"_energyPerLevelMax","type":"uint64[]"},{"name":"_router","type":"address"},{"name":"_owner","type":"address"},{"name":"_speed","type":"uint64"},{"name":"_level","type":"uint64"},{"name":"_energy","type":"uint64"},{"name":"_lastCalcTime","type":"uint128"},{"name":"_endTime","type":"uint128"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"_color","type":"tuple"}]}');

/***/ }),

/***/ "./contracts/build/GameRoot.abi.json":
/*!*******************************************!*\
  !*** ./contracts/build/GameRoot.abi.json ***!
  \*******************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"ABI version":2,"version":"2.2","header":["pubkey","time","expire"],"functions":[{"name":"constructor","inputs":[{"name":"ownerPubkey","type":"uint256"},{"name":"codeRouter","type":"cell"},{"name":"codeCell","type":"cell"}],"outputs":[]},{"name":"getDetails","inputs":[],"outputs":[{"name":"nonce","type":"uint16"},{"name":"owner","type":"uint256"}]},{"name":"newRouter","inputs":[{"name":"roundTime","type":"uint64"},{"name":"radius","type":"uint64"},{"name":"speed","type":"uint64"},{"name":"name","type":"string"},{"name":"nonce","type":"uint16"}],"outputs":[]},{"name":"getOwner","inputs":[],"outputs":[{"name":"pubkey","type":"uint256"}]},{"name":"owner","inputs":[{"name":"answerId","type":"uint32"}],"outputs":[{"name":"pubkey","type":"uint256"}]},{"name":"transferOwnership","inputs":[{"name":"newOwner","type":"uint256"}],"outputs":[]}],"data":[{"key":1,"name":"_nonce","type":"uint16"}],"events":[{"name":"RouterCreated","inputs":[{"name":"nonce","type":"uint16"},{"name":"routerAddress","type":"address"}],"outputs":[]},{"name":"OwnershipTransferred","inputs":[{"name":"oldOwner","type":"uint256"},{"name":"newOwner","type":"uint256"}],"outputs":[]}],"fields":[{"name":"_pubkey","type":"uint256"},{"name":"_timestamp","type":"uint64"},{"name":"_constructorFlag","type":"bool"},{"name":"_owner","type":"uint256"},{"name":"_nonce","type":"uint16"},{"name":"_codeRouter","type":"cell"},{"name":"_codeCell","type":"cell"}]}');

/***/ }),

/***/ "./contracts/build/Router.abi.json":
/*!*****************************************!*\
  !*** ./contracts/build/Router.abi.json ***!
  \*****************************************/
/***/ ((module) => {

"use strict";
module.exports = JSON.parse('{"ABI version":2,"version":"2.2","header":["pubkey","time","expire"],"functions":[{"name":"constructor","inputs":[{"name":"codeCell","type":"cell"},{"name":"roundTime","type":"uint64"},{"name":"radius","type":"uint64"},{"name":"speed","type":"uint64"},{"name":"name","type":"string"}],"outputs":[]},{"name":"getDetails","inputs":[],"outputs":[{"name":"nonce","type":"uint32"},{"name":"endTime","type":"uint128"},{"name":"radius","type":"uint64"},{"name":"speed","type":"uint64"},{"name":"name","type":"string"},{"name":"root","type":"address"}]},{"name":"getUsers","inputs":[],"outputs":[{"name":"users","type":"map(address,uint128)"}]},{"name":"getAddressCells","inputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coords","type":"tuple[]"}],"outputs":[{"name":"addreses","type":"address[]"}]},{"name":"newGame","inputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"baseCoord","type":"tuple"}],"outputs":[]},{"name":"_newCell","inputs":[{"name":"owner","type":"address"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"baseCoord","type":"tuple"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"targetCoord","type":"tuple"},{"components":[{"name":"r","type":"uint8"},{"name":"g","type":"uint8"},{"name":"b","type":"uint8"}],"name":"color","type":"tuple"},{"name":"energy","type":"uint64"}],"outputs":[]},{"name":"onCellOwnerChanged","inputs":[{"name":"oldOwner","type":"address"},{"name":"newOwner","type":"address"}],"outputs":[]},{"name":"_resolveCell","inputs":[{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"}],"outputs":[{"name":"cellAddress","type":"address"}]},{"name":"_users","inputs":[],"outputs":[{"name":"_users","type":"map(address,uint128)"}]}],"data":[{"key":1,"name":"_nonce","type":"uint32"}],"events":[{"name":"CellCreated","inputs":[{"name":"owner","type":"uint256"},{"components":[{"name":"x","type":"int64"},{"name":"y","type":"int64"},{"name":"z","type":"int64"}],"name":"coord","type":"tuple"}],"outputs":[]}],"fields":[{"name":"_pubkey","type":"uint256"},{"name":"_timestamp","type":"uint64"},{"name":"_constructorFlag","type":"bool"},{"name":"_nonce","type":"uint32"},{"name":"_root","type":"address"},{"name":"_users","type":"map(address,uint128)"},{"name":"_codeCell","type":"cell"},{"name":"_radius","type":"uint64"},{"name":"_speed","type":"uint64"},{"name":"_name","type":"string"},{"name":"_endTime","type":"uint128"}]}');

/***/ }),

/***/ "./node_modules/@broxus/await-semaphore/dist/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@broxus/await-semaphore/dist/index.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Mutex = exports.Semaphore = void 0;\nfunction ensureCallable(fn) {\n    if (typeof fn !== 'function')\n        throw new TypeError(fn + \" is not a function\");\n    return fn;\n}\nfunction byObserver(Observer) {\n    const node = document.createTextNode('');\n    let queue, currentQueue, bit = 0, i = 0;\n    new Observer(function () {\n        let callback;\n        if (!queue) {\n            if (!currentQueue)\n                return;\n            queue = currentQueue;\n        }\n        else if (currentQueue) {\n            queue = currentQueue.slice(i).concat(queue);\n        }\n        currentQueue = queue;\n        queue = null;\n        i = 0;\n        if (typeof currentQueue === 'function') {\n            callback = currentQueue;\n            currentQueue = null;\n            callback();\n            return;\n        }\n        node.data = (bit = ++bit % 2); // Invoke other batch, to handle leftover callbacks in case of crash\n        while (i < currentQueue.length) {\n            callback = currentQueue[i];\n            i++;\n            if (i === currentQueue.length)\n                currentQueue = null;\n            callback();\n        }\n    }).observe(node, { characterData: true });\n    return function (fn) {\n        ensureCallable(fn);\n        if (queue) {\n            if (typeof queue === 'function')\n                queue = [queue, fn];\n            else\n                queue.push(fn);\n            return;\n        }\n        queue = fn;\n        node.data = (bit = ++bit % 2);\n    };\n}\nconst nextTick = (function () {\n    // queueMicrotask\n    if (typeof queueMicrotask === \"function\") {\n        return function (cb) {\n            queueMicrotask(ensureCallable(cb));\n        };\n    }\n    // MutationObserver\n    if ((typeof document === 'object') && document) {\n        if (typeof MutationObserver === 'function')\n            return byObserver(MutationObserver);\n        if (typeof window.WebKitMutationObserver === 'function')\n            return byObserver(window.WebKitMutationObserver);\n    }\n    // W3C Draft\n    // http://dvcs.w3.org/hg/webperf/raw-file/tip/specs/setImmediate/Overview.html\n    if (typeof setImmediate === 'function') {\n        return function (cb) {\n            setImmediate(ensureCallable(cb));\n        };\n    }\n    // Wide available standard\n    if ((typeof setTimeout === 'function') || (typeof setTimeout === 'object')) {\n        return function (cb) {\n            setTimeout(ensureCallable(cb), 0);\n        };\n    }\n    throw new Error('No `nextTick` implementation found');\n}());\nclass Semaphore {\n    constructor(count) {\n        this.tasks = [];\n        this.count = count;\n    }\n    sched() {\n        if (this.count > 0 && this.tasks.length > 0) {\n            this.count--;\n            let next = this.tasks.shift();\n            if (next === undefined) {\n                throw \"Unexpected undefined value in tasks list\";\n            }\n            next();\n        }\n    }\n    acquire() {\n        return new Promise((res, _rej) => {\n            const task = () => {\n                let released = false;\n                res(() => {\n                    if (!released) {\n                        released = true;\n                        this.count++;\n                        this.sched();\n                    }\n                });\n            };\n            this.tasks.push(task);\n            nextTick(this.sched.bind(this));\n        });\n    }\n    use(f) {\n        return this.acquire()\n            .then(release => {\n            return f()\n                .then((res) => {\n                release();\n                return res;\n            })\n                .catch((err) => {\n                release();\n                throw err;\n            });\n        });\n    }\n}\nexports.Semaphore = Semaphore;\nclass Mutex extends Semaphore {\n    constructor() {\n        super(1);\n    }\n}\nexports.Mutex = Mutex;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGJyb3h1cy9hd2FpdC1zZW1hcGhvcmUvZGlzdC9pbmRleC5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2hleC1iYXR0bGUtZ2FtZS8uL25vZGVfbW9kdWxlcy9AYnJveHVzL2F3YWl0LXNlbWFwaG9yZS9kaXN0L2luZGV4LmpzPzdhY2YiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk11dGV4ID0gZXhwb3J0cy5TZW1hcGhvcmUgPSB2b2lkIDA7XG5mdW5jdGlvbiBlbnN1cmVDYWxsYWJsZShmbikge1xuICAgIGlmICh0eXBlb2YgZm4gIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoZm4gKyBcIiBpcyBub3QgYSBmdW5jdGlvblwiKTtcbiAgICByZXR1cm4gZm47XG59XG5mdW5jdGlvbiBieU9ic2VydmVyKE9ic2VydmVyKSB7XG4gICAgY29uc3Qgbm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICBsZXQgcXVldWUsIGN1cnJlbnRRdWV1ZSwgYml0ID0gMCwgaSA9IDA7XG4gICAgbmV3IE9ic2VydmVyKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbGV0IGNhbGxiYWNrO1xuICAgICAgICBpZiAoIXF1ZXVlKSB7XG4gICAgICAgICAgICBpZiAoIWN1cnJlbnRRdWV1ZSlcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChjdXJyZW50UXVldWUpIHtcbiAgICAgICAgICAgIHF1ZXVlID0gY3VycmVudFF1ZXVlLnNsaWNlKGkpLmNvbmNhdChxdWV1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudFF1ZXVlID0gcXVldWU7XG4gICAgICAgIHF1ZXVlID0gbnVsbDtcbiAgICAgICAgaSA9IDA7XG4gICAgICAgIGlmICh0eXBlb2YgY3VycmVudFF1ZXVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBjYWxsYmFjayA9IGN1cnJlbnRRdWV1ZTtcbiAgICAgICAgICAgIGN1cnJlbnRRdWV1ZSA9IG51bGw7XG4gICAgICAgICAgICBjYWxsYmFjaygpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIG5vZGUuZGF0YSA9IChiaXQgPSArK2JpdCAlIDIpOyAvLyBJbnZva2Ugb3RoZXIgYmF0Y2gsIHRvIGhhbmRsZSBsZWZ0b3ZlciBjYWxsYmFja3MgaW4gY2FzZSBvZiBjcmFzaFxuICAgICAgICB3aGlsZSAoaSA8IGN1cnJlbnRRdWV1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhbGxiYWNrID0gY3VycmVudFF1ZXVlW2ldO1xuICAgICAgICAgICAgaSsrO1xuICAgICAgICAgICAgaWYgKGkgPT09IGN1cnJlbnRRdWV1ZS5sZW5ndGgpXG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlID0gbnVsbDtcbiAgICAgICAgICAgIGNhbGxiYWNrKCk7XG4gICAgICAgIH1cbiAgICB9KS5vYnNlcnZlKG5vZGUsIHsgY2hhcmFjdGVyRGF0YTogdHJ1ZSB9KTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIGVuc3VyZUNhbGxhYmxlKGZuKTtcbiAgICAgICAgaWYgKHF1ZXVlKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIHF1ZXVlID09PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgICAgIHF1ZXVlID0gW3F1ZXVlLCBmbl07XG4gICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgcXVldWUucHVzaChmbik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcXVldWUgPSBmbjtcbiAgICAgICAgbm9kZS5kYXRhID0gKGJpdCA9ICsrYml0ICUgMik7XG4gICAgfTtcbn1cbmNvbnN0IG5leHRUaWNrID0gKGZ1bmN0aW9uICgpIHtcbiAgICAvLyBxdWV1ZU1pY3JvdGFza1xuICAgIGlmICh0eXBlb2YgcXVldWVNaWNyb3Rhc2sgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGNiKSB7XG4gICAgICAgICAgICBxdWV1ZU1pY3JvdGFzayhlbnN1cmVDYWxsYWJsZShjYikpO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvLyBNdXRhdGlvbk9ic2VydmVyXG4gICAgaWYgKCh0eXBlb2YgZG9jdW1lbnQgPT09ICdvYmplY3QnKSAmJiBkb2N1bWVudCkge1xuICAgICAgICBpZiAodHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgPT09ICdmdW5jdGlvbicpXG4gICAgICAgICAgICByZXR1cm4gYnlPYnNlcnZlcihNdXRhdGlvbk9ic2VydmVyKTtcbiAgICAgICAgaWYgKHR5cGVvZiB3aW5kb3cuV2ViS2l0TXV0YXRpb25PYnNlcnZlciA9PT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgICAgIHJldHVybiBieU9ic2VydmVyKHdpbmRvdy5XZWJLaXRNdXRhdGlvbk9ic2VydmVyKTtcbiAgICB9XG4gICAgLy8gVzNDIERyYWZ0XG4gICAgLy8gaHR0cDovL2R2Y3MudzMub3JnL2hnL3dlYnBlcmYvcmF3LWZpbGUvdGlwL3NwZWNzL3NldEltbWVkaWF0ZS9PdmVydmlldy5odG1sXG4gICAgaWYgKHR5cGVvZiBzZXRJbW1lZGlhdGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgc2V0SW1tZWRpYXRlKGVuc3VyZUNhbGxhYmxlKGNiKSk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIC8vIFdpZGUgYXZhaWxhYmxlIHN0YW5kYXJkXG4gICAgaWYgKCh0eXBlb2Ygc2V0VGltZW91dCA9PT0gJ2Z1bmN0aW9uJykgfHwgKHR5cGVvZiBzZXRUaW1lb3V0ID09PSAnb2JqZWN0JykpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChjYikge1xuICAgICAgICAgICAgc2V0VGltZW91dChlbnN1cmVDYWxsYWJsZShjYiksIDApO1xuICAgICAgICB9O1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05vIGBuZXh0VGlja2AgaW1wbGVtZW50YXRpb24gZm91bmQnKTtcbn0oKSk7XG5jbGFzcyBTZW1hcGhvcmUge1xuICAgIGNvbnN0cnVjdG9yKGNvdW50KSB7XG4gICAgICAgIHRoaXMudGFza3MgPSBbXTtcbiAgICAgICAgdGhpcy5jb3VudCA9IGNvdW50O1xuICAgIH1cbiAgICBzY2hlZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuY291bnQgPiAwICYmIHRoaXMudGFza3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgdGhpcy5jb3VudC0tO1xuICAgICAgICAgICAgbGV0IG5leHQgPSB0aGlzLnRhc2tzLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAobmV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgXCJVbmV4cGVjdGVkIHVuZGVmaW5lZCB2YWx1ZSBpbiB0YXNrcyBsaXN0XCI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXh0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgYWNxdWlyZSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXMsIF9yZWopID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhc2sgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgbGV0IHJlbGVhc2VkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmVzKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyZWxlYXNlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVsZWFzZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jb3VudCsrO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zY2hlZCgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy50YXNrcy5wdXNoKHRhc2spO1xuICAgICAgICAgICAgbmV4dFRpY2sodGhpcy5zY2hlZC5iaW5kKHRoaXMpKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIHVzZShmKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjcXVpcmUoKVxuICAgICAgICAgICAgLnRoZW4ocmVsZWFzZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gZigpXG4gICAgICAgICAgICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAgICAgICAgIHJlbGVhc2UoKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAuY2F0Y2goKGVycikgPT4ge1xuICAgICAgICAgICAgICAgIHJlbGVhc2UoKTtcbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5TZW1hcGhvcmUgPSBTZW1hcGhvcmU7XG5jbGFzcyBNdXRleCBleHRlbmRzIFNlbWFwaG9yZSB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKDEpO1xuICAgIH1cbn1cbmV4cG9ydHMuTXV0ZXggPSBNdXRleDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@broxus/await-semaphore/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@eversdk/appkit/dist/account.js":
/*!******************************************************!*\
  !*** ./node_modules/@eversdk/appkit/dist/account.js ***!
  \******************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.DefaultGiverContract = exports.Account = exports.AccountType = exports.AccountError = void 0;\nconst core_1 = __webpack_require__(/*! @eversdk/core */ \"./node_modules/@eversdk/core/dist/index.js\");\nvar ERR_CODES;\n(function (ERR_CODES) {\n    ERR_CODES[ERR_CODES[\"MISSING_TVC\"] = 0] = \"MISSING_TVC\";\n    ERR_CODES[ERR_CODES[\"ACC_NOT_EXISTS\"] = 1] = \"ACC_NOT_EXISTS\";\n})(ERR_CODES || (ERR_CODES = {}));\nclass AccountError extends Error {\n    constructor(opt) {\n        super(opt.message);\n        this.code = opt.code;\n    }\n    static missingTVC() {\n        return new AccountError({\n            code: ERR_CODES.MISSING_TVC,\n            message: \"Can't calculate deploy params: missing required TVC.\",\n        });\n    }\n    static missingBOC() {\n        return new AccountError({\n            code: ERR_CODES.ACC_NOT_EXISTS,\n            message: 'Account has an empty BOC. Possible reason is: account was deleted (has account type \"NonExist\")',\n        });\n    }\n}\nexports.AccountError = AccountError;\n/**\n * Current type of the account.\n */\nvar AccountType;\n(function (AccountType) {\n    /**\n     * Account exists in the blockchain but without smart contract.\n     */\n    AccountType[AccountType[\"uninit\"] = 0] = \"uninit\";\n    /**\n     * Account exists in the blockchain with smart contract.\n     */\n    AccountType[AccountType[\"active\"] = 1] = \"active\";\n    /**\n     * Account exists in the blockchain but it had frozen.\n     */\n    AccountType[AccountType[\"frozen\"] = 2] = \"frozen\";\n    /**\n     * Account is missing in the blockchain.\n     */\n    AccountType[AccountType[\"nonExist\"] = 3] = \"nonExist\";\n})(AccountType = exports.AccountType || (exports.AccountType = {}));\n/**\n * Object to deal with specified account using specified signer (owner).\n *\n * Account instance can be bound to account address\n * or account deploy parameters that uniquely identifies\n * account address.\n */\nclass Account {\n    /**\n     * Constructs account instance.\n     *\n     * @param contract Contract package containing abi and optional tvc data.\n     * @param options Account instance options.\n     */\n    constructor(contract, options) {\n        var _a, _b, _c, _d, _e;\n        this.syncLastTransLt = null;\n        this.cachedBoc = null;\n        this.subscriptions = null;\n        this.contract = contract;\n        this.client = (_a = options === null || options === void 0 ? void 0 : options.client) !== null && _a !== void 0 ? _a : core_1.TonClient.default;\n        this.abi = (0, core_1.abiContract)(contract.abi);\n        this.signer = (_b = options === null || options === void 0 ? void 0 : options.signer) !== null && _b !== void 0 ? _b : (0, core_1.signerNone)();\n        this.address = (_c = options === null || options === void 0 ? void 0 : options.address) !== null && _c !== void 0 ? _c : null;\n        this.initData = (_d = options === null || options === void 0 ? void 0 : options.initData) !== null && _d !== void 0 ? _d : null;\n        this.useCachedState = (_e = options === null || options === void 0 ? void 0 : options.useCachedState) !== null && _e !== void 0 ? _e : false;\n    }\n    /**\n     * Returns the giver instance assigned for specified client instance.\n     * Or `null` if no giver is associated with this client yet.\n     *\n     * @param client Client instance looking for.\n     */\n    static findGiverForClient(client) {\n        var _a;\n        return (_a = this.giversByClient.find(x => x.client === client)) === null || _a === void 0 ? void 0 : _a.giver;\n    }\n    /**\n     * Assigns specified giver as a default for specified client instance.\n     * If client already has default giver it will be reassigned.\n     *\n     * @param client Client instance.\n     * @param giver New giver instance or `null` if the default giver for\n     * this client must be removed.\n     */\n    static setGiverForClient(client, giver) {\n        const i = this.giversByClient.findIndex(x => x.client === client);\n        if (i >= 0) {\n            if (giver) {\n                this.giversByClient[i].giver = giver;\n            }\n            else {\n                this.giversByClient.splice(i, 1);\n            }\n        }\n        else if (giver) {\n            this.giversByClient.push({\n                client,\n                giver,\n            });\n        }\n    }\n    static createGiver(client) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const giverKeys = yield getDefaultGiverKeys(client);\n            const giverAddress = yield getDefaultGiverAddress(client, giverKeys);\n            const giver = new Account(exports.DefaultGiverContract, {\n                client,\n                address: giverAddress,\n                signer: (0, core_1.signerKeys)(giverKeys),\n            });\n            return {\n                address: giverAddress,\n                sendTo: (address, value) => __awaiter(this, void 0, void 0, function* () {\n                    yield giver.run(\"sendTransaction\", {\n                        dest: address,\n                        value,\n                        bounce: false,\n                    });\n                }),\n            };\n        });\n    }\n    /**\n     * Returns the default giver for specified client instance.\n     * If no giver assigned yet then new one will be created,\n     * assigned and returned.\n     *\n     * @param client Client instance.\n     */\n    static getGiverForClient(client) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const existing = this.findGiverForClient(client);\n            if (existing) {\n                return existing;\n            }\n            const giver = yield this.createGiver(client);\n            this.giversByClient.push({\n                client,\n                giver,\n            });\n            return giver;\n        });\n    }\n    /**\n     * Returns address of the account.\n     *\n     * Uses address specified in constructor options\n     * or calculates it from deploy data provided in constructor.\n     */\n    getAddress() {\n        return __awaiter(this, void 0, void 0, function* () {\n            let address = this.address;\n            if (address === null) {\n                const deployParams = this.getParamsOfDeployMessage({\n                    initFunctionName: null,\n                });\n                address = (yield this.client.abi.encode_message(deployParams)).address;\n                this.address = address;\n            }\n            return address;\n        });\n    }\n    /**\n     * Returns params for encoding deploy message.\n     * @param options Message encoding options.\n     */\n    getParamsOfDeployMessage(options) {\n        var _a;\n        if (!this.contract.tvc) {\n            throw AccountError.missingTVC();\n        }\n        const params = {\n            abi: this.abi,\n            signer: this.signer,\n            deploy_set: {\n                tvc: this.contract.tvc,\n            },\n        };\n        if (this.initData) {\n            params.deploy_set.initial_data = this.initData;\n        }\n        if ((options === null || options === void 0 ? void 0 : options.initFunctionName) !== null) {\n            params.call_set = {\n                function_name: (_a = options === null || options === void 0 ? void 0 : options.initFunctionName) !== null && _a !== void 0 ? _a : \"constructor\",\n            };\n            if ((options === null || options === void 0 ? void 0 : options.initInput) !== undefined) {\n                params.call_set.input = options.initInput;\n            }\n        }\n        return params;\n    }\n    /**\n     * Calculates detailed deploy fees.\n     */\n    calcDeployFees(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const deployParams = yield this.getParamsOfDeployMessage(options);\n            const message = yield this.client.abi.encode_message(deployParams);\n            const result = yield this.client.tvm.run_executor({\n                account: (0, core_1.accountForExecutorUninit)(),\n                abi: this.abi,\n                message: message.message,\n            });\n            return result.fees;\n        });\n    }\n    /**\n     * Deploys account into network\n     * @param options\n     */\n    deploy(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const deployParams = this.getParamsOfDeployMessage(options);\n            const useGiver = options === null || options === void 0 ? void 0 : options.useGiver;\n            const giver = useGiver === true ? (yield Account.getGiverForClient(this.client)) : useGiver;\n            this.address = (yield this.client.abi.encode_message(deployParams)).address;\n            if (giver) {\n                yield giver.sendTo(this.address, 10000000000);\n            }\n            const result = yield this.client.processing.process_message({\n                message_encode_params: deployParams,\n                send_events: false,\n            });\n            this.needSyncWithTransaction(result.transaction);\n            return result;\n        });\n    }\n    /**\n     * Emulate deploy\n     * @param options\n     */\n    deployLocal(options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const deployParams = this.getParamsOfDeployMessage(options);\n            const { address, message, } = yield this.client.abi.encode_message(deployParams);\n            const result = yield this.client.tvm.run_executor({\n                account: (0, core_1.accountForExecutorUninit)(),\n                abi: this.abi,\n                message,\n                return_updated_account: true,\n            });\n            this.address = address;\n            this.cachedBoc = result.account;\n            return result;\n        });\n    }\n    /**\n     * Calculates detailed fees for specified run parameters.\n     *\n     * @param functionName Name of the function according to the ABI.\n     * @param input Object with function parameters (function parameters).\n     */\n    calcRunFees(functionName, input) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const message = yield this.client.abi.encode_message({\n                address: yield this.getAddress(),\n                abi: this.abi,\n                signer: this.signer,\n                call_set: {\n                    function_name: functionName,\n                    input,\n                },\n            });\n            let result;\n            result = yield this.client.tvm.run_executor({\n                account: (0, core_1.accountForExecutorAccount)(yield this.boc()),\n                abi: this.abi,\n                message: message.message,\n            });\n            return result.fees;\n        });\n    }\n    /**\n     * Process message on network and returns detailed information\n     * about results including produced transaction and messages.\n     *\n     * @param functionName Name of the function according to the ABI.\n     * @param input Object with function parameters (function parameters).\n     * @param options Run options.\n     */\n    run(functionName, input, options) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = (yield this.client.processing.process_message({\n                message_encode_params: {\n                    address: yield this.getAddress(),\n                    abi: this.abi,\n                    signer: (_a = options === null || options === void 0 ? void 0 : options.signer) !== null && _a !== void 0 ? _a : this.signer,\n                    call_set: {\n                        function_name: functionName,\n                        input,\n                    },\n                },\n                send_events: false,\n            }));\n            this.needSyncWithTransaction(result.transaction);\n            return result;\n        });\n    }\n    /**\n     * Evaluates message on local TVM and returns decoded output.\n     *\n     * @param functionName Name of the function according to the ABI.\n     * @param input Object with function parameters (function input).\n     * @param options Run options.\n     */\n    runLocal(functionName, input, options) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const message = yield this.client.abi.encode_message({\n                address: yield this.getAddress(),\n                abi: this.abi,\n                signer: this.signer,\n                call_set: {\n                    function_name: functionName,\n                    input,\n                },\n            });\n            let result;\n            if (options === null || options === void 0 ? void 0 : options.performAllChecks) {\n                result = yield this.client.tvm.run_executor({\n                    account: (0, core_1.accountForExecutorAccount)(yield this.boc()),\n                    abi: this.abi,\n                    message: message.message,\n                    return_updated_account: true,\n                });\n            }\n            else {\n                result = (yield this.client.tvm.run_tvm({\n                    account: yield this.boc(),\n                    abi: this.abi,\n                    message: message.message,\n                    return_updated_account: true,\n                }));\n            }\n            if (result.account) {\n                this.cachedBoc = result.account;\n            }\n            return result;\n        });\n    }\n    needSyncWithTransaction(transaction) {\n        if (!transaction.aborted && transaction.lt) {\n            this.syncLastTransLt = transaction.lt;\n            this.cachedBoc = null;\n        }\n    }\n    /**\n     * Returns raw data of the account in form of BOC.\n     * Fetches boc data from network and caches it in private field.\n     * `runLocal` updates cached boc.\n     * `run` drops cached boc.\n     * This function syncs fetching boc with last `run` or `deploy`\n     * so fetched boc\n     */\n    boc() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.cachedBoc && this.useCachedState) {\n                return this.cachedBoc;\n            }\n            const address = yield this.getAddress();\n            const net = this.client.net;\n            if (this.syncLastTransLt) {\n                const accounts = yield net.query_collection({\n                    collection: \"accounts\",\n                    filter: {\n                        id: { eq: address },\n                        last_trans_lt: { ge: this.syncLastTransLt },\n                    },\n                    result: \"boc\",\n                });\n                if (accounts.result.length > 0) {\n                    const boc = accounts.result[0].boc;\n                    this.syncLastTransLt = null;\n                    if (boc) {\n                        this.cachedBoc = boc;\n                        return boc;\n                    }\n                    throw AccountError.missingBOC();\n                }\n            }\n            try {\n                const boc = (\n                // Returns BOC or null if account was found in DB, but has \"NotExists\" status\n                // Throws if:\n                //  - account NOT found in DB (err.code 603) \n                //  - some network error occured\n                yield net.wait_for_collection({\n                    collection: \"accounts\",\n                    filter: { id: { eq: this.address } },\n                    result: \"boc\",\n                    timeout: 1000,\n                })).result.boc;\n                if (boc) {\n                    this.cachedBoc = boc;\n                    return boc;\n                }\n                throw AccountError.missingBOC();\n            }\n            catch (error) {\n                if (error.code === 603) {\n                    throw AccountError.missingBOC();\n                }\n                throw error;\n            }\n        });\n    }\n    /**\n     * Drops all cached and local data.\n     */\n    refresh() {\n        this.cachedBoc = null;\n    }\n    /**\n     * Returns parsed data of the account.\n     */\n    getAccount() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const boc = yield this.boc();\n                return (yield this.client.boc.parse_account({ boc })).parsed;\n            }\n            catch (err) {\n                if (err.code === ERR_CODES.ACC_NOT_EXISTS) {\n                    return {\n                        acc_type: AccountType.nonExist,\n                    };\n                }\n            }\n        });\n    }\n    subscribeAccount(fields, listener) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield this.subscribe(\"accounts\", { id: { eq: yield this.getAddress() } }, fields, listener);\n        });\n    }\n    subscribeTransactions(fields, listener) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.getAddress();\n            yield this.subscribe(\"transactions\", {\n                account_addr: { eq: address },\n                status: { eq: 5 },\n            }, fields, listener);\n        });\n    }\n    subscribeMessages(fields, listener) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const address = yield this.getAddress();\n            yield this.subscribe(\"messages\", {\n                status: { eq: 5 },\n                src: { eq: address },\n                OR: {\n                    status: { eq: 5 },\n                    dst: { eq: address },\n                },\n            }, fields, listener);\n        });\n    }\n    decodeMessage(message) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield core_1.TonClient.default.abi.decode_message({\n                abi: this.abi,\n                message,\n            });\n        });\n    }\n    decodeMessageBody(body, isInternal) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield core_1.TonClient.default.abi.decode_message_body({\n                abi: this.abi,\n                body,\n                is_internal: isInternal,\n            });\n        });\n    }\n    getBalance() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return (yield this.getAccount()).balance;\n        });\n    }\n    subscribe(collection, filter, fields, listener) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            const prevSubscription = this.subscriptions && this.subscriptions.get(collection);\n            if (prevSubscription) {\n                (_a = this.subscriptions) === null || _a === void 0 ? void 0 : _a.delete(collection);\n                yield this.client.net.unsubscribe(prevSubscription);\n            }\n            else if (!this.subscriptions) {\n                this.subscriptions = new Map();\n            }\n            const subscription = yield this.client.net.subscribe_collection({\n                collection,\n                filter,\n                result: fields,\n            }, ((params, responseType) => {\n                if (responseType === 100) {\n                    listener(params.result);\n                }\n            }));\n            (_b = this.subscriptions) === null || _b === void 0 ? void 0 : _b.set(collection, subscription);\n        });\n    }\n    /**\n     * Free all internal resources related to this instance\n     * and allocated inside core.\n     *\n     * It is a good practice to call this method when you have finished\n     * with this Account object.\n     *\n     * Note that this instance still fully operable.\n     * So you can continue to work with this instance.\n     */\n    free() {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.subscriptions) {\n                const subscriptions = this.subscriptions.values();\n                this.subscriptions = null;\n                for (const subscription of subscriptions) {\n                    yield this.client.net.unsubscribe(subscription);\n                }\n            }\n        });\n    }\n}\nexports.Account = Account;\nAccount.giversByClient = [];\nfunction getEnv(name) {\n    const globalEval = eval;\n    try {\n        return globalEval(`process.env.${name}`);\n    }\n    catch (_a) {\n        return undefined;\n    }\n}\nfunction getDefaultGiverKeys(client) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const definedSecret = getEnv(\"TON_GIVER_SECRET\");\n        if (definedSecret) {\n            const definedKeys = yield client.crypto.nacl_sign_keypair_from_secret_key({\n                secret: definedSecret,\n            });\n            definedKeys.secret = definedKeys.secret.substr(0, 64);\n            return definedKeys;\n        }\n        // noinspection SpellCheckingInspection\n        return {\n            \"public\": \"2ada2e65ab8eeab09490e3521415f45b6e42df9c760a639bcf53957550b25a16\",\n            \"secret\": \"172af540e43a524763dd53b26a066d472a97c4de37d5498170564510608250c3\",\n        };\n    });\n}\nfunction getDefaultGiverAddress(client, keys) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const definedAddress = getEnv(\"TON_GIVER_ADDRESS\");\n        if (definedAddress) {\n            return definedAddress;\n        }\n        return (yield client.abi.encode_message({\n            abi: (0, core_1.abiContract)(exports.DefaultGiverContract.abi),\n            deploy_set: {\n                tvc: (_a = exports.DefaultGiverContract.tvc) !== null && _a !== void 0 ? _a : \"\",\n            },\n            signer: (0, core_1.signerKeys)(keys),\n        })).address;\n    });\n}\n// noinspection SpellCheckingInspection\nexports.DefaultGiverContract = {\n    abi: {\n        \"ABI version\": 2,\n        header: [\"time\", \"expire\"],\n        functions: [\n            {\n                name: \"sendTransaction\",\n                inputs: [\n                    {\n                        \"name\": \"dest\",\n                        \"type\": \"address\",\n                    },\n                    {\n                        \"name\": \"value\",\n                        \"type\": \"uint128\",\n                    },\n                    {\n                        \"name\": \"bounce\",\n                        \"type\": \"bool\",\n                    },\n                ],\n                outputs: [],\n            },\n            {\n                name: \"getMessages\",\n                inputs: [],\n                outputs: [\n                    {\n                        components: [\n                            {\n                                name: \"hash\",\n                                type: \"uint256\",\n                            },\n                            {\n                                name: \"expireAt\",\n                                type: \"uint64\",\n                            },\n                        ],\n                        name: \"messages\",\n                        type: \"tuple[]\",\n                    },\n                ],\n            },\n            {\n                name: \"upgrade\",\n                inputs: [\n                    {\n                        name: \"newcode\",\n                        type: \"cell\",\n                    },\n                ],\n                outputs: [],\n            },\n            {\n                name: \"constructor\",\n                inputs: [],\n                outputs: [],\n            },\n        ],\n        data: [],\n        events: [],\n    },\n    tvc: \"te6ccgECGgEAA9sAAgE0BgEBAcACAgPPIAUDAQHeBAAD0CAAQdgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAIm/wD0pCAiwAGS9KDhiu1TWDD0oQkHAQr0pCD0oQgAAAIBIAwKAfz/fyHtRNAg10nCAZ/T/9MA9AX4an/4Yfhm+GKOG/QFbfhqcAGAQPQO8r3XC//4YnD4Y3D4Zn/4YeLTAAGOEoECANcYIPkBWPhCIPhl+RDyqN4j+EL4RSBukjBw3rry4GUh0z/THzQx+CMhAb7yuSH5ACD4SoEBAPQOIJEx3rMLAE7y4Gb4ACH4SiIBVQHIyz9ZgQEA9EP4aiMEXwTTHwHwAfhHbpLyPN4CASASDQIBWBEOAQm46Jj8UA8B/vhBbo4S7UTQ0//TAPQF+Gp/+GH4Zvhi3tFwbW8C+EqBAQD0hpUB1ws/f5NwcHDikSCONyMjI28CbyLIIs8L/yHPCz8xMQFvIiGkA1mAIPRDbwI0IvhKgQEA9HyVAdcLP3+TcHBw4gI1MzHoXwPIghB3RMfighCAAAAAsc8LHyEQAKJvIgLLH/QAyIJYYAAAAAAAAAAAAAAAAM8LZoEDmCLPMQG5lnHPQCHPF5Vxz0EhzeIgyXH7AFswwP+OEvhCyMv/+EbPCwD4SgH0AMntVN5/+GcAxbkWq+f/CC3Rxt2omgQa6ThAM/p/+mAegL8NT/8MPwzfDFHDfoCtvw1OADAIHoHeV7rhf/8MTh8Mbh8Mz/8MPFvfCNJeRnJuPwzcXwAaPwhZGX//CNnhYB8JQD6AGT2qj/8M8AIBIBUTAde7Fe+TX4QW6OEu1E0NP/0wD0Bfhqf/hh+Gb4Yt76QNcNf5XU0dDTf9/XDACV1NHQ0gDf0SIiInPIcc8LASLPCgBzz0AkzxYj+gKAac9Acs9AIMki+wBfBfhKgQEA9IaVAdcLP3+TcHBw4pEggUAJKOLfgjIgG7n/hKIwEhAYEBAPRbMDH4at4i+EqBAQD0fJUB1ws/f5NwcHDiAjUzMehfA18D+ELIy//4Rs8LAPhKAfQAye1Uf/hnAgEgFxYAx7jkYYdfCC3Rwl2omhp/+mAegL8NT/8MPwzfDFvamj8IXwikDdJGDhvXXlwMvwAfCFkZf/8I2eFgHwlAPoAZPaqfAeQfYIQaHaPdqn4ARh8IWRl//wjZ4WAfCUA+gBk9qo//DPACAtoZGAAtr4QsjL//hGzwsA+EoB9ADJ7VT4D/IAgAdacCHHAJ0i0HPXIdcLAMABkJDi4CHXDR+S8jzhUxHAAJDgwQMighD////9vLGS8jzgAfAB+EdukvI83o\",\n};\n//# sourceMappingURL=account.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@eversdk/appkit/dist/account.js\n");

/***/ }),

/***/ "./node_modules/@eversdk/appkit/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@eversdk/appkit/dist/index.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./account */ \"./node_modules/@eversdk/appkit/dist/account.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV2ZXJzZGsvYXBwa2l0L2Rpc3QvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZXgtYmF0dGxlLWdhbWUvLi9ub2RlX21vZHVsZXMvQGV2ZXJzZGsvYXBwa2l0L2Rpc3QvaW5kZXguanM/ZDU3MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbnZhciBfX2NyZWF0ZUJpbmRpbmcgPSAodGhpcyAmJiB0aGlzLl9fY3JlYXRlQmluZGluZykgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihtLCBrKTtcbiAgICBpZiAoIWRlc2MgfHwgKFwiZ2V0XCIgaW4gZGVzYyA/ICFtLl9fZXNNb2R1bGUgOiBkZXNjLndyaXRhYmxlIHx8IGRlc2MuY29uZmlndXJhYmxlKSkge1xuICAgICAgZGVzYyA9IHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG8sIGsyLCBkZXNjKTtcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XG4gICAgaWYgKGsyID09PSB1bmRlZmluZWQpIGsyID0gaztcbiAgICBvW2syXSA9IG1ba107XG59KSk7XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2FjY291bnRcIiksIGV4cG9ydHMpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@eversdk/appkit/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@eversdk/core/dist/bin.js":
/*!************************************************!*\
  !*** ./node_modules/@eversdk/core/dist/bin.js ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CommonBinaryBridge = exports.useLibrary = exports.getBridge = exports.ResponseType = void 0;\nconst errors_1 = __webpack_require__(/*! ./errors */ \"./node_modules/@eversdk/core/dist/errors.js\");\nvar ResponseType;\n(function (ResponseType) {\n    ResponseType[ResponseType[\"Success\"] = 0] = \"Success\";\n    ResponseType[ResponseType[\"Error\"] = 1] = \"Error\";\n    ResponseType[ResponseType[\"Nop\"] = 2] = \"Nop\";\n    ResponseType[ResponseType[\"AppRequest\"] = 3] = \"AppRequest\";\n    ResponseType[ResponseType[\"AppNotify\"] = 4] = \"AppNotify\";\n    ResponseType[ResponseType[\"Custom\"] = 100] = \"Custom\";\n})(ResponseType = exports.ResponseType || (exports.ResponseType = {}));\nlet bridge = undefined;\nfunction getBridge() {\n    if (!bridge) {\n        throw new errors_1.TonClientError(1, \"TON Client binary bridge isn't set.\");\n    }\n    return bridge;\n}\nexports.getBridge = getBridge;\nfunction useLibrary(loader) {\n    if (\"createContext\" in loader) {\n        bridge = loader;\n    }\n    else {\n        bridge = new CommonBinaryBridge(loader);\n    }\n}\nexports.useLibrary = useLibrary;\nclass BinaryLibraryAdapter {\n    constructor(library) {\n        this.library = library;\n    }\n    setResponseParamsHandler(handler) {\n        if (handler === undefined) {\n            this.library.setResponseHandler(undefined);\n        }\n        else {\n            this.library.setResponseHandler((requestId, paramsJson, responseType, finished) => handler(requestId, paramsJson !== \"\" ? JSON.parse(paramsJson) : undefined, responseType, finished));\n        }\n    }\n    sendRequestParams(context, requestId, functionName, functionParams) {\n        const paramsJson = (functionParams === undefined) || (functionParams === null)\n            ? \"\"\n            : JSON.stringify(functionParams, (_, value) => typeof value === \"bigint\"\n                ? (value < Number.MAX_SAFE_INTEGER && value > Number.MIN_SAFE_INTEGER\n                    ? Number(value)\n                    : value.toString())\n                : value);\n        this.library.sendRequest(context, requestId, functionName, paramsJson);\n    }\n    createContext(configJson) {\n        return this.library.createContext(configJson);\n    }\n    destroyContext(context) {\n        this.library.destroyContext(context);\n    }\n}\nclass CommonBinaryBridge {\n    constructor(loader) {\n        this.loading = undefined;\n        this.loadError = undefined;\n        this.library = undefined;\n        this.requests = new Map();\n        this.nextRequestId = 1;\n        this.contextCount = 0;\n        this.responseHandlerAssigned = false;\n        this.loading = [];\n        loader().then((library) => {\n            const saveLoading = this.loading;\n            this.loading = undefined;\n            let libraryWithParams = \"setResponseParamsHandler\" in library\n                ? library\n                : new BinaryLibraryAdapter(library);\n            this.library = libraryWithParams;\n            saveLoading === null || saveLoading === void 0 ? void 0 : saveLoading.forEach(x => x.resolve(libraryWithParams));\n        }, (reason) => {\n            const saveLoading = this.loading;\n            this.loading = undefined;\n            this.loadError = reason !== null && reason !== void 0 ? reason : undefined;\n            saveLoading === null || saveLoading === void 0 ? void 0 : saveLoading.forEach(x => x.reject(reason));\n        });\n    }\n    checkResponseHandler() {\n        var _a, _b;\n        const mustBeAssigned = (this.contextCount > 0) || (this.requests.size > 0);\n        if (this.responseHandlerAssigned !== mustBeAssigned) {\n            if (mustBeAssigned) {\n                (_a = this.library) === null || _a === void 0 ? void 0 : _a.setResponseParamsHandler((requestId, params, responseType, finished) => this.handleLibraryResponse(requestId, params, responseType, finished));\n            }\n            else {\n                (_b = this.library) === null || _b === void 0 ? void 0 : _b.setResponseParamsHandler();\n            }\n            this.responseHandlerAssigned = mustBeAssigned;\n        }\n    }\n    createContext(config) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const lib = this.library || (yield this.loadRequired());\n            this.contextCount += 1;\n            return CommonBinaryBridge.parseResult(yield lib.createContext(JSON.stringify(config)));\n        });\n    }\n    destroyContext(context) {\n        var _a;\n        this.contextCount = Math.max(this.contextCount - 1, 0);\n        this.checkResponseHandler();\n        (_a = this.library) === null || _a === void 0 ? void 0 : _a.destroyContext(context);\n    }\n    request(context, functionName, functionParams, responseHandler) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const lib = (_a = this.library) !== null && _a !== void 0 ? _a : yield this.loadRequired();\n            return new Promise((resolve, reject) => {\n                const request = {\n                    resolve,\n                    reject,\n                    responseHandler,\n                };\n                const requestId = this.generateRequestId();\n                this.requests.set(requestId, request);\n                this.checkResponseHandler();\n                lib.sendRequestParams(context, requestId, functionName, functionParams);\n            });\n        });\n    }\n    loadRequired() {\n        if (this.library !== undefined) {\n            return Promise.resolve(this.library);\n        }\n        if (this.loadError !== undefined) {\n            return Promise.reject(this.loadError);\n        }\n        if (this.loading === undefined) {\n            return Promise.reject(new errors_1.TonClientError(1, \"TON Client binary library isn't set.\"));\n        }\n        return new Promise((resolve, reject) => {\n            var _a;\n            (_a = this.loading) === null || _a === void 0 ? void 0 : _a.push({\n                resolve,\n                reject,\n            });\n        });\n    }\n    generateRequestId() {\n        const id = this.nextRequestId;\n        do {\n            this.nextRequestId += 1;\n            if (this.nextRequestId >= Number.MAX_SAFE_INTEGER) {\n                this.nextRequestId = 1;\n            }\n        } while (this.requests.has(this.nextRequestId));\n        return id;\n    }\n    handleLibraryResponse(requestId, params, responseType, finished) {\n        const request = this.requests.get(requestId);\n        if (!request) {\n            return;\n        }\n        if (finished) {\n            this.requests.delete(requestId);\n            this.checkResponseHandler();\n        }\n        switch (responseType) {\n            case ResponseType.Success:\n                request.resolve(params);\n                break;\n            case ResponseType.Error:\n                request.reject(params);\n                break;\n            default:\n                const isAppObjectOrCustom = responseType === ResponseType.AppNotify\n                    || responseType === ResponseType.AppRequest\n                    || responseType >= ResponseType.Custom;\n                if (isAppObjectOrCustom && request.responseHandler) {\n                    request.responseHandler(params, responseType);\n                }\n        }\n    }\n    static parseResult(resultJson) {\n        const result = JSON.parse(resultJson);\n        if (\"error\" in result) {\n            throw new errors_1.TonClientError(result.error.code, result.error.message, result.error.data);\n        }\n        return result.result;\n    }\n}\nexports.CommonBinaryBridge = CommonBinaryBridge;\n//# sourceMappingURL=bin.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV2ZXJzZGsvY29yZS9kaXN0L2Jpbi5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2hleC1iYXR0bGUtZ2FtZS8uL25vZGVfbW9kdWxlcy9AZXZlcnNkay9jb3JlL2Rpc3QvYmluLmpzPzBkODgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19hd2FpdGVyID0gKHRoaXMgJiYgdGhpcy5fX2F3YWl0ZXIpIHx8IGZ1bmN0aW9uICh0aGlzQXJnLCBfYXJndW1lbnRzLCBQLCBnZW5lcmF0b3IpIHtcbiAgICBmdW5jdGlvbiBhZG9wdCh2YWx1ZSkgeyByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBQID8gdmFsdWUgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHZhbHVlKTsgfSk7IH1cbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgZnVuY3Rpb24gZnVsZmlsbGVkKHZhbHVlKSB7IHRyeSB7IHN0ZXAoZ2VuZXJhdG9yLm5leHQodmFsdWUpKTsgfSBjYXRjaCAoZSkgeyByZWplY3QoZSk7IH0gfVxuICAgICAgICBmdW5jdGlvbiByZWplY3RlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvcltcInRocm93XCJdKHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cbiAgICAgICAgc3RlcCgoZ2VuZXJhdG9yID0gZ2VuZXJhdG9yLmFwcGx5KHRoaXNBcmcsIF9hcmd1bWVudHMgfHwgW10pKS5uZXh0KCkpO1xuICAgIH0pO1xufTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuQ29tbW9uQmluYXJ5QnJpZGdlID0gZXhwb3J0cy51c2VMaWJyYXJ5ID0gZXhwb3J0cy5nZXRCcmlkZ2UgPSBleHBvcnRzLlJlc3BvbnNlVHlwZSA9IHZvaWQgMDtcbmNvbnN0IGVycm9yc18xID0gcmVxdWlyZShcIi4vZXJyb3JzXCIpO1xudmFyIFJlc3BvbnNlVHlwZTtcbihmdW5jdGlvbiAoUmVzcG9uc2VUeXBlKSB7XG4gICAgUmVzcG9uc2VUeXBlW1Jlc3BvbnNlVHlwZVtcIlN1Y2Nlc3NcIl0gPSAwXSA9IFwiU3VjY2Vzc1wiO1xuICAgIFJlc3BvbnNlVHlwZVtSZXNwb25zZVR5cGVbXCJFcnJvclwiXSA9IDFdID0gXCJFcnJvclwiO1xuICAgIFJlc3BvbnNlVHlwZVtSZXNwb25zZVR5cGVbXCJOb3BcIl0gPSAyXSA9IFwiTm9wXCI7XG4gICAgUmVzcG9uc2VUeXBlW1Jlc3BvbnNlVHlwZVtcIkFwcFJlcXVlc3RcIl0gPSAzXSA9IFwiQXBwUmVxdWVzdFwiO1xuICAgIFJlc3BvbnNlVHlwZVtSZXNwb25zZVR5cGVbXCJBcHBOb3RpZnlcIl0gPSA0XSA9IFwiQXBwTm90aWZ5XCI7XG4gICAgUmVzcG9uc2VUeXBlW1Jlc3BvbnNlVHlwZVtcIkN1c3RvbVwiXSA9IDEwMF0gPSBcIkN1c3RvbVwiO1xufSkoUmVzcG9uc2VUeXBlID0gZXhwb3J0cy5SZXNwb25zZVR5cGUgfHwgKGV4cG9ydHMuUmVzcG9uc2VUeXBlID0ge30pKTtcbmxldCBicmlkZ2UgPSB1bmRlZmluZWQ7XG5mdW5jdGlvbiBnZXRCcmlkZ2UoKSB7XG4gICAgaWYgKCFicmlkZ2UpIHtcbiAgICAgICAgdGhyb3cgbmV3IGVycm9yc18xLlRvbkNsaWVudEVycm9yKDEsIFwiVE9OIENsaWVudCBiaW5hcnkgYnJpZGdlIGlzbid0IHNldC5cIik7XG4gICAgfVxuICAgIHJldHVybiBicmlkZ2U7XG59XG5leHBvcnRzLmdldEJyaWRnZSA9IGdldEJyaWRnZTtcbmZ1bmN0aW9uIHVzZUxpYnJhcnkobG9hZGVyKSB7XG4gICAgaWYgKFwiY3JlYXRlQ29udGV4dFwiIGluIGxvYWRlcikge1xuICAgICAgICBicmlkZ2UgPSBsb2FkZXI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBicmlkZ2UgPSBuZXcgQ29tbW9uQmluYXJ5QnJpZGdlKGxvYWRlcik7XG4gICAgfVxufVxuZXhwb3J0cy51c2VMaWJyYXJ5ID0gdXNlTGlicmFyeTtcbmNsYXNzIEJpbmFyeUxpYnJhcnlBZGFwdGVyIHtcbiAgICBjb25zdHJ1Y3RvcihsaWJyYXJ5KSB7XG4gICAgICAgIHRoaXMubGlicmFyeSA9IGxpYnJhcnk7XG4gICAgfVxuICAgIHNldFJlc3BvbnNlUGFyYW1zSGFuZGxlcihoYW5kbGVyKSB7XG4gICAgICAgIGlmIChoYW5kbGVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRoaXMubGlicmFyeS5zZXRSZXNwb25zZUhhbmRsZXIodW5kZWZpbmVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubGlicmFyeS5zZXRSZXNwb25zZUhhbmRsZXIoKHJlcXVlc3RJZCwgcGFyYW1zSnNvbiwgcmVzcG9uc2VUeXBlLCBmaW5pc2hlZCkgPT4gaGFuZGxlcihyZXF1ZXN0SWQsIHBhcmFtc0pzb24gIT09IFwiXCIgPyBKU09OLnBhcnNlKHBhcmFtc0pzb24pIDogdW5kZWZpbmVkLCByZXNwb25zZVR5cGUsIGZpbmlzaGVkKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc2VuZFJlcXVlc3RQYXJhbXMoY29udGV4dCwgcmVxdWVzdElkLCBmdW5jdGlvbk5hbWUsIGZ1bmN0aW9uUGFyYW1zKSB7XG4gICAgICAgIGNvbnN0IHBhcmFtc0pzb24gPSAoZnVuY3Rpb25QYXJhbXMgPT09IHVuZGVmaW5lZCkgfHwgKGZ1bmN0aW9uUGFyYW1zID09PSBudWxsKVxuICAgICAgICAgICAgPyBcIlwiXG4gICAgICAgICAgICA6IEpTT04uc3RyaW5naWZ5KGZ1bmN0aW9uUGFyYW1zLCAoXywgdmFsdWUpID0+IHR5cGVvZiB2YWx1ZSA9PT0gXCJiaWdpbnRcIlxuICAgICAgICAgICAgICAgID8gKHZhbHVlIDwgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgJiYgdmFsdWUgPiBOdW1iZXIuTUlOX1NBRkVfSU5URUdFUlxuICAgICAgICAgICAgICAgICAgICA/IE51bWJlcih2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgOiB2YWx1ZS50b1N0cmluZygpKVxuICAgICAgICAgICAgICAgIDogdmFsdWUpO1xuICAgICAgICB0aGlzLmxpYnJhcnkuc2VuZFJlcXVlc3QoY29udGV4dCwgcmVxdWVzdElkLCBmdW5jdGlvbk5hbWUsIHBhcmFtc0pzb24pO1xuICAgIH1cbiAgICBjcmVhdGVDb250ZXh0KGNvbmZpZ0pzb24pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubGlicmFyeS5jcmVhdGVDb250ZXh0KGNvbmZpZ0pzb24pO1xuICAgIH1cbiAgICBkZXN0cm95Q29udGV4dChjb250ZXh0KSB7XG4gICAgICAgIHRoaXMubGlicmFyeS5kZXN0cm95Q29udGV4dChjb250ZXh0KTtcbiAgICB9XG59XG5jbGFzcyBDb21tb25CaW5hcnlCcmlkZ2Uge1xuICAgIGNvbnN0cnVjdG9yKGxvYWRlcikge1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMubG9hZEVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLmxpYnJhcnkgPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMucmVxdWVzdHMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMubmV4dFJlcXVlc3RJZCA9IDE7XG4gICAgICAgIHRoaXMuY29udGV4dENvdW50ID0gMDtcbiAgICAgICAgdGhpcy5yZXNwb25zZUhhbmRsZXJBc3NpZ25lZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmxvYWRpbmcgPSBbXTtcbiAgICAgICAgbG9hZGVyKCkudGhlbigobGlicmFyeSkgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2F2ZUxvYWRpbmcgPSB0aGlzLmxvYWRpbmc7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBsZXQgbGlicmFyeVdpdGhQYXJhbXMgPSBcInNldFJlc3BvbnNlUGFyYW1zSGFuZGxlclwiIGluIGxpYnJhcnlcbiAgICAgICAgICAgICAgICA/IGxpYnJhcnlcbiAgICAgICAgICAgICAgICA6IG5ldyBCaW5hcnlMaWJyYXJ5QWRhcHRlcihsaWJyYXJ5KTtcbiAgICAgICAgICAgIHRoaXMubGlicmFyeSA9IGxpYnJhcnlXaXRoUGFyYW1zO1xuICAgICAgICAgICAgc2F2ZUxvYWRpbmcgPT09IG51bGwgfHwgc2F2ZUxvYWRpbmcgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHNhdmVMb2FkaW5nLmZvckVhY2goeCA9PiB4LnJlc29sdmUobGlicmFyeVdpdGhQYXJhbXMpKTtcbiAgICAgICAgfSwgKHJlYXNvbikgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc2F2ZUxvYWRpbmcgPSB0aGlzLmxvYWRpbmc7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB0aGlzLmxvYWRFcnJvciA9IHJlYXNvbiAhPT0gbnVsbCAmJiByZWFzb24gIT09IHZvaWQgMCA/IHJlYXNvbiA6IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIHNhdmVMb2FkaW5nID09PSBudWxsIHx8IHNhdmVMb2FkaW5nID09PSB2b2lkIDAgPyB2b2lkIDAgOiBzYXZlTG9hZGluZy5mb3JFYWNoKHggPT4geC5yZWplY3QocmVhc29uKSk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBjaGVja1Jlc3BvbnNlSGFuZGxlcigpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgY29uc3QgbXVzdEJlQXNzaWduZWQgPSAodGhpcy5jb250ZXh0Q291bnQgPiAwKSB8fCAodGhpcy5yZXF1ZXN0cy5zaXplID4gMCk7XG4gICAgICAgIGlmICh0aGlzLnJlc3BvbnNlSGFuZGxlckFzc2lnbmVkICE9PSBtdXN0QmVBc3NpZ25lZCkge1xuICAgICAgICAgICAgaWYgKG11c3RCZUFzc2lnbmVkKSB7XG4gICAgICAgICAgICAgICAgKF9hID0gdGhpcy5saWJyYXJ5KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0UmVzcG9uc2VQYXJhbXNIYW5kbGVyKChyZXF1ZXN0SWQsIHBhcmFtcywgcmVzcG9uc2VUeXBlLCBmaW5pc2hlZCkgPT4gdGhpcy5oYW5kbGVMaWJyYXJ5UmVzcG9uc2UocmVxdWVzdElkLCBwYXJhbXMsIHJlc3BvbnNlVHlwZSwgZmluaXNoZWQpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIChfYiA9IHRoaXMubGlicmFyeSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLnNldFJlc3BvbnNlUGFyYW1zSGFuZGxlcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5yZXNwb25zZUhhbmRsZXJBc3NpZ25lZCA9IG11c3RCZUFzc2lnbmVkO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyZWF0ZUNvbnRleHQoY29uZmlnKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uKiAoKSB7XG4gICAgICAgICAgICBjb25zdCBsaWIgPSB0aGlzLmxpYnJhcnkgfHwgKHlpZWxkIHRoaXMubG9hZFJlcXVpcmVkKCkpO1xuICAgICAgICAgICAgdGhpcy5jb250ZXh0Q291bnQgKz0gMTtcbiAgICAgICAgICAgIHJldHVybiBDb21tb25CaW5hcnlCcmlkZ2UucGFyc2VSZXN1bHQoeWllbGQgbGliLmNyZWF0ZUNvbnRleHQoSlNPTi5zdHJpbmdpZnkoY29uZmlnKSkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZGVzdHJveUNvbnRleHQoY29udGV4dCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIHRoaXMuY29udGV4dENvdW50ID0gTWF0aC5tYXgodGhpcy5jb250ZXh0Q291bnQgLSAxLCAwKTtcbiAgICAgICAgdGhpcy5jaGVja1Jlc3BvbnNlSGFuZGxlcigpO1xuICAgICAgICAoX2EgPSB0aGlzLmxpYnJhcnkpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5kZXN0cm95Q29udGV4dChjb250ZXh0KTtcbiAgICB9XG4gICAgcmVxdWVzdChjb250ZXh0LCBmdW5jdGlvbk5hbWUsIGZ1bmN0aW9uUGFyYW1zLCByZXNwb25zZUhhbmRsZXIpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICByZXR1cm4gX19hd2FpdGVyKHRoaXMsIHZvaWQgMCwgdm9pZCAwLCBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgY29uc3QgbGliID0gKF9hID0gdGhpcy5saWJyYXJ5KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiB5aWVsZCB0aGlzLmxvYWRSZXF1aXJlZCgpO1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCByZXF1ZXN0ID0ge1xuICAgICAgICAgICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgICAgICAgICByZWplY3QsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSGFuZGxlcixcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RJZCA9IHRoaXMuZ2VuZXJhdGVSZXF1ZXN0SWQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnJlcXVlc3RzLnNldChyZXF1ZXN0SWQsIHJlcXVlc3QpO1xuICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tSZXNwb25zZUhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgICBsaWIuc2VuZFJlcXVlc3RQYXJhbXMoY29udGV4dCwgcmVxdWVzdElkLCBmdW5jdGlvbk5hbWUsIGZ1bmN0aW9uUGFyYW1zKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgbG9hZFJlcXVpcmVkKCkge1xuICAgICAgICBpZiAodGhpcy5saWJyYXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5saWJyYXJ5KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sb2FkRXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHRoaXMubG9hZEVycm9yKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sb2FkaW5nID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgZXJyb3JzXzEuVG9uQ2xpZW50RXJyb3IoMSwgXCJUT04gQ2xpZW50IGJpbmFyeSBsaWJyYXJ5IGlzbid0IHNldC5cIikpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgICAgICB2YXIgX2E7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLmxvYWRpbmcpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5wdXNoKHtcbiAgICAgICAgICAgICAgICByZXNvbHZlLFxuICAgICAgICAgICAgICAgIHJlamVjdCxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgZ2VuZXJhdGVSZXF1ZXN0SWQoKSB7XG4gICAgICAgIGNvbnN0IGlkID0gdGhpcy5uZXh0UmVxdWVzdElkO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICB0aGlzLm5leHRSZXF1ZXN0SWQgKz0gMTtcbiAgICAgICAgICAgIGlmICh0aGlzLm5leHRSZXF1ZXN0SWQgPj0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm5leHRSZXF1ZXN0SWQgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IHdoaWxlICh0aGlzLnJlcXVlc3RzLmhhcyh0aGlzLm5leHRSZXF1ZXN0SWQpKTtcbiAgICAgICAgcmV0dXJuIGlkO1xuICAgIH1cbiAgICBoYW5kbGVMaWJyYXJ5UmVzcG9uc2UocmVxdWVzdElkLCBwYXJhbXMsIHJlc3BvbnNlVHlwZSwgZmluaXNoZWQpIHtcbiAgICAgICAgY29uc3QgcmVxdWVzdCA9IHRoaXMucmVxdWVzdHMuZ2V0KHJlcXVlc3RJZCk7XG4gICAgICAgIGlmICghcmVxdWVzdCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChmaW5pc2hlZCkge1xuICAgICAgICAgICAgdGhpcy5yZXF1ZXN0cy5kZWxldGUocmVxdWVzdElkKTtcbiAgICAgICAgICAgIHRoaXMuY2hlY2tSZXNwb25zZUhhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKHJlc3BvbnNlVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBSZXNwb25zZVR5cGUuU3VjY2VzczpcbiAgICAgICAgICAgICAgICByZXF1ZXN0LnJlc29sdmUocGFyYW1zKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUmVzcG9uc2VUeXBlLkVycm9yOlxuICAgICAgICAgICAgICAgIHJlcXVlc3QucmVqZWN0KHBhcmFtcyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIGNvbnN0IGlzQXBwT2JqZWN0T3JDdXN0b20gPSByZXNwb25zZVR5cGUgPT09IFJlc3BvbnNlVHlwZS5BcHBOb3RpZnlcbiAgICAgICAgICAgICAgICAgICAgfHwgcmVzcG9uc2VUeXBlID09PSBSZXNwb25zZVR5cGUuQXBwUmVxdWVzdFxuICAgICAgICAgICAgICAgICAgICB8fCByZXNwb25zZVR5cGUgPj0gUmVzcG9uc2VUeXBlLkN1c3RvbTtcbiAgICAgICAgICAgICAgICBpZiAoaXNBcHBPYmplY3RPckN1c3RvbSAmJiByZXF1ZXN0LnJlc3BvbnNlSGFuZGxlcikge1xuICAgICAgICAgICAgICAgICAgICByZXF1ZXN0LnJlc3BvbnNlSGFuZGxlcihwYXJhbXMsIHJlc3BvbnNlVHlwZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHN0YXRpYyBwYXJzZVJlc3VsdChyZXN1bHRKc29uKSB7XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IEpTT04ucGFyc2UocmVzdWx0SnNvbik7XG4gICAgICAgIGlmIChcImVycm9yXCIgaW4gcmVzdWx0KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgZXJyb3JzXzEuVG9uQ2xpZW50RXJyb3IocmVzdWx0LmVycm9yLmNvZGUsIHJlc3VsdC5lcnJvci5tZXNzYWdlLCByZXN1bHQuZXJyb3IuZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdC5yZXN1bHQ7XG4gICAgfVxufVxuZXhwb3J0cy5Db21tb25CaW5hcnlCcmlkZ2UgPSBDb21tb25CaW5hcnlCcmlkZ2U7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1iaW4uanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/@eversdk/core/dist/bin.js\n");

/***/ }),

/***/ "./node_modules/@eversdk/core/dist/client.js":
/*!***************************************************!*\
  !*** ./node_modules/@eversdk/core/dist/client.js ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\n/*\n * Copyright 2018-2020 TON Labs LTD.\n *\n * Licensed under the SOFTWARE EVALUATION License (the \"License\"); you may not use\n * this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific TON DEV software governing permissions and\n * limitations under the License.\n *\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TonClient = void 0;\nconst modules_1 = __webpack_require__(/*! ./modules */ \"./node_modules/@eversdk/core/dist/modules.js\");\nconst bin_1 = __webpack_require__(/*! ./bin */ \"./node_modules/@eversdk/core/dist/bin.js\");\nclass TonClient {\n    constructor(config) {\n        this.context = undefined;\n        this.contextCreation = undefined;\n        this.contextError = undefined;\n        this.config = config !== null && config !== void 0 ? config : {};\n        this.client = new modules_1.ClientModule(this);\n        this.crypto = new modules_1.CryptoModule(this);\n        this.abi = new modules_1.AbiModule(this);\n        this.boc = new modules_1.BocModule(this);\n        this.processing = new modules_1.ProcessingModule(this);\n        this.utils = new modules_1.UtilsModule(this);\n        this.net = new modules_1.NetModule(this);\n        this.tvm = new modules_1.TvmModule(this);\n        this.proofs = new modules_1.ProofsModule(this);\n    }\n    static set default(client) {\n        this._default = client;\n    }\n    static get default() {\n        if (this._default === null) {\n            this._default = new TonClient(this._defaultConfig);\n        }\n        return this._default;\n    }\n    static set defaultConfig(config) {\n        this._defaultConfig = config;\n    }\n    static get defaultConfig() {\n        return this._defaultConfig;\n    }\n    static useBinaryLibrary(loader) {\n        (0, bin_1.useLibrary)(loader);\n    }\n    static toKey(d) {\n        return toHex(d, 256);\n    }\n    static toHash64(d) {\n        return toHex(d, 64);\n    }\n    static toHash128(d) {\n        return toHex(d, 128);\n    }\n    static toHash256(d) {\n        return toHex(d, 256);\n    }\n    static toHash512(d) {\n        return toHex(d, 512);\n    }\n    static toHex(dec, bits = 0) {\n        return toHex(dec, bits);\n    }\n    close() {\n        const context = this.context;\n        if (context !== undefined) {\n            this.context = undefined;\n            (0, bin_1.getBridge)().destroyContext(context);\n        }\n    }\n    resolveError(functionName, params, err) {\n        var _a, _b;\n        return __awaiter(this, void 0, void 0, function* () {\n            if (err.code !== 23 || !((_a = err.data) === null || _a === void 0 ? void 0 : _a.suggest_use_helper_for)) {\n                return err;\n            }\n            try {\n                const [modName, funcName] = functionName.split(\".\");\n                const api = (yield this.client.get_api_reference()).api;\n                const allTypesArray = api.modules.reduce((accumulator, element) => accumulator.concat(element.types), []);\n                const allTypesDict = {};\n                allTypesArray.forEach((element) => allTypesDict[element.name] = element);\n                const module = api.modules.find((x) => x.name === modName);\n                const func = module.functions.find((x) => x.name === funcName);\n                const param = func.params[1];\n                // If there is only context param (or AppObject second param), there is nothing to analyze\n                if (!param || param.generic_name == \"AppObject\") {\n                    return err;\n                }\n                const paramTypeInfo = allTypesDict[param.ref_name];\n                walkParameters(paramTypeInfo, params, \"\");\n                function walkParameters(valueTypeInfo, value, path) {\n                    switch (valueTypeInfo.type) {\n                        case \"Array\":\n                            if (Array.isArray(value)) {\n                                value.forEach(v => walkParameters(valueTypeInfo.array_item, v, `${path}[i]`));\n                            }\n                            break;\n                        case \"Struct\":\n                            valueTypeInfo.struct_fields.forEach((sf) => walkParameters(sf, value[sf.name], path ? `${path}.${sf.name}` : sf.name));\n                            break;\n                        case \"Optional\":\n                            if (value) {\n                                walkParameters(valueTypeInfo.optional_inner, value, path);\n                            }\n                            break;\n                        case \"Ref\":\n                            if (valueTypeInfo.ref_name != \"Value\" &&\n                                valueTypeInfo.ref_name != \"API\" &&\n                                valueTypeInfo.ref_name != \"AbiParam\") {\n                                walkParameters(allTypesDict[valueTypeInfo.ref_name], value, path);\n                            }\n                            break;\n                        case \"EnumOfTypes\":\n                            if (valueTypeInfo.enum_types.some((et) => et.name == value.type)) {\n                                return;\n                            }\n                            let parameterName = valueTypeInfo.name.toLowerCase();\n                            let helperFunctions = [];\n                            valueTypeInfo.enum_types.forEach((et) => helperFunctions.push(parameterName + et.name));\n                            err.message = `Consider using one of the helper methods (${helperFunctions.join(\", \")}) for the \\\"${path}\\\" parameter\\n` + err.message;\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            catch (e) {\n                err.message = (_b = e.message) !== null && _b !== void 0 ? _b : `${e}`;\n            }\n            return err;\n        });\n    }\n    contextRequired() {\n        if (this.context !== undefined) {\n            return Promise.resolve(this.context);\n        }\n        if (this.contextError !== undefined) {\n            return Promise.reject(this.contextError);\n        }\n        if (this.contextCreation === undefined) {\n            this.contextCreation = [];\n            (0, bin_1.getBridge)().createContext(this.config).then((context) => {\n                const creation = this.contextCreation;\n                this.contextCreation = undefined;\n                this.context = context;\n                creation === null || creation === void 0 ? void 0 : creation.forEach(x => x.resolve(context));\n            }, (reason) => {\n                const creation = this.contextCreation;\n                this.contextCreation = undefined;\n                this.contextError = reason !== null && reason !== void 0 ? reason : undefined;\n                creation === null || creation === void 0 ? void 0 : creation.forEach(x => x.reject(reason));\n            });\n        }\n        return new Promise((resolve, reject) => {\n            var _a;\n            (_a = this.contextCreation) === null || _a === void 0 ? void 0 : _a.push({\n                resolve,\n                reject,\n            });\n        });\n    }\n    request(functionName, functionParams, responseHandler) {\n        var _a;\n        return __awaiter(this, void 0, void 0, function* () {\n            const context = (_a = this.context) !== null && _a !== void 0 ? _a : yield this.contextRequired();\n            return (0, bin_1.getBridge)()\n                .request(context, functionName, functionParams, responseHandler !== null && responseHandler !== void 0 ? responseHandler : (() => {\n            }))\n                .catch((reason) => __awaiter(this, void 0, void 0, function* () {\n                throw yield this.resolveError(functionName, functionParams, reason);\n            }));\n        });\n    }\n    resolve_app_request(app_request_id, result) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (app_request_id) {\n                yield this.client.resolve_app_request({\n                    app_request_id,\n                    result: {\n                        type: \"Ok\",\n                        result,\n                    },\n                });\n            }\n        });\n    }\n    reject_app_request(app_request_id, error) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (app_request_id) {\n                yield this.client.resolve_app_request({\n                    app_request_id,\n                    result: {\n                        type: \"Error\",\n                        text: error.message,\n                    },\n                });\n            }\n        });\n    }\n}\nexports.TonClient = TonClient;\nTonClient._defaultConfig = {};\nTonClient._default = null;\n// Converts value to hex\nfunction toHex(value, bits) {\n    let hex;\n    if (typeof value === \"number\" || typeof value === \"bigint\") {\n        hex = value.toString(16);\n    }\n    else if (typeof value === \"string\") {\n        if (value.startsWith(\"0x\")) {\n            hex = value.substring(2);\n        }\n        else {\n            hex = decToHex(value);\n        }\n    }\n    else {\n        hex = value.toString();\n    }\n    let len = bits / 4;\n    while (hex.length > len && hex.startsWith(\"0\")) {\n        hex = hex.substring(1);\n    }\n    return hex.padStart(len, \"0\");\n}\nfunction decToHex(dec) {\n    var _a;\n    let bigNum = [];\n    for (let i = 0; i < dec.length; i += 1) {\n        const d = ((_a = dec.codePointAt(i)) !== null && _a !== void 0 ? _a : 0) - 48;\n        const mul8 = shl(bigNum, 3);\n        const mul2 = shl(bigNum, 1);\n        const mul10 = add(mul8, mul2);\n        bigNum = add(mul10, [d]);\n    }\n    let hex = \"\";\n    for (let i = bigNum.length - 1; i >= 0; i -= 1) {\n        hex += bigNum[i].toString(16).padStart(4, \"0\");\n    }\n    return hex;\n}\nfunction shl(bigNum, bits) {\n    let rest = 0;\n    const result = [];\n    for (let i = 0; i < bigNum.length; i += 1) {\n        let v = (bigNum[i] << bits) + rest;\n        result.push(v & 0xFFFF);\n        rest = (v >> 16) & 0xFFFF;\n    }\n    if (rest > 0) {\n        result.push(rest);\n    }\n    return result;\n}\nfunction add(a, b) {\n    let rest = 0;\n    const result = [];\n    const len = Math.max(a.length, b.length);\n    for (let i = 0; i < len; i += 1) {\n        let v = (i < a.length ? a[i] : 0) + (i < b.length ? b[i] : 0) + rest;\n        result.push(v & 0xFFFF);\n        rest = (v >> 16) & 0xFFFF;\n    }\n    if (rest > 0) {\n        result.push(rest);\n    }\n    return result;\n}\n//# sourceMappingURL=client.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@eversdk/core/dist/client.js\n");

/***/ }),

/***/ "./node_modules/@eversdk/core/dist/errors.js":
/*!***************************************************!*\
  !*** ./node_modules/@eversdk/core/dist/errors.js ***!
  \***************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TonClientError = void 0;\nclass TonClientError extends Error {\n    constructor(code, message, data) {\n        super(message);\n        this.code = code;\n        this.data = data;\n    }\n}\nexports.TonClientError = TonClientError;\n//# sourceMappingURL=errors.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV2ZXJzZGsvY29yZS9kaXN0L2Vycm9ycy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2hleC1iYXR0bGUtZ2FtZS8uL25vZGVfbW9kdWxlcy9AZXZlcnNkay9jb3JlL2Rpc3QvZXJyb3JzLmpzPzExODQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlRvbkNsaWVudEVycm9yID0gdm9pZCAwO1xuY2xhc3MgVG9uQ2xpZW50RXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoY29kZSwgbWVzc2FnZSwgZGF0YSkge1xuICAgICAgICBzdXBlcihtZXNzYWdlKTtcbiAgICAgICAgdGhpcy5jb2RlID0gY29kZTtcbiAgICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG59XG5leHBvcnRzLlRvbkNsaWVudEVycm9yID0gVG9uQ2xpZW50RXJyb3I7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1lcnJvcnMuanMubWFwIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@eversdk/core/dist/errors.js\n");

/***/ }),

/***/ "./node_modules/@eversdk/core/dist/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@eversdk/core/dist/index.js ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n__exportStar(__webpack_require__(/*! ./modules */ \"./node_modules/@eversdk/core/dist/modules.js\"), exports);\n__exportStar(__webpack_require__(/*! ./client */ \"./node_modules/@eversdk/core/dist/client.js\"), exports);\n//# sourceMappingURL=index.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQGV2ZXJzZGsvY29yZS9kaXN0L2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL0BldmVyc2RrL2NvcmUvZGlzdC9pbmRleC5qcz8xYTM0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX2V4cG9ydFN0YXIgPSAodGhpcyAmJiB0aGlzLl9fZXhwb3J0U3RhcikgfHwgZnVuY3Rpb24obSwgZXhwb3J0cykge1xuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKHAgIT09IFwiZGVmYXVsdFwiICYmICFPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoZXhwb3J0cywgcCkpIF9fY3JlYXRlQmluZGluZyhleHBvcnRzLCBtLCBwKTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vbW9kdWxlc1wiKSwgZXhwb3J0cyk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vY2xpZW50XCIpLCBleHBvcnRzKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/@eversdk/core/dist/index.js\n");

/***/ }),

/***/ "./node_modules/@eversdk/core/dist/modules.js":
/*!****************************************************!*\
  !*** ./node_modules/@eversdk/core/dist/modules.js ***!
  \****************************************************/
/***/ (function(__unused_webpack_module, exports) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.builderOpInteger = exports.BocErrorCode = exports.bocCacheTypeUnpinned = exports.bocCacheTypePinned = exports.AbiModule = exports.messageSourceEncodingParams = exports.messageSourceEncoded = exports.stateInitSourceTvc = exports.stateInitSourceStateInit = exports.stateInitSourceMessage = exports.MessageBodyType = exports.signerSigningBox = exports.signerKeys = exports.signerExternal = exports.signerNone = exports.abiSerialized = exports.abiHandle = exports.abiJson = exports.abiContract = exports.AbiErrorCode = exports.CryptoModule = exports.resultOfAppEncryptionBoxDecrypt = exports.resultOfAppEncryptionBoxEncrypt = exports.resultOfAppEncryptionBoxGetInfo = exports.paramsOfAppEncryptionBoxDecrypt = exports.paramsOfAppEncryptionBoxEncrypt = exports.paramsOfAppEncryptionBoxGetInfo = exports.resultOfAppSigningBoxSign = exports.resultOfAppSigningBoxGetPublicKey = exports.paramsOfAppSigningBoxSign = exports.paramsOfAppSigningBoxGetPublicKey = exports.resultOfAppPasswordProviderGetPassword = exports.paramsOfAppPasswordProviderGetPassword = exports.boxEncryptionAlgorithmNaclSecretBox = exports.boxEncryptionAlgorithmNaclBox = exports.boxEncryptionAlgorithmChaCha20 = exports.cryptoBoxSecretEncryptedSecret = exports.cryptoBoxSecretPredefinedSeedPhrase = exports.cryptoBoxSecretRandomSeedPhrase = exports.CipherMode = exports.encryptionAlgorithmNaclSecretBox = exports.encryptionAlgorithmNaclBox = exports.encryptionAlgorithmChaCha20 = exports.encryptionAlgorithmAES = exports.CryptoErrorCode = exports.ClientModule = exports.appRequestResultOk = exports.appRequestResultError = exports.NetworkQueriesProtocol = exports.ClientErrorCode = void 0;\nexports.resultOfAppDebotBrowserInput = exports.paramsOfAppDebotBrowserApprove = exports.paramsOfAppDebotBrowserSend = exports.paramsOfAppDebotBrowserInvokeDebot = exports.paramsOfAppDebotBrowserGetSigningBox = exports.paramsOfAppDebotBrowserInput = exports.paramsOfAppDebotBrowserShowAction = exports.paramsOfAppDebotBrowserSwitchCompleted = exports.paramsOfAppDebotBrowserSwitch = exports.paramsOfAppDebotBrowserLog = exports.debotActivityTransaction = exports.DebotErrorCode = exports.NetModule = exports.AggregationFn = exports.paramsOfQueryOperationQueryCounterparties = exports.paramsOfQueryOperationAggregateCollection = exports.paramsOfQueryOperationWaitForCollection = exports.paramsOfQueryOperationQueryCollection = exports.SortDirection = exports.NetErrorCode = exports.TvmModule = exports.accountForExecutorAccount = exports.accountForExecutorUninit = exports.accountForExecutorNone = exports.TvmErrorCode = exports.UtilsModule = exports.AccountAddressType = exports.addressStringFormatBase64 = exports.addressStringFormatHex = exports.addressStringFormatAccountId = exports.ProcessingModule = exports.processingEventRempError = exports.processingEventRempOther = exports.processingEventRempIncludedIntoAcceptedBlock = exports.processingEventRempIncludedIntoBlock = exports.processingEventRempSentToValidators = exports.processingEventMessageExpired = exports.processingEventFetchNextBlockFailed = exports.processingEventWillFetchNextBlock = exports.processingEventSendFailed = exports.processingEventDidSend = exports.processingEventWillSend = exports.processingEventFetchFirstBlockFailed = exports.processingEventWillFetchFirstBlock = exports.ProcessingErrorCode = exports.BocModule = exports.builderOpAddress = exports.builderOpCellBoc = exports.builderOpCell = exports.builderOpBitString = void 0;\nexports.ProofsModule = exports.ProofsErrorCode = exports.DebotModule = exports.resultOfAppDebotBrowserApprove = exports.resultOfAppDebotBrowserInvokeDebot = exports.resultOfAppDebotBrowserGetSigningBox = void 0;\n// client module\nvar ClientErrorCode;\n(function (ClientErrorCode) {\n    ClientErrorCode[ClientErrorCode[\"NotImplemented\"] = 1] = \"NotImplemented\";\n    ClientErrorCode[ClientErrorCode[\"InvalidHex\"] = 2] = \"InvalidHex\";\n    ClientErrorCode[ClientErrorCode[\"InvalidBase64\"] = 3] = \"InvalidBase64\";\n    ClientErrorCode[ClientErrorCode[\"InvalidAddress\"] = 4] = \"InvalidAddress\";\n    ClientErrorCode[ClientErrorCode[\"CallbackParamsCantBeConvertedToJson\"] = 5] = \"CallbackParamsCantBeConvertedToJson\";\n    ClientErrorCode[ClientErrorCode[\"WebsocketConnectError\"] = 6] = \"WebsocketConnectError\";\n    ClientErrorCode[ClientErrorCode[\"WebsocketReceiveError\"] = 7] = \"WebsocketReceiveError\";\n    ClientErrorCode[ClientErrorCode[\"WebsocketSendError\"] = 8] = \"WebsocketSendError\";\n    ClientErrorCode[ClientErrorCode[\"HttpClientCreateError\"] = 9] = \"HttpClientCreateError\";\n    ClientErrorCode[ClientErrorCode[\"HttpRequestCreateError\"] = 10] = \"HttpRequestCreateError\";\n    ClientErrorCode[ClientErrorCode[\"HttpRequestSendError\"] = 11] = \"HttpRequestSendError\";\n    ClientErrorCode[ClientErrorCode[\"HttpRequestParseError\"] = 12] = \"HttpRequestParseError\";\n    ClientErrorCode[ClientErrorCode[\"CallbackNotRegistered\"] = 13] = \"CallbackNotRegistered\";\n    ClientErrorCode[ClientErrorCode[\"NetModuleNotInit\"] = 14] = \"NetModuleNotInit\";\n    ClientErrorCode[ClientErrorCode[\"InvalidConfig\"] = 15] = \"InvalidConfig\";\n    ClientErrorCode[ClientErrorCode[\"CannotCreateRuntime\"] = 16] = \"CannotCreateRuntime\";\n    ClientErrorCode[ClientErrorCode[\"InvalidContextHandle\"] = 17] = \"InvalidContextHandle\";\n    ClientErrorCode[ClientErrorCode[\"CannotSerializeResult\"] = 18] = \"CannotSerializeResult\";\n    ClientErrorCode[ClientErrorCode[\"CannotSerializeError\"] = 19] = \"CannotSerializeError\";\n    ClientErrorCode[ClientErrorCode[\"CannotConvertJsValueToJson\"] = 20] = \"CannotConvertJsValueToJson\";\n    ClientErrorCode[ClientErrorCode[\"CannotReceiveSpawnedResult\"] = 21] = \"CannotReceiveSpawnedResult\";\n    ClientErrorCode[ClientErrorCode[\"SetTimerError\"] = 22] = \"SetTimerError\";\n    ClientErrorCode[ClientErrorCode[\"InvalidParams\"] = 23] = \"InvalidParams\";\n    ClientErrorCode[ClientErrorCode[\"ContractsAddressConversionFailed\"] = 24] = \"ContractsAddressConversionFailed\";\n    ClientErrorCode[ClientErrorCode[\"UnknownFunction\"] = 25] = \"UnknownFunction\";\n    ClientErrorCode[ClientErrorCode[\"AppRequestError\"] = 26] = \"AppRequestError\";\n    ClientErrorCode[ClientErrorCode[\"NoSuchRequest\"] = 27] = \"NoSuchRequest\";\n    ClientErrorCode[ClientErrorCode[\"CanNotSendRequestResult\"] = 28] = \"CanNotSendRequestResult\";\n    ClientErrorCode[ClientErrorCode[\"CanNotReceiveRequestResult\"] = 29] = \"CanNotReceiveRequestResult\";\n    ClientErrorCode[ClientErrorCode[\"CanNotParseRequestResult\"] = 30] = \"CanNotParseRequestResult\";\n    ClientErrorCode[ClientErrorCode[\"UnexpectedCallbackResponse\"] = 31] = \"UnexpectedCallbackResponse\";\n    ClientErrorCode[ClientErrorCode[\"CanNotParseNumber\"] = 32] = \"CanNotParseNumber\";\n    ClientErrorCode[ClientErrorCode[\"InternalError\"] = 33] = \"InternalError\";\n    ClientErrorCode[ClientErrorCode[\"InvalidHandle\"] = 34] = \"InvalidHandle\";\n    ClientErrorCode[ClientErrorCode[\"LocalStorageError\"] = 35] = \"LocalStorageError\";\n})(ClientErrorCode = exports.ClientErrorCode || (exports.ClientErrorCode = {}));\n/**\n * Network protocol used to perform GraphQL queries.\n */\nvar NetworkQueriesProtocol;\n(function (NetworkQueriesProtocol) {\n    NetworkQueriesProtocol[\"HTTP\"] = \"HTTP\";\n    NetworkQueriesProtocol[\"WS\"] = \"WS\";\n})(NetworkQueriesProtocol = exports.NetworkQueriesProtocol || (exports.NetworkQueriesProtocol = {}));\nfunction appRequestResultError(text) {\n    return {\n        type: 'Error',\n        text,\n    };\n}\nexports.appRequestResultError = appRequestResultError;\nfunction appRequestResultOk(result) {\n    return {\n        type: 'Ok',\n        result,\n    };\n}\nexports.appRequestResultOk = appRequestResultOk;\n/**\n * Provides information about library.\n */\nclass ClientModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Returns Core Library API reference\n     * @returns ResultOfGetApiReference\n     */\n    get_api_reference() {\n        return this.client.request('client.get_api_reference');\n    }\n    /**\n     * Returns Core Library version\n     * @returns ResultOfVersion\n     */\n    version() {\n        return this.client.request('client.version');\n    }\n    /**\n     * Returns Core Library API reference\n     * @returns ClientConfig\n     */\n    config() {\n        return this.client.request('client.config');\n    }\n    /**\n     * Returns detailed information about this build.\n     * @returns ResultOfBuildInfo\n     */\n    build_info() {\n        return this.client.request('client.build_info');\n    }\n    /**\n     * Resolves application request processing result\n     *\n     * @param {ParamsOfResolveAppRequest} params\n     * @returns\n     */\n    resolve_app_request(params) {\n        return this.client.request('client.resolve_app_request', params);\n    }\n}\nexports.ClientModule = ClientModule;\n// crypto module\nvar CryptoErrorCode;\n(function (CryptoErrorCode) {\n    CryptoErrorCode[CryptoErrorCode[\"InvalidPublicKey\"] = 100] = \"InvalidPublicKey\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidSecretKey\"] = 101] = \"InvalidSecretKey\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidKey\"] = 102] = \"InvalidKey\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidFactorizeChallenge\"] = 106] = \"InvalidFactorizeChallenge\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidBigInt\"] = 107] = \"InvalidBigInt\";\n    CryptoErrorCode[CryptoErrorCode[\"ScryptFailed\"] = 108] = \"ScryptFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidKeySize\"] = 109] = \"InvalidKeySize\";\n    CryptoErrorCode[CryptoErrorCode[\"NaclSecretBoxFailed\"] = 110] = \"NaclSecretBoxFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"NaclBoxFailed\"] = 111] = \"NaclBoxFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"NaclSignFailed\"] = 112] = \"NaclSignFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip39InvalidEntropy\"] = 113] = \"Bip39InvalidEntropy\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip39InvalidPhrase\"] = 114] = \"Bip39InvalidPhrase\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip32InvalidKey\"] = 115] = \"Bip32InvalidKey\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip32InvalidDerivePath\"] = 116] = \"Bip32InvalidDerivePath\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip39InvalidDictionary\"] = 117] = \"Bip39InvalidDictionary\";\n    CryptoErrorCode[CryptoErrorCode[\"Bip39InvalidWordCount\"] = 118] = \"Bip39InvalidWordCount\";\n    CryptoErrorCode[CryptoErrorCode[\"MnemonicGenerationFailed\"] = 119] = \"MnemonicGenerationFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"MnemonicFromEntropyFailed\"] = 120] = \"MnemonicFromEntropyFailed\";\n    CryptoErrorCode[CryptoErrorCode[\"SigningBoxNotRegistered\"] = 121] = \"SigningBoxNotRegistered\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidSignature\"] = 122] = \"InvalidSignature\";\n    CryptoErrorCode[CryptoErrorCode[\"EncryptionBoxNotRegistered\"] = 123] = \"EncryptionBoxNotRegistered\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidIvSize\"] = 124] = \"InvalidIvSize\";\n    CryptoErrorCode[CryptoErrorCode[\"UnsupportedCipherMode\"] = 125] = \"UnsupportedCipherMode\";\n    CryptoErrorCode[CryptoErrorCode[\"CannotCreateCipher\"] = 126] = \"CannotCreateCipher\";\n    CryptoErrorCode[CryptoErrorCode[\"EncryptDataError\"] = 127] = \"EncryptDataError\";\n    CryptoErrorCode[CryptoErrorCode[\"DecryptDataError\"] = 128] = \"DecryptDataError\";\n    CryptoErrorCode[CryptoErrorCode[\"IvRequired\"] = 129] = \"IvRequired\";\n    CryptoErrorCode[CryptoErrorCode[\"CryptoBoxNotRegistered\"] = 130] = \"CryptoBoxNotRegistered\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidCryptoBoxType\"] = 131] = \"InvalidCryptoBoxType\";\n    CryptoErrorCode[CryptoErrorCode[\"CryptoBoxSecretSerializationError\"] = 132] = \"CryptoBoxSecretSerializationError\";\n    CryptoErrorCode[CryptoErrorCode[\"CryptoBoxSecretDeserializationError\"] = 133] = \"CryptoBoxSecretDeserializationError\";\n    CryptoErrorCode[CryptoErrorCode[\"InvalidNonceSize\"] = 134] = \"InvalidNonceSize\";\n})(CryptoErrorCode = exports.CryptoErrorCode || (exports.CryptoErrorCode = {}));\nfunction encryptionAlgorithmAES(value) {\n    return {\n        type: 'AES',\n        value,\n    };\n}\nexports.encryptionAlgorithmAES = encryptionAlgorithmAES;\nfunction encryptionAlgorithmChaCha20(value) {\n    return {\n        type: 'ChaCha20',\n        value,\n    };\n}\nexports.encryptionAlgorithmChaCha20 = encryptionAlgorithmChaCha20;\nfunction encryptionAlgorithmNaclBox(value) {\n    return {\n        type: 'NaclBox',\n        value,\n    };\n}\nexports.encryptionAlgorithmNaclBox = encryptionAlgorithmNaclBox;\nfunction encryptionAlgorithmNaclSecretBox(value) {\n    return {\n        type: 'NaclSecretBox',\n        value,\n    };\n}\nexports.encryptionAlgorithmNaclSecretBox = encryptionAlgorithmNaclSecretBox;\nvar CipherMode;\n(function (CipherMode) {\n    CipherMode[\"CBC\"] = \"CBC\";\n    CipherMode[\"CFB\"] = \"CFB\";\n    CipherMode[\"CTR\"] = \"CTR\";\n    CipherMode[\"ECB\"] = \"ECB\";\n    CipherMode[\"OFB\"] = \"OFB\";\n})(CipherMode = exports.CipherMode || (exports.CipherMode = {}));\nfunction cryptoBoxSecretRandomSeedPhrase(dictionary, wordcount) {\n    return {\n        type: 'RandomSeedPhrase',\n        dictionary,\n        wordcount,\n    };\n}\nexports.cryptoBoxSecretRandomSeedPhrase = cryptoBoxSecretRandomSeedPhrase;\nfunction cryptoBoxSecretPredefinedSeedPhrase(phrase, dictionary, wordcount) {\n    return {\n        type: 'PredefinedSeedPhrase',\n        phrase,\n        dictionary,\n        wordcount,\n    };\n}\nexports.cryptoBoxSecretPredefinedSeedPhrase = cryptoBoxSecretPredefinedSeedPhrase;\nfunction cryptoBoxSecretEncryptedSecret(encrypted_secret) {\n    return {\n        type: 'EncryptedSecret',\n        encrypted_secret,\n    };\n}\nexports.cryptoBoxSecretEncryptedSecret = cryptoBoxSecretEncryptedSecret;\nfunction boxEncryptionAlgorithmChaCha20(value) {\n    return {\n        type: 'ChaCha20',\n        value,\n    };\n}\nexports.boxEncryptionAlgorithmChaCha20 = boxEncryptionAlgorithmChaCha20;\nfunction boxEncryptionAlgorithmNaclBox(value) {\n    return {\n        type: 'NaclBox',\n        value,\n    };\n}\nexports.boxEncryptionAlgorithmNaclBox = boxEncryptionAlgorithmNaclBox;\nfunction boxEncryptionAlgorithmNaclSecretBox(value) {\n    return {\n        type: 'NaclSecretBox',\n        value,\n    };\n}\nexports.boxEncryptionAlgorithmNaclSecretBox = boxEncryptionAlgorithmNaclSecretBox;\nfunction paramsOfAppPasswordProviderGetPassword(encryption_public_key) {\n    return {\n        type: 'GetPassword',\n        encryption_public_key,\n    };\n}\nexports.paramsOfAppPasswordProviderGetPassword = paramsOfAppPasswordProviderGetPassword;\nfunction resultOfAppPasswordProviderGetPassword(encrypted_password, app_encryption_pubkey) {\n    return {\n        type: 'GetPassword',\n        encrypted_password,\n        app_encryption_pubkey,\n    };\n}\nexports.resultOfAppPasswordProviderGetPassword = resultOfAppPasswordProviderGetPassword;\nfunction paramsOfAppSigningBoxGetPublicKey() {\n    return {\n        type: 'GetPublicKey',\n    };\n}\nexports.paramsOfAppSigningBoxGetPublicKey = paramsOfAppSigningBoxGetPublicKey;\nfunction paramsOfAppSigningBoxSign(unsigned) {\n    return {\n        type: 'Sign',\n        unsigned,\n    };\n}\nexports.paramsOfAppSigningBoxSign = paramsOfAppSigningBoxSign;\nfunction resultOfAppSigningBoxGetPublicKey(public_key) {\n    return {\n        type: 'GetPublicKey',\n        public_key,\n    };\n}\nexports.resultOfAppSigningBoxGetPublicKey = resultOfAppSigningBoxGetPublicKey;\nfunction resultOfAppSigningBoxSign(signature) {\n    return {\n        type: 'Sign',\n        signature,\n    };\n}\nexports.resultOfAppSigningBoxSign = resultOfAppSigningBoxSign;\nfunction paramsOfAppEncryptionBoxGetInfo() {\n    return {\n        type: 'GetInfo',\n    };\n}\nexports.paramsOfAppEncryptionBoxGetInfo = paramsOfAppEncryptionBoxGetInfo;\nfunction paramsOfAppEncryptionBoxEncrypt(data) {\n    return {\n        type: 'Encrypt',\n        data,\n    };\n}\nexports.paramsOfAppEncryptionBoxEncrypt = paramsOfAppEncryptionBoxEncrypt;\nfunction paramsOfAppEncryptionBoxDecrypt(data) {\n    return {\n        type: 'Decrypt',\n        data,\n    };\n}\nexports.paramsOfAppEncryptionBoxDecrypt = paramsOfAppEncryptionBoxDecrypt;\nfunction resultOfAppEncryptionBoxGetInfo(info) {\n    return {\n        type: 'GetInfo',\n        info,\n    };\n}\nexports.resultOfAppEncryptionBoxGetInfo = resultOfAppEncryptionBoxGetInfo;\nfunction resultOfAppEncryptionBoxEncrypt(data) {\n    return {\n        type: 'Encrypt',\n        data,\n    };\n}\nexports.resultOfAppEncryptionBoxEncrypt = resultOfAppEncryptionBoxEncrypt;\nfunction resultOfAppEncryptionBoxDecrypt(data) {\n    return {\n        type: 'Decrypt',\n        data,\n    };\n}\nexports.resultOfAppEncryptionBoxDecrypt = resultOfAppEncryptionBoxDecrypt;\nfunction dispatchAppPasswordProvider(obj, params, app_request_id, client) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let result = {};\n            switch (params.type) {\n                case 'GetPassword':\n                    result = yield obj.get_password(params);\n                    break;\n            }\n            client.resolve_app_request(app_request_id, Object.assign({ type: params.type }, result));\n        }\n        catch (error) {\n            client.reject_app_request(app_request_id, error);\n        }\n    });\n}\nfunction dispatchAppSigningBox(obj, params, app_request_id, client) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let result = {};\n            switch (params.type) {\n                case 'GetPublicKey':\n                    result = yield obj.get_public_key();\n                    break;\n                case 'Sign':\n                    result = yield obj.sign(params);\n                    break;\n            }\n            client.resolve_app_request(app_request_id, Object.assign({ type: params.type }, result));\n        }\n        catch (error) {\n            client.reject_app_request(app_request_id, error);\n        }\n    });\n}\nfunction dispatchAppEncryptionBox(obj, params, app_request_id, client) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let result = {};\n            switch (params.type) {\n                case 'GetInfo':\n                    result = yield obj.get_info();\n                    break;\n                case 'Encrypt':\n                    result = yield obj.encrypt(params);\n                    break;\n                case 'Decrypt':\n                    result = yield obj.decrypt(params);\n                    break;\n            }\n            client.resolve_app_request(app_request_id, Object.assign({ type: params.type }, result));\n        }\n        catch (error) {\n            client.reject_app_request(app_request_id, error);\n        }\n    });\n}\n/**\n * Crypto functions.\n */\nclass CryptoModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Integer factorization\n     *\n     * @remarks\n     * Performs prime factorization – decomposition of a composite number\n     * into a product of smaller prime integers (factors).\n     * See [https://en.wikipedia.org/wiki/Integer_factorization]\n     *\n     * @param {ParamsOfFactorize} params\n     * @returns ResultOfFactorize\n     */\n    factorize(params) {\n        return this.client.request('crypto.factorize', params);\n    }\n    /**\n     * Modular exponentiation\n     *\n     * @remarks\n     * Performs modular exponentiation for big integers (`base`^`exponent` mod `modulus`).\n     * See [https://en.wikipedia.org/wiki/Modular_exponentiation]\n     *\n     * @param {ParamsOfModularPower} params\n     * @returns ResultOfModularPower\n     */\n    modular_power(params) {\n        return this.client.request('crypto.modular_power', params);\n    }\n    /**\n     * Calculates CRC16 using TON algorithm.\n     *\n     * @param {ParamsOfTonCrc16} params\n     * @returns ResultOfTonCrc16\n     */\n    ton_crc16(params) {\n        return this.client.request('crypto.ton_crc16', params);\n    }\n    /**\n     * Generates random byte array of the specified length and returns it in `base64` format\n     *\n     * @param {ParamsOfGenerateRandomBytes} params\n     * @returns ResultOfGenerateRandomBytes\n     */\n    generate_random_bytes(params) {\n        return this.client.request('crypto.generate_random_bytes', params);\n    }\n    /**\n     * Converts public key to ton safe_format\n     *\n     * @param {ParamsOfConvertPublicKeyToTonSafeFormat} params\n     * @returns ResultOfConvertPublicKeyToTonSafeFormat\n     */\n    convert_public_key_to_ton_safe_format(params) {\n        return this.client.request('crypto.convert_public_key_to_ton_safe_format', params);\n    }\n    /**\n     * Generates random ed25519 key pair.\n     * @returns KeyPair\n     */\n    generate_random_sign_keys() {\n        return this.client.request('crypto.generate_random_sign_keys');\n    }\n    /**\n     * Signs a data using the provided keys.\n     *\n     * @param {ParamsOfSign} params\n     * @returns ResultOfSign\n     */\n    sign(params) {\n        return this.client.request('crypto.sign', params);\n    }\n    /**\n     * Verifies signed data using the provided public key. Raises error if verification is failed.\n     *\n     * @param {ParamsOfVerifySignature} params\n     * @returns ResultOfVerifySignature\n     */\n    verify_signature(params) {\n        return this.client.request('crypto.verify_signature', params);\n    }\n    /**\n     * Calculates SHA256 hash of the specified data.\n     *\n     * @param {ParamsOfHash} params\n     * @returns ResultOfHash\n     */\n    sha256(params) {\n        return this.client.request('crypto.sha256', params);\n    }\n    /**\n     * Calculates SHA512 hash of the specified data.\n     *\n     * @param {ParamsOfHash} params\n     * @returns ResultOfHash\n     */\n    sha512(params) {\n        return this.client.request('crypto.sha512', params);\n    }\n    /**\n     * Perform `scrypt` encryption\n     *\n     * @remarks\n     * Derives key from `password` and `key` using `scrypt` algorithm.\n     * See [https://en.wikipedia.org/wiki/Scrypt].\n     *\n     * # Arguments\n     * - `log_n` - The log2 of the Scrypt parameter `N`\n     * - `r` - The Scrypt parameter `r`\n     * - `p` - The Scrypt parameter `p`\n     * # Conditions\n     * - `log_n` must be less than `64`\n     * - `r` must be greater than `0` and less than or equal to `4294967295`\n     * - `p` must be greater than `0` and less than `4294967295`\n     * # Recommended values sufficient for most use-cases\n     * - `log_n = 15` (`n = 32768`)\n     * - `r = 8`\n     * - `p = 1`\n     *\n     * @param {ParamsOfScrypt} params\n     * @returns ResultOfScrypt\n     */\n    scrypt(params) {\n        return this.client.request('crypto.scrypt', params);\n    }\n    /**\n     * Generates a key pair for signing from the secret key\n     *\n     * @remarks\n     * **NOTE:** In the result the secret key is actually the concatenation\n     * of secret and public keys (128 symbols hex string) by design of [NaCL](http://nacl.cr.yp.to/sign.html).\n     * See also [the stackexchange question](https://crypto.stackexchange.com/questions/54353/).\n     *\n     * @param {ParamsOfNaclSignKeyPairFromSecret} params\n     * @returns KeyPair\n     */\n    nacl_sign_keypair_from_secret_key(params) {\n        return this.client.request('crypto.nacl_sign_keypair_from_secret_key', params);\n    }\n    /**\n     * Signs data using the signer's secret key.\n     *\n     * @param {ParamsOfNaclSign} params\n     * @returns ResultOfNaclSign\n     */\n    nacl_sign(params) {\n        return this.client.request('crypto.nacl_sign', params);\n    }\n    /**\n     * Verifies the signature and returns the unsigned message\n     *\n     * @remarks\n     * Verifies the signature in `signed` using the signer's public key `public`\n     * and returns the message `unsigned`.\n     *\n     * If the signature fails verification, crypto_sign_open raises an exception.\n     *\n     * @param {ParamsOfNaclSignOpen} params\n     * @returns ResultOfNaclSignOpen\n     */\n    nacl_sign_open(params) {\n        return this.client.request('crypto.nacl_sign_open', params);\n    }\n    /**\n     * Signs the message using the secret key and returns a signature.\n     *\n     * @remarks\n     * Signs the message `unsigned` using the secret key `secret`\n     * and returns a signature `signature`.\n     *\n     * @param {ParamsOfNaclSign} params\n     * @returns ResultOfNaclSignDetached\n     */\n    nacl_sign_detached(params) {\n        return this.client.request('crypto.nacl_sign_detached', params);\n    }\n    /**\n     * Verifies the signature with public key and `unsigned` data.\n     *\n     * @param {ParamsOfNaclSignDetachedVerify} params\n     * @returns ResultOfNaclSignDetachedVerify\n     */\n    nacl_sign_detached_verify(params) {\n        return this.client.request('crypto.nacl_sign_detached_verify', params);\n    }\n    /**\n     * Generates a random NaCl key pair\n     * @returns KeyPair\n     */\n    nacl_box_keypair() {\n        return this.client.request('crypto.nacl_box_keypair');\n    }\n    /**\n     * Generates key pair from a secret key\n     *\n     * @param {ParamsOfNaclBoxKeyPairFromSecret} params\n     * @returns KeyPair\n     */\n    nacl_box_keypair_from_secret_key(params) {\n        return this.client.request('crypto.nacl_box_keypair_from_secret_key', params);\n    }\n    /**\n     * Public key authenticated encryption\n     *\n     * @remarks\n     * Encrypt and authenticate a message using the senders secret key, the receivers public\n     * key, and a nonce.\n     *\n     * @param {ParamsOfNaclBox} params\n     * @returns ResultOfNaclBox\n     */\n    nacl_box(params) {\n        return this.client.request('crypto.nacl_box', params);\n    }\n    /**\n     * Decrypt and verify the cipher text using the receivers secret key, the senders public key, and the nonce.\n     *\n     * @param {ParamsOfNaclBoxOpen} params\n     * @returns ResultOfNaclBoxOpen\n     */\n    nacl_box_open(params) {\n        return this.client.request('crypto.nacl_box_open', params);\n    }\n    /**\n     * Encrypt and authenticate message using nonce and secret key.\n     *\n     * @param {ParamsOfNaclSecretBox} params\n     * @returns ResultOfNaclBox\n     */\n    nacl_secret_box(params) {\n        return this.client.request('crypto.nacl_secret_box', params);\n    }\n    /**\n     * Decrypts and verifies cipher text using `nonce` and secret `key`.\n     *\n     * @param {ParamsOfNaclSecretBoxOpen} params\n     * @returns ResultOfNaclBoxOpen\n     */\n    nacl_secret_box_open(params) {\n        return this.client.request('crypto.nacl_secret_box_open', params);\n    }\n    /**\n     * Prints the list of words from the specified dictionary\n     *\n     * @param {ParamsOfMnemonicWords} params\n     * @returns ResultOfMnemonicWords\n     */\n    mnemonic_words(params) {\n        return this.client.request('crypto.mnemonic_words', params);\n    }\n    /**\n     * Generates a random mnemonic\n     *\n     * @remarks\n     * Generates a random mnemonic from the specified dictionary and word count\n     *\n     * @param {ParamsOfMnemonicFromRandom} params\n     * @returns ResultOfMnemonicFromRandom\n     */\n    mnemonic_from_random(params) {\n        return this.client.request('crypto.mnemonic_from_random', params);\n    }\n    /**\n     * Generates mnemonic from pre-generated entropy\n     *\n     * @param {ParamsOfMnemonicFromEntropy} params\n     * @returns ResultOfMnemonicFromEntropy\n     */\n    mnemonic_from_entropy(params) {\n        return this.client.request('crypto.mnemonic_from_entropy', params);\n    }\n    /**\n     * Validates a mnemonic phrase\n     *\n     * @remarks\n     * The phrase supplied will be checked for word length and validated according to the checksum\n     * specified in BIP0039.\n     *\n     * @param {ParamsOfMnemonicVerify} params\n     * @returns ResultOfMnemonicVerify\n     */\n    mnemonic_verify(params) {\n        return this.client.request('crypto.mnemonic_verify', params);\n    }\n    /**\n     * Derives a key pair for signing from the seed phrase\n     *\n     * @remarks\n     * Validates the seed phrase, generates master key and then derives\n     * the key pair from the master key and the specified path\n     *\n     * @param {ParamsOfMnemonicDeriveSignKeys} params\n     * @returns KeyPair\n     */\n    mnemonic_derive_sign_keys(params) {\n        return this.client.request('crypto.mnemonic_derive_sign_keys', params);\n    }\n    /**\n     * Generates an extended master private key that will be the root for all the derived keys\n     *\n     * @param {ParamsOfHDKeyXPrvFromMnemonic} params\n     * @returns ResultOfHDKeyXPrvFromMnemonic\n     */\n    hdkey_xprv_from_mnemonic(params) {\n        return this.client.request('crypto.hdkey_xprv_from_mnemonic', params);\n    }\n    /**\n     * Returns extended private key derived from the specified extended private key and child index\n     *\n     * @param {ParamsOfHDKeyDeriveFromXPrv} params\n     * @returns ResultOfHDKeyDeriveFromXPrv\n     */\n    hdkey_derive_from_xprv(params) {\n        return this.client.request('crypto.hdkey_derive_from_xprv', params);\n    }\n    /**\n     * Derives the extended private key from the specified key and path\n     *\n     * @param {ParamsOfHDKeyDeriveFromXPrvPath} params\n     * @returns ResultOfHDKeyDeriveFromXPrvPath\n     */\n    hdkey_derive_from_xprv_path(params) {\n        return this.client.request('crypto.hdkey_derive_from_xprv_path', params);\n    }\n    /**\n     * Extracts the private key from the serialized extended private key\n     *\n     * @param {ParamsOfHDKeySecretFromXPrv} params\n     * @returns ResultOfHDKeySecretFromXPrv\n     */\n    hdkey_secret_from_xprv(params) {\n        return this.client.request('crypto.hdkey_secret_from_xprv', params);\n    }\n    /**\n     * Extracts the public key from the serialized extended private key\n     *\n     * @param {ParamsOfHDKeyPublicFromXPrv} params\n     * @returns ResultOfHDKeyPublicFromXPrv\n     */\n    hdkey_public_from_xprv(params) {\n        return this.client.request('crypto.hdkey_public_from_xprv', params);\n    }\n    /**\n     * Performs symmetric `chacha20` encryption.\n     *\n     * @param {ParamsOfChaCha20} params\n     * @returns ResultOfChaCha20\n     */\n    chacha20(params) {\n        return this.client.request('crypto.chacha20', params);\n    }\n    /**\n     * Creates a Crypto Box instance.\n     *\n     * @remarks\n     * Crypto Box is a root crypto object, that encapsulates some secret (seed phrase usually)\n     * in encrypted form and acts as a factory for all crypto primitives used in SDK:\n     * keys for signing and encryption, derived from this secret.\n     *\n     * Crypto Box encrypts original Seed Phrase with salt and password that is retrieved\n     * from `password_provider` callback, implemented on Application side.\n     *\n     * When used, decrypted secret shows up in core library's memory for a very short period\n     * of time and then is immediately overwritten with zeroes.\n     *\n     * @param {ParamsOfCreateCryptoBox} params\n     * @returns RegisteredCryptoBox\n     */\n    create_crypto_box(params, obj) {\n        return this.client.request('crypto.create_crypto_box', params, (params, responseType) => {\n            if (responseType === 3) {\n                dispatchAppPasswordProvider(obj, params.request_data, params.app_request_id, this.client);\n            }\n            else if (responseType === 4) {\n                dispatchAppPasswordProvider(obj, params, null, this.client);\n            }\n        });\n    }\n    /**\n     * Removes Crypto Box. Clears all secret data.\n     *\n     * @param {RegisteredCryptoBox} params\n     * @returns\n     */\n    remove_crypto_box(params) {\n        return this.client.request('crypto.remove_crypto_box', params);\n    }\n    /**\n     * Get Crypto Box Info. Used to get `encrypted_secret` that should be used for all the cryptobox initializations except the first one.\n     *\n     * @param {RegisteredCryptoBox} params\n     * @returns ResultOfGetCryptoBoxInfo\n     */\n    get_crypto_box_info(params) {\n        return this.client.request('crypto.get_crypto_box_info', params);\n    }\n    /**\n     * Get Crypto Box Seed Phrase.\n     *\n     * @remarks\n     * Attention! Store this data in your application for a very short period of time and overwrite it with zeroes ASAP.\n     *\n     * @param {RegisteredCryptoBox} params\n     * @returns ResultOfGetCryptoBoxSeedPhrase\n     */\n    get_crypto_box_seed_phrase(params) {\n        return this.client.request('crypto.get_crypto_box_seed_phrase', params);\n    }\n    /**\n     * Get handle of Signing Box derived from Crypto Box.\n     *\n     * @param {ParamsOfGetSigningBoxFromCryptoBox} params\n     * @returns RegisteredSigningBox\n     */\n    get_signing_box_from_crypto_box(params) {\n        return this.client.request('crypto.get_signing_box_from_crypto_box', params);\n    }\n    /**\n     * Gets Encryption Box from Crypto Box.\n     *\n     * @remarks\n     * Derives encryption keypair from cryptobox secret and hdpath and\n     * stores it in cache for `secret_lifetime`\n     * or until explicitly cleared by `clear_crypto_box_secret_cache` method.\n     * If `secret_lifetime` is not specified - overwrites encryption secret with zeroes immediately after\n     * encryption operation.\n     *\n     * @param {ParamsOfGetEncryptionBoxFromCryptoBox} params\n     * @returns RegisteredEncryptionBox\n     */\n    get_encryption_box_from_crypto_box(params) {\n        return this.client.request('crypto.get_encryption_box_from_crypto_box', params);\n    }\n    /**\n     * Removes cached secrets (overwrites with zeroes) from all signing and encryption boxes, derived from crypto box.\n     *\n     * @param {RegisteredCryptoBox} params\n     * @returns\n     */\n    clear_crypto_box_secret_cache(params) {\n        return this.client.request('crypto.clear_crypto_box_secret_cache', params);\n    }\n    /**\n     * Register an application implemented signing box.\n     * @returns RegisteredSigningBox\n     */\n    register_signing_box(obj) {\n        return this.client.request('crypto.register_signing_box', undefined, (params, responseType) => {\n            if (responseType === 3) {\n                dispatchAppSigningBox(obj, params.request_data, params.app_request_id, this.client);\n            }\n            else if (responseType === 4) {\n                dispatchAppSigningBox(obj, params, null, this.client);\n            }\n        });\n    }\n    /**\n     * Creates a default signing box implementation.\n     *\n     * @param {KeyPair} params\n     * @returns RegisteredSigningBox\n     */\n    get_signing_box(params) {\n        return this.client.request('crypto.get_signing_box', params);\n    }\n    /**\n     * Returns public key of signing key pair.\n     *\n     * @param {RegisteredSigningBox} params\n     * @returns ResultOfSigningBoxGetPublicKey\n     */\n    signing_box_get_public_key(params) {\n        return this.client.request('crypto.signing_box_get_public_key', params);\n    }\n    /**\n     * Returns signed user data.\n     *\n     * @param {ParamsOfSigningBoxSign} params\n     * @returns ResultOfSigningBoxSign\n     */\n    signing_box_sign(params) {\n        return this.client.request('crypto.signing_box_sign', params);\n    }\n    /**\n     * Removes signing box from SDK.\n     *\n     * @param {RegisteredSigningBox} params\n     * @returns\n     */\n    remove_signing_box(params) {\n        return this.client.request('crypto.remove_signing_box', params);\n    }\n    /**\n     * Register an application implemented encryption box.\n     * @returns RegisteredEncryptionBox\n     */\n    register_encryption_box(obj) {\n        return this.client.request('crypto.register_encryption_box', undefined, (params, responseType) => {\n            if (responseType === 3) {\n                dispatchAppEncryptionBox(obj, params.request_data, params.app_request_id, this.client);\n            }\n            else if (responseType === 4) {\n                dispatchAppEncryptionBox(obj, params, null, this.client);\n            }\n        });\n    }\n    /**\n     * Removes encryption box from SDK\n     *\n     * @param {RegisteredEncryptionBox} params\n     * @returns\n     */\n    remove_encryption_box(params) {\n        return this.client.request('crypto.remove_encryption_box', params);\n    }\n    /**\n     * Queries info from the given encryption box\n     *\n     * @param {ParamsOfEncryptionBoxGetInfo} params\n     * @returns ResultOfEncryptionBoxGetInfo\n     */\n    encryption_box_get_info(params) {\n        return this.client.request('crypto.encryption_box_get_info', params);\n    }\n    /**\n     * Encrypts data using given encryption box Note.\n     *\n     * @remarks\n     * Block cipher algorithms pad data to cipher block size so encrypted data can be longer then original data. Client should store the original data size after encryption and use it after\n     * decryption to retrieve the original data from decrypted data.\n     *\n     * @param {ParamsOfEncryptionBoxEncrypt} params\n     * @returns ResultOfEncryptionBoxEncrypt\n     */\n    encryption_box_encrypt(params) {\n        return this.client.request('crypto.encryption_box_encrypt', params);\n    }\n    /**\n     * Decrypts data using given encryption box Note.\n     *\n     * @remarks\n     * Block cipher algorithms pad data to cipher block size so encrypted data can be longer then original data. Client should store the original data size after encryption and use it after\n     * decryption to retrieve the original data from decrypted data.\n     *\n     * @param {ParamsOfEncryptionBoxDecrypt} params\n     * @returns ResultOfEncryptionBoxDecrypt\n     */\n    encryption_box_decrypt(params) {\n        return this.client.request('crypto.encryption_box_decrypt', params);\n    }\n    /**\n     * Creates encryption box with specified algorithm\n     *\n     * @param {ParamsOfCreateEncryptionBox} params\n     * @returns RegisteredEncryptionBox\n     */\n    create_encryption_box(params) {\n        return this.client.request('crypto.create_encryption_box', params);\n    }\n}\nexports.CryptoModule = CryptoModule;\n// abi module\nvar AbiErrorCode;\n(function (AbiErrorCode) {\n    AbiErrorCode[AbiErrorCode[\"RequiredAddressMissingForEncodeMessage\"] = 301] = \"RequiredAddressMissingForEncodeMessage\";\n    AbiErrorCode[AbiErrorCode[\"RequiredCallSetMissingForEncodeMessage\"] = 302] = \"RequiredCallSetMissingForEncodeMessage\";\n    AbiErrorCode[AbiErrorCode[\"InvalidJson\"] = 303] = \"InvalidJson\";\n    AbiErrorCode[AbiErrorCode[\"InvalidMessage\"] = 304] = \"InvalidMessage\";\n    AbiErrorCode[AbiErrorCode[\"EncodeDeployMessageFailed\"] = 305] = \"EncodeDeployMessageFailed\";\n    AbiErrorCode[AbiErrorCode[\"EncodeRunMessageFailed\"] = 306] = \"EncodeRunMessageFailed\";\n    AbiErrorCode[AbiErrorCode[\"AttachSignatureFailed\"] = 307] = \"AttachSignatureFailed\";\n    AbiErrorCode[AbiErrorCode[\"InvalidTvcImage\"] = 308] = \"InvalidTvcImage\";\n    AbiErrorCode[AbiErrorCode[\"RequiredPublicKeyMissingForFunctionHeader\"] = 309] = \"RequiredPublicKeyMissingForFunctionHeader\";\n    AbiErrorCode[AbiErrorCode[\"InvalidSigner\"] = 310] = \"InvalidSigner\";\n    AbiErrorCode[AbiErrorCode[\"InvalidAbi\"] = 311] = \"InvalidAbi\";\n    AbiErrorCode[AbiErrorCode[\"InvalidFunctionId\"] = 312] = \"InvalidFunctionId\";\n    AbiErrorCode[AbiErrorCode[\"InvalidData\"] = 313] = \"InvalidData\";\n    AbiErrorCode[AbiErrorCode[\"EncodeInitialDataFailed\"] = 314] = \"EncodeInitialDataFailed\";\n    AbiErrorCode[AbiErrorCode[\"InvalidFunctionName\"] = 315] = \"InvalidFunctionName\";\n})(AbiErrorCode = exports.AbiErrorCode || (exports.AbiErrorCode = {}));\nfunction abiContract(value) {\n    return {\n        type: 'Contract',\n        value,\n    };\n}\nexports.abiContract = abiContract;\nfunction abiJson(value) {\n    return {\n        type: 'Json',\n        value,\n    };\n}\nexports.abiJson = abiJson;\nfunction abiHandle(value) {\n    return {\n        type: 'Handle',\n        value,\n    };\n}\nexports.abiHandle = abiHandle;\nfunction abiSerialized(value) {\n    return {\n        type: 'Serialized',\n        value,\n    };\n}\nexports.abiSerialized = abiSerialized;\nfunction signerNone() {\n    return {\n        type: 'None',\n    };\n}\nexports.signerNone = signerNone;\nfunction signerExternal(public_key) {\n    return {\n        type: 'External',\n        public_key,\n    };\n}\nexports.signerExternal = signerExternal;\nfunction signerKeys(keys) {\n    return {\n        type: 'Keys',\n        keys,\n    };\n}\nexports.signerKeys = signerKeys;\nfunction signerSigningBox(handle) {\n    return {\n        type: 'SigningBox',\n        handle,\n    };\n}\nexports.signerSigningBox = signerSigningBox;\nvar MessageBodyType;\n(function (MessageBodyType) {\n    MessageBodyType[\"Input\"] = \"Input\";\n    MessageBodyType[\"Output\"] = \"Output\";\n    MessageBodyType[\"InternalOutput\"] = \"InternalOutput\";\n    MessageBodyType[\"Event\"] = \"Event\";\n})(MessageBodyType = exports.MessageBodyType || (exports.MessageBodyType = {}));\nfunction stateInitSourceMessage(source) {\n    return {\n        type: 'Message',\n        source,\n    };\n}\nexports.stateInitSourceMessage = stateInitSourceMessage;\nfunction stateInitSourceStateInit(code, data, library) {\n    return {\n        type: 'StateInit',\n        code,\n        data,\n        library,\n    };\n}\nexports.stateInitSourceStateInit = stateInitSourceStateInit;\nfunction stateInitSourceTvc(tvc, public_key, init_params) {\n    return {\n        type: 'Tvc',\n        tvc,\n        public_key,\n        init_params,\n    };\n}\nexports.stateInitSourceTvc = stateInitSourceTvc;\nfunction messageSourceEncoded(message, abi) {\n    return {\n        type: 'Encoded',\n        message,\n        abi,\n    };\n}\nexports.messageSourceEncoded = messageSourceEncoded;\nfunction messageSourceEncodingParams(params) {\n    return Object.assign({ type: 'EncodingParams' }, params);\n}\nexports.messageSourceEncodingParams = messageSourceEncodingParams;\n/**\n * Provides message encoding and decoding according to the ABI specification.\n */\nclass AbiModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Encodes message body according to ABI function call.\n     *\n     * @param {ParamsOfEncodeMessageBody} params\n     * @returns ResultOfEncodeMessageBody\n     */\n    encode_message_body(params) {\n        return this.client.request('abi.encode_message_body', params);\n    }\n    /**\n     *\n     * @param {ParamsOfAttachSignatureToMessageBody} params\n     * @returns ResultOfAttachSignatureToMessageBody\n     */\n    attach_signature_to_message_body(params) {\n        return this.client.request('abi.attach_signature_to_message_body', params);\n    }\n    /**\n     * Encodes an ABI-compatible message\n     *\n     * @remarks\n     * Allows to encode deploy and function call messages,\n     * both signed and unsigned.\n     *\n     * Use cases include messages of any possible type:\n     * - deploy with initial function call (i.e. `constructor` or any other function that is used for some kind\n     * of initialization);\n     * - deploy without initial function call;\n     * - signed/unsigned + data for signing.\n     *\n     * `Signer` defines how the message should or shouldn't be signed:\n     *\n     * `Signer::None` creates an unsigned message. This may be needed in case of some public methods,\n     * that do not require authorization by pubkey.\n     *\n     * `Signer::External` takes public key and returns `data_to_sign` for later signing.\n     * Use `attach_signature` method with the result signature to get the signed message.\n     *\n     * `Signer::Keys` creates a signed message with provided key pair.\n     *\n     * [SOON] `Signer::SigningBox` Allows using a special interface to implement signing\n     * without private key disclosure to SDK. For instance, in case of using a cold wallet or HSM,\n     * when application calls some API to sign data.\n     *\n     * There is an optional public key can be provided in deploy set in order to substitute one\n     * in TVM file.\n     *\n     * Public key resolving priority:\n     * 1. Public key from deploy set.\n     * 2. Public key, specified in TVM file.\n     * 3. Public key, provided by signer.\n     *\n     * @param {ParamsOfEncodeMessage} params\n     * @returns ResultOfEncodeMessage\n     */\n    encode_message(params) {\n        return this.client.request('abi.encode_message', params);\n    }\n    /**\n     * Encodes an internal ABI-compatible message\n     *\n     * @remarks\n     * Allows to encode deploy and function call messages.\n     *\n     * Use cases include messages of any possible type:\n     * - deploy with initial function call (i.e. `constructor` or any other function that is used for some kind\n     * of initialization);\n     * - deploy without initial function call;\n     * - simple function call\n     *\n     * There is an optional public key can be provided in deploy set in order to substitute one\n     * in TVM file.\n     *\n     * Public key resolving priority:\n     * 1. Public key from deploy set.\n     * 2. Public key, specified in TVM file.\n     *\n     * @param {ParamsOfEncodeInternalMessage} params\n     * @returns ResultOfEncodeInternalMessage\n     */\n    encode_internal_message(params) {\n        return this.client.request('abi.encode_internal_message', params);\n    }\n    /**\n     * Combines `hex`-encoded `signature` with `base64`-encoded `unsigned_message`. Returns signed message encoded in `base64`.\n     *\n     * @param {ParamsOfAttachSignature} params\n     * @returns ResultOfAttachSignature\n     */\n    attach_signature(params) {\n        return this.client.request('abi.attach_signature', params);\n    }\n    /**\n     * Decodes message body using provided message BOC and ABI.\n     *\n     * @param {ParamsOfDecodeMessage} params\n     * @returns DecodedMessageBody\n     */\n    decode_message(params) {\n        return this.client.request('abi.decode_message', params);\n    }\n    /**\n     * Decodes message body using provided body BOC and ABI.\n     *\n     * @param {ParamsOfDecodeMessageBody} params\n     * @returns DecodedMessageBody\n     */\n    decode_message_body(params) {\n        return this.client.request('abi.decode_message_body', params);\n    }\n    /**\n     * Creates account state BOC\n     *\n     * @remarks\n     * Creates account state provided with one of these sets of data :\n     * 1. BOC of code, BOC of data, BOC of library\n     * 2. TVC (string in `base64`), keys, init params\n     *\n     * @param {ParamsOfEncodeAccount} params\n     * @returns ResultOfEncodeAccount\n     */\n    encode_account(params) {\n        return this.client.request('abi.encode_account', params);\n    }\n    /**\n     * Decodes account data using provided data BOC and ABI.\n     *\n     * @remarks\n     * Note: this feature requires ABI 2.1 or higher.\n     *\n     * @param {ParamsOfDecodeAccountData} params\n     * @returns ResultOfDecodeAccountData\n     */\n    decode_account_data(params) {\n        return this.client.request('abi.decode_account_data', params);\n    }\n    /**\n     * Updates initial account data with initial values for the contract's static variables and owner's public key. This operation is applicable only for initial account data (before deploy). If the contract is already deployed, its data doesn't contain this data section any more.\n     *\n     * @param {ParamsOfUpdateInitialData} params\n     * @returns ResultOfUpdateInitialData\n     */\n    update_initial_data(params) {\n        return this.client.request('abi.update_initial_data', params);\n    }\n    /**\n     * Encodes initial account data with initial values for the contract's static variables and owner's public key into a data BOC that can be passed to `encode_tvc` function afterwards.\n     *\n     * @remarks\n     * This function is analogue of `tvm.buildDataInit` function in Solidity.\n     *\n     * @param {ParamsOfEncodeInitialData} params\n     * @returns ResultOfEncodeInitialData\n     */\n    encode_initial_data(params) {\n        return this.client.request('abi.encode_initial_data', params);\n    }\n    /**\n     * Decodes initial values of a contract's static variables and owner's public key from account initial data This operation is applicable only for initial account data (before deploy). If the contract is already deployed, its data doesn't contain this data section any more.\n     *\n     * @param {ParamsOfDecodeInitialData} params\n     * @returns ResultOfDecodeInitialData\n     */\n    decode_initial_data(params) {\n        return this.client.request('abi.decode_initial_data', params);\n    }\n    /**\n     * Decodes BOC into JSON as a set of provided parameters.\n     *\n     * @remarks\n     * Solidity functions use ABI types for [builder encoding](https://github.com/tonlabs/TON-Solidity-Compiler/blob/master/API.md#tvmbuilderstore).\n     * The simplest way to decode such a BOC is to use ABI decoding.\n     * ABI has it own rules for fields layout in cells so manually encoded\n     * BOC can not be described in terms of ABI rules.\n     *\n     * To solve this problem we introduce a new ABI type `Ref(<ParamType>)`\n     * which allows to store `ParamType` ABI parameter in cell reference and, thus,\n     * decode manually encoded BOCs. This type is available only in `decode_boc` function\n     * and will not be available in ABI messages encoding until it is included into some ABI revision.\n     *\n     * Such BOC descriptions covers most users needs. If someone wants to decode some BOC which\n     * can not be described by these rules (i.e. BOC with TLB containing constructors of flags\n     * defining some parsing conditions) then they can decode the fields up to fork condition,\n     * check the parsed data manually, expand the parsing schema and then decode the whole BOC\n     * with the full schema.\n     *\n     * @param {ParamsOfDecodeBoc} params\n     * @returns ResultOfDecodeBoc\n     */\n    decode_boc(params) {\n        return this.client.request('abi.decode_boc', params);\n    }\n    /**\n     * Encodes given parameters in JSON into a BOC using param types from ABI.\n     *\n     * @param {ParamsOfAbiEncodeBoc} params\n     * @returns ResultOfAbiEncodeBoc\n     */\n    encode_boc(params) {\n        return this.client.request('abi.encode_boc', params);\n    }\n    /**\n     * Calculates contract function ID by contract ABI\n     *\n     * @param {ParamsOfCalcFunctionId} params\n     * @returns ResultOfCalcFunctionId\n     */\n    calc_function_id(params) {\n        return this.client.request('abi.calc_function_id', params);\n    }\n}\nexports.AbiModule = AbiModule;\nfunction bocCacheTypePinned(pin) {\n    return {\n        type: 'Pinned',\n        pin,\n    };\n}\nexports.bocCacheTypePinned = bocCacheTypePinned;\nfunction bocCacheTypeUnpinned() {\n    return {\n        type: 'Unpinned',\n    };\n}\nexports.bocCacheTypeUnpinned = bocCacheTypeUnpinned;\nvar BocErrorCode;\n(function (BocErrorCode) {\n    BocErrorCode[BocErrorCode[\"InvalidBoc\"] = 201] = \"InvalidBoc\";\n    BocErrorCode[BocErrorCode[\"SerializationError\"] = 202] = \"SerializationError\";\n    BocErrorCode[BocErrorCode[\"InappropriateBlock\"] = 203] = \"InappropriateBlock\";\n    BocErrorCode[BocErrorCode[\"MissingSourceBoc\"] = 204] = \"MissingSourceBoc\";\n    BocErrorCode[BocErrorCode[\"InsufficientCacheSize\"] = 205] = \"InsufficientCacheSize\";\n    BocErrorCode[BocErrorCode[\"BocRefNotFound\"] = 206] = \"BocRefNotFound\";\n    BocErrorCode[BocErrorCode[\"InvalidBocRef\"] = 207] = \"InvalidBocRef\";\n})(BocErrorCode = exports.BocErrorCode || (exports.BocErrorCode = {}));\nfunction builderOpInteger(size, value) {\n    return {\n        type: 'Integer',\n        size,\n        value,\n    };\n}\nexports.builderOpInteger = builderOpInteger;\nfunction builderOpBitString(value) {\n    return {\n        type: 'BitString',\n        value,\n    };\n}\nexports.builderOpBitString = builderOpBitString;\nfunction builderOpCell(builder) {\n    return {\n        type: 'Cell',\n        builder,\n    };\n}\nexports.builderOpCell = builderOpCell;\nfunction builderOpCellBoc(boc) {\n    return {\n        type: 'CellBoc',\n        boc,\n    };\n}\nexports.builderOpCellBoc = builderOpCellBoc;\nfunction builderOpAddress(address) {\n    return {\n        type: 'Address',\n        address,\n    };\n}\nexports.builderOpAddress = builderOpAddress;\n/**\n * BOC manipulation module.\n */\nclass BocModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Parses message boc into a JSON\n     *\n     * @remarks\n     * JSON structure is compatible with GraphQL API message object\n     *\n     * @param {ParamsOfParse} params\n     * @returns ResultOfParse\n     */\n    parse_message(params) {\n        return this.client.request('boc.parse_message', params);\n    }\n    /**\n     * Parses transaction boc into a JSON\n     *\n     * @remarks\n     * JSON structure is compatible with GraphQL API transaction object\n     *\n     * @param {ParamsOfParse} params\n     * @returns ResultOfParse\n     */\n    parse_transaction(params) {\n        return this.client.request('boc.parse_transaction', params);\n    }\n    /**\n     * Parses account boc into a JSON\n     *\n     * @remarks\n     * JSON structure is compatible with GraphQL API account object\n     *\n     * @param {ParamsOfParse} params\n     * @returns ResultOfParse\n     */\n    parse_account(params) {\n        return this.client.request('boc.parse_account', params);\n    }\n    /**\n     * Parses block boc into a JSON\n     *\n     * @remarks\n     * JSON structure is compatible with GraphQL API block object\n     *\n     * @param {ParamsOfParse} params\n     * @returns ResultOfParse\n     */\n    parse_block(params) {\n        return this.client.request('boc.parse_block', params);\n    }\n    /**\n     * Parses shardstate boc into a JSON\n     *\n     * @remarks\n     * JSON structure is compatible with GraphQL API shardstate object\n     *\n     * @param {ParamsOfParseShardstate} params\n     * @returns ResultOfParse\n     */\n    parse_shardstate(params) {\n        return this.client.request('boc.parse_shardstate', params);\n    }\n    /**\n     * Extract blockchain configuration from key block and also from zerostate.\n     *\n     * @param {ParamsOfGetBlockchainConfig} params\n     * @returns ResultOfGetBlockchainConfig\n     */\n    get_blockchain_config(params) {\n        return this.client.request('boc.get_blockchain_config', params);\n    }\n    /**\n     * Calculates BOC root hash\n     *\n     * @param {ParamsOfGetBocHash} params\n     * @returns ResultOfGetBocHash\n     */\n    get_boc_hash(params) {\n        return this.client.request('boc.get_boc_hash', params);\n    }\n    /**\n     * Calculates BOC depth\n     *\n     * @param {ParamsOfGetBocDepth} params\n     * @returns ResultOfGetBocDepth\n     */\n    get_boc_depth(params) {\n        return this.client.request('boc.get_boc_depth', params);\n    }\n    /**\n     * Extracts code from TVC contract image\n     *\n     * @param {ParamsOfGetCodeFromTvc} params\n     * @returns ResultOfGetCodeFromTvc\n     */\n    get_code_from_tvc(params) {\n        return this.client.request('boc.get_code_from_tvc', params);\n    }\n    /**\n     * Get BOC from cache\n     *\n     * @param {ParamsOfBocCacheGet} params\n     * @returns ResultOfBocCacheGet\n     */\n    cache_get(params) {\n        return this.client.request('boc.cache_get', params);\n    }\n    /**\n     * Save BOC into cache or increase pin counter for existing pinned BOC\n     *\n     * @param {ParamsOfBocCacheSet} params\n     * @returns ResultOfBocCacheSet\n     */\n    cache_set(params) {\n        return this.client.request('boc.cache_set', params);\n    }\n    /**\n     * Unpin BOCs with specified pin defined in the `cache_set`. Decrease pin reference counter for BOCs with specified pin defined in the `cache_set`. BOCs which have only 1 pin and its reference counter become 0 will be removed from cache\n     *\n     * @param {ParamsOfBocCacheUnpin} params\n     * @returns\n     */\n    cache_unpin(params) {\n        return this.client.request('boc.cache_unpin', params);\n    }\n    /**\n     * Encodes bag of cells (BOC) with builder operations. This method provides the same functionality as Solidity TvmBuilder. Resulting BOC of this method can be passed into Solidity and C++ contracts as TvmCell type.\n     *\n     * @param {ParamsOfEncodeBoc} params\n     * @returns ResultOfEncodeBoc\n     */\n    encode_boc(params) {\n        return this.client.request('boc.encode_boc', params);\n    }\n    /**\n     * Returns the contract code's salt if it is present.\n     *\n     * @param {ParamsOfGetCodeSalt} params\n     * @returns ResultOfGetCodeSalt\n     */\n    get_code_salt(params) {\n        return this.client.request('boc.get_code_salt', params);\n    }\n    /**\n     * Sets new salt to contract code.\n     *\n     * @remarks\n     * Returns the new contract code with salt.\n     *\n     * @param {ParamsOfSetCodeSalt} params\n     * @returns ResultOfSetCodeSalt\n     */\n    set_code_salt(params) {\n        return this.client.request('boc.set_code_salt', params);\n    }\n    /**\n     * Decodes tvc into code, data, libraries and special options.\n     *\n     * @param {ParamsOfDecodeTvc} params\n     * @returns ResultOfDecodeTvc\n     */\n    decode_tvc(params) {\n        return this.client.request('boc.decode_tvc', params);\n    }\n    /**\n     * Encodes tvc from code, data, libraries ans special options (see input params)\n     *\n     * @param {ParamsOfEncodeTvc} params\n     * @returns ResultOfEncodeTvc\n     */\n    encode_tvc(params) {\n        return this.client.request('boc.encode_tvc', params);\n    }\n    /**\n     * Encodes a message\n     *\n     * @remarks\n     * Allows to encode any external inbound message.\n     *\n     * @param {ParamsOfEncodeExternalInMessage} params\n     * @returns ResultOfEncodeExternalInMessage\n     */\n    encode_external_in_message(params) {\n        return this.client.request('boc.encode_external_in_message', params);\n    }\n    /**\n     * Returns the compiler version used to compile the code.\n     *\n     * @param {ParamsOfGetCompilerVersion} params\n     * @returns ResultOfGetCompilerVersion\n     */\n    get_compiler_version(params) {\n        return this.client.request('boc.get_compiler_version', params);\n    }\n}\nexports.BocModule = BocModule;\n// processing module\nvar ProcessingErrorCode;\n(function (ProcessingErrorCode) {\n    ProcessingErrorCode[ProcessingErrorCode[\"MessageAlreadyExpired\"] = 501] = \"MessageAlreadyExpired\";\n    ProcessingErrorCode[ProcessingErrorCode[\"MessageHasNotDestinationAddress\"] = 502] = \"MessageHasNotDestinationAddress\";\n    ProcessingErrorCode[ProcessingErrorCode[\"CanNotBuildMessageCell\"] = 503] = \"CanNotBuildMessageCell\";\n    ProcessingErrorCode[ProcessingErrorCode[\"FetchBlockFailed\"] = 504] = \"FetchBlockFailed\";\n    ProcessingErrorCode[ProcessingErrorCode[\"SendMessageFailed\"] = 505] = \"SendMessageFailed\";\n    ProcessingErrorCode[ProcessingErrorCode[\"InvalidMessageBoc\"] = 506] = \"InvalidMessageBoc\";\n    ProcessingErrorCode[ProcessingErrorCode[\"MessageExpired\"] = 507] = \"MessageExpired\";\n    ProcessingErrorCode[ProcessingErrorCode[\"TransactionWaitTimeout\"] = 508] = \"TransactionWaitTimeout\";\n    ProcessingErrorCode[ProcessingErrorCode[\"InvalidBlockReceived\"] = 509] = \"InvalidBlockReceived\";\n    ProcessingErrorCode[ProcessingErrorCode[\"CanNotCheckBlockShard\"] = 510] = \"CanNotCheckBlockShard\";\n    ProcessingErrorCode[ProcessingErrorCode[\"BlockNotFound\"] = 511] = \"BlockNotFound\";\n    ProcessingErrorCode[ProcessingErrorCode[\"InvalidData\"] = 512] = \"InvalidData\";\n    ProcessingErrorCode[ProcessingErrorCode[\"ExternalSignerMustNotBeUsed\"] = 513] = \"ExternalSignerMustNotBeUsed\";\n    ProcessingErrorCode[ProcessingErrorCode[\"MessageRejected\"] = 514] = \"MessageRejected\";\n    ProcessingErrorCode[ProcessingErrorCode[\"InvalidRempStatus\"] = 515] = \"InvalidRempStatus\";\n    ProcessingErrorCode[ProcessingErrorCode[\"NextRempStatusTimeout\"] = 516] = \"NextRempStatusTimeout\";\n})(ProcessingErrorCode = exports.ProcessingErrorCode || (exports.ProcessingErrorCode = {}));\nfunction processingEventWillFetchFirstBlock() {\n    return {\n        type: 'WillFetchFirstBlock',\n    };\n}\nexports.processingEventWillFetchFirstBlock = processingEventWillFetchFirstBlock;\nfunction processingEventFetchFirstBlockFailed(error) {\n    return {\n        type: 'FetchFirstBlockFailed',\n        error,\n    };\n}\nexports.processingEventFetchFirstBlockFailed = processingEventFetchFirstBlockFailed;\nfunction processingEventWillSend(shard_block_id, message_id, message) {\n    return {\n        type: 'WillSend',\n        shard_block_id,\n        message_id,\n        message,\n    };\n}\nexports.processingEventWillSend = processingEventWillSend;\nfunction processingEventDidSend(shard_block_id, message_id, message) {\n    return {\n        type: 'DidSend',\n        shard_block_id,\n        message_id,\n        message,\n    };\n}\nexports.processingEventDidSend = processingEventDidSend;\nfunction processingEventSendFailed(shard_block_id, message_id, message, error) {\n    return {\n        type: 'SendFailed',\n        shard_block_id,\n        message_id,\n        message,\n        error,\n    };\n}\nexports.processingEventSendFailed = processingEventSendFailed;\nfunction processingEventWillFetchNextBlock(shard_block_id, message_id, message) {\n    return {\n        type: 'WillFetchNextBlock',\n        shard_block_id,\n        message_id,\n        message,\n    };\n}\nexports.processingEventWillFetchNextBlock = processingEventWillFetchNextBlock;\nfunction processingEventFetchNextBlockFailed(shard_block_id, message_id, message, error) {\n    return {\n        type: 'FetchNextBlockFailed',\n        shard_block_id,\n        message_id,\n        message,\n        error,\n    };\n}\nexports.processingEventFetchNextBlockFailed = processingEventFetchNextBlockFailed;\nfunction processingEventMessageExpired(message_id, message, error) {\n    return {\n        type: 'MessageExpired',\n        message_id,\n        message,\n        error,\n    };\n}\nexports.processingEventMessageExpired = processingEventMessageExpired;\nfunction processingEventRempSentToValidators(message_id, timestamp, json) {\n    return {\n        type: 'RempSentToValidators',\n        message_id,\n        timestamp,\n        json,\n    };\n}\nexports.processingEventRempSentToValidators = processingEventRempSentToValidators;\nfunction processingEventRempIncludedIntoBlock(message_id, timestamp, json) {\n    return {\n        type: 'RempIncludedIntoBlock',\n        message_id,\n        timestamp,\n        json,\n    };\n}\nexports.processingEventRempIncludedIntoBlock = processingEventRempIncludedIntoBlock;\nfunction processingEventRempIncludedIntoAcceptedBlock(message_id, timestamp, json) {\n    return {\n        type: 'RempIncludedIntoAcceptedBlock',\n        message_id,\n        timestamp,\n        json,\n    };\n}\nexports.processingEventRempIncludedIntoAcceptedBlock = processingEventRempIncludedIntoAcceptedBlock;\nfunction processingEventRempOther(message_id, timestamp, json) {\n    return {\n        type: 'RempOther',\n        message_id,\n        timestamp,\n        json,\n    };\n}\nexports.processingEventRempOther = processingEventRempOther;\nfunction processingEventRempError(error) {\n    return {\n        type: 'RempError',\n        error,\n    };\n}\nexports.processingEventRempError = processingEventRempError;\n/**\n * Message processing module.\n *\n * @remarks\n * This module incorporates functions related to complex message\n * processing scenarios.\n */\nclass ProcessingModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Sends message to the network\n     *\n     * @remarks\n     * Sends message to the network and returns the last generated shard block of the destination account\n     * before the message was sent. It will be required later for message processing.\n     *\n     * @param {ParamsOfSendMessage} params\n     * @returns ResultOfSendMessage\n     */\n    send_message(params, responseHandler) {\n        return this.client.request('processing.send_message', params, responseHandler);\n    }\n    /**\n     * Performs monitoring of the network for the result transaction of the external inbound message processing.\n     *\n     * @remarks\n     * `send_events` enables intermediate events, such as `WillFetchNextBlock`,\n     * `FetchNextBlockFailed` that may be useful for logging of new shard blocks creation\n     * during message processing.\n     *\n     * Note, that presence of the `abi` parameter is critical for ABI\n     * compliant contracts. Message processing uses drastically\n     * different strategy for processing message for contracts which\n     * ABI includes \"expire\" header.\n     *\n     * When the ABI header `expire` is present, the processing uses\n     * `message expiration` strategy:\n     * - The maximum block gen time is set to\n     *   `message_expiration_timeout + transaction_wait_timeout`.\n     * - When maximum block gen time is reached, the processing will\n     *   be finished with `MessageExpired` error.\n     *\n     * When the ABI header `expire` isn't present or `abi` parameter\n     * isn't specified, the processing uses `transaction waiting`\n     * strategy:\n     * - The maximum block gen time is set to\n     *   `now() + transaction_wait_timeout`.\n     *\n     * - If maximum block gen time is reached and no result transaction is found,\n     * the processing will exit with an error.\n     *\n     * @param {ParamsOfWaitForTransaction} params\n     * @returns ResultOfProcessMessage\n     */\n    wait_for_transaction(params, responseHandler) {\n        return this.client.request('processing.wait_for_transaction', params, responseHandler);\n    }\n    /**\n     * Creates message, sends it to the network and monitors its processing.\n     *\n     * @remarks\n     * Creates ABI-compatible message,\n     * sends it to the network and monitors for the result transaction.\n     * Decodes the output messages' bodies.\n     *\n     * If contract's ABI includes \"expire\" header, then\n     * SDK implements retries in case of unsuccessful message delivery within the expiration\n     * timeout: SDK recreates the message, sends it and processes it again.\n     *\n     * The intermediate events, such as `WillFetchFirstBlock`, `WillSend`, `DidSend`,\n     * `WillFetchNextBlock`, etc - are switched on/off by `send_events` flag\n     * and logged into the supplied callback function.\n     *\n     * The retry configuration parameters are defined in the client's `NetworkConfig` and `AbiConfig`.\n     *\n     * If contract's ABI does not include \"expire\" header\n     * then, if no transaction is found within the network timeout (see config parameter ), exits with error.\n     *\n     * @param {ParamsOfProcessMessage} params\n     * @returns ResultOfProcessMessage\n     */\n    process_message(params, responseHandler) {\n        return this.client.request('processing.process_message', params, responseHandler);\n    }\n}\nexports.ProcessingModule = ProcessingModule;\nfunction addressStringFormatAccountId() {\n    return {\n        type: 'AccountId',\n    };\n}\nexports.addressStringFormatAccountId = addressStringFormatAccountId;\nfunction addressStringFormatHex() {\n    return {\n        type: 'Hex',\n    };\n}\nexports.addressStringFormatHex = addressStringFormatHex;\nfunction addressStringFormatBase64(url, test, bounce) {\n    return {\n        type: 'Base64',\n        url,\n        test,\n        bounce,\n    };\n}\nexports.addressStringFormatBase64 = addressStringFormatBase64;\nvar AccountAddressType;\n(function (AccountAddressType) {\n    AccountAddressType[\"AccountId\"] = \"AccountId\";\n    AccountAddressType[\"Hex\"] = \"Hex\";\n    AccountAddressType[\"Base64\"] = \"Base64\";\n})(AccountAddressType = exports.AccountAddressType || (exports.AccountAddressType = {}));\n/**\n * Misc utility Functions.\n */\nclass UtilsModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Converts address from any TON format to any TON format\n     *\n     * @param {ParamsOfConvertAddress} params\n     * @returns ResultOfConvertAddress\n     */\n    convert_address(params) {\n        return this.client.request('utils.convert_address', params);\n    }\n    /**\n     * Validates and returns the type of any TON address.\n     *\n     * @remarks\n     * Address types are the following\n     *\n     * `0:919db8e740d50bf349df2eea03fa30c385d846b991ff5542e67098ee833fc7f7` - standard TON address most\n     * commonly used in all cases. Also called as hex address\n     * `919db8e740d50bf349df2eea03fa30c385d846b991ff5542e67098ee833fc7f7` - account ID. A part of full\n     * address. Identifies account inside particular workchain\n     * `EQCRnbjnQNUL80nfLuoD+jDDhdhGuZH/VULmcJjugz/H9wam` - base64 address. Also called \"user-friendly\".\n     * Was used at the beginning of TON. Now it is supported for compatibility\n     *\n     * @param {ParamsOfGetAddressType} params\n     * @returns ResultOfGetAddressType\n     */\n    get_address_type(params) {\n        return this.client.request('utils.get_address_type', params);\n    }\n    /**\n     * Calculates storage fee for an account over a specified time period\n     *\n     * @param {ParamsOfCalcStorageFee} params\n     * @returns ResultOfCalcStorageFee\n     */\n    calc_storage_fee(params) {\n        return this.client.request('utils.calc_storage_fee', params);\n    }\n    /**\n     * Compresses data using Zstandard algorithm\n     *\n     * @param {ParamsOfCompressZstd} params\n     * @returns ResultOfCompressZstd\n     */\n    compress_zstd(params) {\n        return this.client.request('utils.compress_zstd', params);\n    }\n    /**\n     * Decompresses data using Zstandard algorithm\n     *\n     * @param {ParamsOfDecompressZstd} params\n     * @returns ResultOfDecompressZstd\n     */\n    decompress_zstd(params) {\n        return this.client.request('utils.decompress_zstd', params);\n    }\n}\nexports.UtilsModule = UtilsModule;\n// tvm module\nvar TvmErrorCode;\n(function (TvmErrorCode) {\n    TvmErrorCode[TvmErrorCode[\"CanNotReadTransaction\"] = 401] = \"CanNotReadTransaction\";\n    TvmErrorCode[TvmErrorCode[\"CanNotReadBlockchainConfig\"] = 402] = \"CanNotReadBlockchainConfig\";\n    TvmErrorCode[TvmErrorCode[\"TransactionAborted\"] = 403] = \"TransactionAborted\";\n    TvmErrorCode[TvmErrorCode[\"InternalError\"] = 404] = \"InternalError\";\n    TvmErrorCode[TvmErrorCode[\"ActionPhaseFailed\"] = 405] = \"ActionPhaseFailed\";\n    TvmErrorCode[TvmErrorCode[\"AccountCodeMissing\"] = 406] = \"AccountCodeMissing\";\n    TvmErrorCode[TvmErrorCode[\"LowBalance\"] = 407] = \"LowBalance\";\n    TvmErrorCode[TvmErrorCode[\"AccountFrozenOrDeleted\"] = 408] = \"AccountFrozenOrDeleted\";\n    TvmErrorCode[TvmErrorCode[\"AccountMissing\"] = 409] = \"AccountMissing\";\n    TvmErrorCode[TvmErrorCode[\"UnknownExecutionError\"] = 410] = \"UnknownExecutionError\";\n    TvmErrorCode[TvmErrorCode[\"InvalidInputStack\"] = 411] = \"InvalidInputStack\";\n    TvmErrorCode[TvmErrorCode[\"InvalidAccountBoc\"] = 412] = \"InvalidAccountBoc\";\n    TvmErrorCode[TvmErrorCode[\"InvalidMessageType\"] = 413] = \"InvalidMessageType\";\n    TvmErrorCode[TvmErrorCode[\"ContractExecutionError\"] = 414] = \"ContractExecutionError\";\n})(TvmErrorCode = exports.TvmErrorCode || (exports.TvmErrorCode = {}));\nfunction accountForExecutorNone() {\n    return {\n        type: 'None',\n    };\n}\nexports.accountForExecutorNone = accountForExecutorNone;\nfunction accountForExecutorUninit() {\n    return {\n        type: 'Uninit',\n    };\n}\nexports.accountForExecutorUninit = accountForExecutorUninit;\nfunction accountForExecutorAccount(boc, unlimited_balance) {\n    return {\n        type: 'Account',\n        boc,\n        unlimited_balance,\n    };\n}\nexports.accountForExecutorAccount = accountForExecutorAccount;\nclass TvmModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Emulates all the phases of contract execution locally\n     *\n     * @remarks\n     * Performs all the phases of contract execution on Transaction Executor -\n     * the same component that is used on Validator Nodes.\n     *\n     * Can be used for contract debugging, to find out the reason why a message was not delivered successfully.\n     * Validators throw away the failed external inbound messages (if they failed bedore `ACCEPT`) in the real network.\n     * This is why these messages are impossible to debug in the real network.\n     * With the help of run_executor you can do that. In fact, `process_message` function\n     * performs local check with `run_executor` if there was no transaction as a result of processing\n     * and returns the error, if there is one.\n     *\n     * Another use case to use `run_executor` is to estimate fees for message execution.\n     * Set  `AccountForExecutor::Account.unlimited_balance`\n     * to `true` so that emulation will not depend on the actual balance.\n     * This may be needed to calculate deploy fees for an account that does not exist yet.\n     * JSON with fees is in `fees` field of the result.\n     *\n     * One more use case - you can produce the sequence of operations,\n     * thus emulating the sequential contract calls locally.\n     * And so on.\n     *\n     * Transaction executor requires account BOC (bag of cells) as a parameter.\n     * To get the account BOC - use `net.query` method to download it from GraphQL API\n     * (field `boc` of `account`) or generate it with `abi.encode_account` method.\n     *\n     * Also it requires message BOC. To get the message BOC - use `abi.encode_message` or `abi.encode_internal_message`.\n     *\n     * If you need this emulation to be as precise as possible (for instance - emulate transaction\n     * with particular lt in particular block or use particular blockchain config,\n     * downloaded from a particular key block - then specify `execution_options` parameter.\n     *\n     * If you need to see the aborted transaction as a result, not as an error, set `skip_transaction_check` to `true`.\n     *\n     * @param {ParamsOfRunExecutor} params\n     * @returns ResultOfRunExecutor\n     */\n    run_executor(params) {\n        return this.client.request('tvm.run_executor', params);\n    }\n    /**\n     * Executes get-methods of ABI-compatible contracts\n     *\n     * @remarks\n     * Performs only a part of compute phase of transaction execution\n     * that is used to run get-methods of ABI-compatible contracts.\n     *\n     * If you try to run get-methods with `run_executor` you will get an error, because it checks ACCEPT and exits\n     * if there is none, which is actually true for get-methods.\n     *\n     *  To get the account BOC (bag of cells) - use `net.query` method to download it from GraphQL API\n     * (field `boc` of `account`) or generate it with `abi.encode_account method`.\n     * To get the message BOC - use `abi.encode_message` or prepare it any other way, for instance, with FIFT script.\n     *\n     * Attention! Updated account state is produces as well, but only\n     * `account_state.storage.state.data`  part of the BOC is updated.\n     *\n     * @param {ParamsOfRunTvm} params\n     * @returns ResultOfRunTvm\n     */\n    run_tvm(params) {\n        return this.client.request('tvm.run_tvm', params);\n    }\n    /**\n     * Executes a get-method of FIFT contract\n     *\n     * @remarks\n     * Executes a get-method of FIFT contract that fulfills the smc-guidelines https://test.ton.org/smc-guidelines.txt\n     * and returns the result data from TVM's stack\n     *\n     * @param {ParamsOfRunGet} params\n     * @returns ResultOfRunGet\n     */\n    run_get(params) {\n        return this.client.request('tvm.run_get', params);\n    }\n}\nexports.TvmModule = TvmModule;\n// net module\nvar NetErrorCode;\n(function (NetErrorCode) {\n    NetErrorCode[NetErrorCode[\"QueryFailed\"] = 601] = \"QueryFailed\";\n    NetErrorCode[NetErrorCode[\"SubscribeFailed\"] = 602] = \"SubscribeFailed\";\n    NetErrorCode[NetErrorCode[\"WaitForFailed\"] = 603] = \"WaitForFailed\";\n    NetErrorCode[NetErrorCode[\"GetSubscriptionResultFailed\"] = 604] = \"GetSubscriptionResultFailed\";\n    NetErrorCode[NetErrorCode[\"InvalidServerResponse\"] = 605] = \"InvalidServerResponse\";\n    NetErrorCode[NetErrorCode[\"ClockOutOfSync\"] = 606] = \"ClockOutOfSync\";\n    NetErrorCode[NetErrorCode[\"WaitForTimeout\"] = 607] = \"WaitForTimeout\";\n    NetErrorCode[NetErrorCode[\"GraphqlError\"] = 608] = \"GraphqlError\";\n    NetErrorCode[NetErrorCode[\"NetworkModuleSuspended\"] = 609] = \"NetworkModuleSuspended\";\n    NetErrorCode[NetErrorCode[\"WebsocketDisconnected\"] = 610] = \"WebsocketDisconnected\";\n    NetErrorCode[NetErrorCode[\"NotSupported\"] = 611] = \"NotSupported\";\n    NetErrorCode[NetErrorCode[\"NoEndpointsProvided\"] = 612] = \"NoEndpointsProvided\";\n    NetErrorCode[NetErrorCode[\"GraphqlWebsocketInitError\"] = 613] = \"GraphqlWebsocketInitError\";\n    NetErrorCode[NetErrorCode[\"NetworkModuleResumed\"] = 614] = \"NetworkModuleResumed\";\n    NetErrorCode[NetErrorCode[\"Unauthorized\"] = 615] = \"Unauthorized\";\n})(NetErrorCode = exports.NetErrorCode || (exports.NetErrorCode = {}));\nvar SortDirection;\n(function (SortDirection) {\n    SortDirection[\"ASC\"] = \"ASC\";\n    SortDirection[\"DESC\"] = \"DESC\";\n})(SortDirection = exports.SortDirection || (exports.SortDirection = {}));\nfunction paramsOfQueryOperationQueryCollection(params) {\n    return Object.assign({ type: 'QueryCollection' }, params);\n}\nexports.paramsOfQueryOperationQueryCollection = paramsOfQueryOperationQueryCollection;\nfunction paramsOfQueryOperationWaitForCollection(params) {\n    return Object.assign({ type: 'WaitForCollection' }, params);\n}\nexports.paramsOfQueryOperationWaitForCollection = paramsOfQueryOperationWaitForCollection;\nfunction paramsOfQueryOperationAggregateCollection(params) {\n    return Object.assign({ type: 'AggregateCollection' }, params);\n}\nexports.paramsOfQueryOperationAggregateCollection = paramsOfQueryOperationAggregateCollection;\nfunction paramsOfQueryOperationQueryCounterparties(params) {\n    return Object.assign({ type: 'QueryCounterparties' }, params);\n}\nexports.paramsOfQueryOperationQueryCounterparties = paramsOfQueryOperationQueryCounterparties;\nvar AggregationFn;\n(function (AggregationFn) {\n    AggregationFn[\"COUNT\"] = \"COUNT\";\n    AggregationFn[\"MIN\"] = \"MIN\";\n    AggregationFn[\"MAX\"] = \"MAX\";\n    AggregationFn[\"SUM\"] = \"SUM\";\n    AggregationFn[\"AVERAGE\"] = \"AVERAGE\";\n})(AggregationFn = exports.AggregationFn || (exports.AggregationFn = {}));\n/**\n * Network access.\n */\nclass NetModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Performs DAppServer GraphQL query.\n     *\n     * @param {ParamsOfQuery} params\n     * @returns ResultOfQuery\n     */\n    query(params) {\n        return this.client.request('net.query', params);\n    }\n    /**\n     * Performs multiple queries per single fetch.\n     *\n     * @param {ParamsOfBatchQuery} params\n     * @returns ResultOfBatchQuery\n     */\n    batch_query(params) {\n        return this.client.request('net.batch_query', params);\n    }\n    /**\n     * Queries collection data\n     *\n     * @remarks\n     * Queries data that satisfies the `filter` conditions,\n     * limits the number of returned records and orders them.\n     * The projection fields are limited to `result` fields\n     *\n     * @param {ParamsOfQueryCollection} params\n     * @returns ResultOfQueryCollection\n     */\n    query_collection(params) {\n        return this.client.request('net.query_collection', params);\n    }\n    /**\n     * Aggregates collection data.\n     *\n     * @remarks\n     * Aggregates values from the specified `fields` for records\n     * that satisfies the `filter` conditions,\n     *\n     * @param {ParamsOfAggregateCollection} params\n     * @returns ResultOfAggregateCollection\n     */\n    aggregate_collection(params) {\n        return this.client.request('net.aggregate_collection', params);\n    }\n    /**\n     * Returns an object that fulfills the conditions or waits for its appearance\n     *\n     * @remarks\n     * Triggers only once.\n     * If object that satisfies the `filter` conditions\n     * already exists - returns it immediately.\n     * If not - waits for insert/update of data within the specified `timeout`,\n     * and returns it.\n     * The projection fields are limited to `result` fields\n     *\n     * @param {ParamsOfWaitForCollection} params\n     * @returns ResultOfWaitForCollection\n     */\n    wait_for_collection(params) {\n        return this.client.request('net.wait_for_collection', params);\n    }\n    /**\n     * Cancels a subscription\n     *\n     * @remarks\n     * Cancels a subscription specified by its handle.\n     *\n     * @param {ResultOfSubscribeCollection} params\n     * @returns\n     */\n    unsubscribe(params) {\n        return this.client.request('net.unsubscribe', params);\n    }\n    /**\n     * Creates a collection subscription\n     *\n     * @remarks\n     * Triggers for each insert/update of data that satisfies\n     * the `filter` conditions.\n     * The projection fields are limited to `result` fields.\n     *\n     * The subscription is a persistent communication channel between\n     * client and Free TON Network.\n     * All changes in the blockchain will be reflected in realtime.\n     * Changes means inserts and updates of the blockchain entities.\n     *\n     * ### Important Notes on Subscriptions\n     *\n     * Unfortunately sometimes the connection with the network brakes down.\n     * In this situation the library attempts to reconnect to the network.\n     * This reconnection sequence can take significant time.\n     * All of this time the client is disconnected from the network.\n     *\n     * Bad news is that all blockchain changes that happened while\n     * the client was disconnected are lost.\n     *\n     * Good news is that the client report errors to the callback when\n     * it loses and resumes connection.\n     *\n     * So, if the lost changes are important to the application then\n     * the application must handle these error reports.\n     *\n     * Library reports errors with `responseType` == 101\n     * and the error object passed via `params`.\n     *\n     * When the library has successfully reconnected\n     * the application receives callback with\n     * `responseType` == 101 and `params.code` == 614 (NetworkModuleResumed).\n     *\n     * Application can use several ways to handle this situation:\n     * - If application monitors changes for the single blockchain\n     * object (for example specific account):  application\n     * can perform a query for this object and handle actual data as a\n     * regular data from the subscription.\n     * - If application monitors sequence of some blockchain objects\n     * (for example transactions of the specific account): application must\n     * refresh all cached (or visible to user) lists where this sequences presents.\n     *\n     * @param {ParamsOfSubscribeCollection} params\n     * @returns ResultOfSubscribeCollection\n     */\n    subscribe_collection(params, responseHandler) {\n        return this.client.request('net.subscribe_collection', params, responseHandler);\n    }\n    /**\n     * Creates a subscription\n     *\n     * @remarks\n     * The subscription is a persistent communication channel between\n     * client and Everscale Network.\n     *\n     * ### Important Notes on Subscriptions\n     *\n     * Unfortunately sometimes the connection with the network breakes down.\n     * In this situation the library attempts to reconnect to the network.\n     * This reconnection sequence can take significant time.\n     * All of this time the client is disconnected from the network.\n     *\n     * Bad news is that all changes that happened while\n     * the client was disconnected are lost.\n     *\n     * Good news is that the client report errors to the callback when\n     * it loses and resumes connection.\n     *\n     * So, if the lost changes are important to the application then\n     * the application must handle these error reports.\n     *\n     * Library reports errors with `responseType` == 101\n     * and the error object passed via `params`.\n     *\n     * When the library has successfully reconnected\n     * the application receives callback with\n     * `responseType` == 101 and `params.code` == 614 (NetworkModuleResumed).\n     *\n     * Application can use several ways to handle this situation:\n     * - If application monitors changes for the single\n     * object (for example specific account):  application\n     * can perform a query for this object and handle actual data as a\n     * regular data from the subscription.\n     * - If application monitors sequence of some objects\n     * (for example transactions of the specific account): application must\n     * refresh all cached (or visible to user) lists where this sequences presents.\n     *\n     * @param {ParamsOfSubscribe} params\n     * @returns ResultOfSubscribeCollection\n     */\n    subscribe(params, responseHandler) {\n        return this.client.request('net.subscribe', params, responseHandler);\n    }\n    /**\n     * Suspends network module to stop any network activity\n     * @returns\n     */\n    suspend() {\n        return this.client.request('net.suspend');\n    }\n    /**\n     * Resumes network module to enable network activity\n     * @returns\n     */\n    resume() {\n        return this.client.request('net.resume');\n    }\n    /**\n     * Returns ID of the last block in a specified account shard\n     *\n     * @param {ParamsOfFindLastShardBlock} params\n     * @returns ResultOfFindLastShardBlock\n     */\n    find_last_shard_block(params) {\n        return this.client.request('net.find_last_shard_block', params);\n    }\n    /**\n     * Requests the list of alternative endpoints from server\n     * @returns EndpointsSet\n     */\n    fetch_endpoints() {\n        return this.client.request('net.fetch_endpoints');\n    }\n    /**\n     * Sets the list of endpoints to use on reinit\n     *\n     * @param {EndpointsSet} params\n     * @returns\n     */\n    set_endpoints(params) {\n        return this.client.request('net.set_endpoints', params);\n    }\n    /**\n     * Requests the list of alternative endpoints from server\n     * @returns ResultOfGetEndpoints\n     */\n    get_endpoints() {\n        return this.client.request('net.get_endpoints');\n    }\n    /**\n     * Allows to query and paginate through the list of accounts that the specified account has interacted with, sorted by the time of the last internal message between accounts\n     *\n     * @remarks\n     * *Attention* this query retrieves data from 'Counterparties' service which is not supported in\n     * the opensource version of DApp Server (and will not be supported) as well as in Evernode SE (will be supported in SE in future),\n     * but is always accessible via [EVER OS Clouds](../ton-os-api/networks.md)\n     *\n     * @param {ParamsOfQueryCounterparties} params\n     * @returns ResultOfQueryCollection\n     */\n    query_counterparties(params) {\n        return this.client.request('net.query_counterparties', params);\n    }\n    /**\n     * Returns a tree of transactions triggered by a specific message.\n     *\n     * @remarks\n     * Performs recursive retrieval of a transactions tree produced by a specific message:\n     * in_msg -> dst_transaction -> out_messages -> dst_transaction -> ...\n     * If the chain of transactions execution is in progress while the function is running,\n     * it will wait for the next transactions to appear until the full tree or more than 50 transactions\n     * are received.\n     *\n     * All the retrieved messages and transactions are included\n     * into `result.messages` and `result.transactions` respectively.\n     *\n     * Function reads transactions layer by layer, by pages of 20 transactions.\n     *\n     * The retrieval prosess goes like this:\n     * Let's assume we have an infinite chain of transactions and each transaction generates 5 messages.\n     * 1. Retrieve 1st message (input parameter) and corresponding transaction - put it into result.\n     * It is the first level of the tree of transactions - its root.\n     * Retrieve 5 out message ids from the transaction for next steps.\n     * 2. Retrieve 5 messages and corresponding transactions on the 2nd layer. Put them into result.\n     * Retrieve 5*5 out message ids from these transactions for next steps\n     * 3. Retrieve 20 (size of the page) messages and transactions (3rd layer) and 20*5=100 message ids (4th layer).\n     * 4. Retrieve the last 5 messages and 5 transactions on the 3rd layer + 15 messages and transactions (of 100) from the 4th layer\n     * + 25 message ids of the 4th layer + 75 message ids of the 5th layer.\n     * 5. Retrieve 20 more messages and 20 more transactions of the 4th layer + 100 more message ids of the 5th layer.\n     * 6. Now we have 1+5+20+20+20 = 66 transactions, which is more than 50. Function exits with the tree of\n     * 1m->1t->5m->5t->25m->25t->35m->35t. If we see any message ids in the last transactions out_msgs, which don't have\n     * corresponding messages in the function result, it means that the full tree was not received and we need to continue iteration.\n     *\n     * To summarize, it is guaranteed that each message in `result.messages` has the corresponding transaction\n     * in the `result.transactions`.\n     * But there is no guarantee that all messages from transactions `out_msgs` are\n     * presented in `result.messages`.\n     * So the application has to continue retrieval for missing messages if it requires.\n     *\n     * @param {ParamsOfQueryTransactionTree} params\n     * @returns ResultOfQueryTransactionTree\n     */\n    query_transaction_tree(params) {\n        return this.client.request('net.query_transaction_tree', params);\n    }\n    /**\n     * Creates block iterator.\n     *\n     * @remarks\n     * Block iterator uses robust iteration methods that guaranties that every\n     * block in the specified range isn't missed or iterated twice.\n     *\n     * Iterated range can be reduced with some filters:\n     * - `start_time` – the bottom time range. Only blocks with `gen_utime`\n     * more or equal to this value is iterated. If this parameter is omitted then there is\n     * no bottom time edge, so all blocks since zero state is iterated.\n     * - `end_time` – the upper time range. Only blocks with `gen_utime`\n     * less then this value is iterated. If this parameter is omitted then there is\n     * no upper time edge, so iterator never finishes.\n     * - `shard_filter` – workchains and shard prefixes that reduce the set of interesting\n     * blocks. Block conforms to the shard filter if it belongs to the filter workchain\n     * and the first bits of block's `shard` fields matches to the shard prefix.\n     * Only blocks with suitable shard are iterated.\n     *\n     * Items iterated is a JSON objects with block data. The minimal set of returned\n     * fields is:\n     * ```text\n     * id\n     * gen_utime\n     * workchain_id\n     * shard\n     * after_split\n     * after_merge\n     * prev_ref {\n     *     root_hash\n     * }\n     * prev_alt_ref {\n     *     root_hash\n     * }\n     * ```\n     * Application can request additional fields in the `result` parameter.\n     *\n     * Application should call the `remove_iterator` when iterator is no longer required.\n     *\n     * @param {ParamsOfCreateBlockIterator} params\n     * @returns RegisteredIterator\n     */\n    create_block_iterator(params) {\n        return this.client.request('net.create_block_iterator', params);\n    }\n    /**\n     * Resumes block iterator.\n     *\n     * @remarks\n     * The iterator stays exactly at the same position where the `resume_state` was catched.\n     *\n     * Application should call the `remove_iterator` when iterator is no longer required.\n     *\n     * @param {ParamsOfResumeBlockIterator} params\n     * @returns RegisteredIterator\n     */\n    resume_block_iterator(params) {\n        return this.client.request('net.resume_block_iterator', params);\n    }\n    /**\n     * Creates transaction iterator.\n     *\n     * @remarks\n     * Transaction iterator uses robust iteration methods that guaranty that every\n     * transaction in the specified range isn't missed or iterated twice.\n     *\n     * Iterated range can be reduced with some filters:\n     * - `start_time` – the bottom time range. Only transactions with `now`\n     * more or equal to this value are iterated. If this parameter is omitted then there is\n     * no bottom time edge, so all the transactions since zero state are iterated.\n     * - `end_time` – the upper time range. Only transactions with `now`\n     * less then this value are iterated. If this parameter is omitted then there is\n     * no upper time edge, so iterator never finishes.\n     * - `shard_filter` – workchains and shard prefixes that reduce the set of interesting\n     * accounts. Account address conforms to the shard filter if\n     * it belongs to the filter workchain and the first bits of address match to\n     * the shard prefix. Only transactions with suitable account addresses are iterated.\n     * - `accounts_filter` – set of account addresses whose transactions must be iterated.\n     * Note that accounts filter can conflict with shard filter so application must combine\n     * these filters carefully.\n     *\n     * Iterated item is a JSON objects with transaction data. The minimal set of returned\n     * fields is:\n     * ```text\n     * id\n     * account_addr\n     * now\n     * balance_delta(format:DEC)\n     * bounce { bounce_type }\n     * in_message {\n     *     id\n     *     value(format:DEC)\n     *     msg_type\n     *     src\n     * }\n     * out_messages {\n     *     id\n     *     value(format:DEC)\n     *     msg_type\n     *     dst\n     * }\n     * ```\n     * Application can request an additional fields in the `result` parameter.\n     *\n     * Another parameter that affects on the returned fields is the `include_transfers`.\n     * When this parameter is `true` the iterator computes and adds `transfer` field containing\n     * list of the useful `TransactionTransfer` objects.\n     * Each transfer is calculated from the particular message related to the transaction\n     * and has the following structure:\n     * - message – source message identifier.\n     * - isBounced – indicates that the transaction is bounced, which means the value will be returned back to the sender.\n     * - isDeposit – indicates that this transfer is the deposit (true) or withdraw (false).\n     * - counterparty – account address of the transfer source or destination depending on `isDeposit`.\n     * - value – amount of nano tokens transferred. The value is represented as a decimal string\n     * because the actual value can be more precise than the JSON number can represent. Application\n     * must use this string carefully – conversion to number can follow to loose of precision.\n     *\n     * Application should call the `remove_iterator` when iterator is no longer required.\n     *\n     * @param {ParamsOfCreateTransactionIterator} params\n     * @returns RegisteredIterator\n     */\n    create_transaction_iterator(params) {\n        return this.client.request('net.create_transaction_iterator', params);\n    }\n    /**\n     * Resumes transaction iterator.\n     *\n     * @remarks\n     * The iterator stays exactly at the same position where the `resume_state` was caught.\n     * Note that `resume_state` doesn't store the account filter. If the application requires\n     * to use the same account filter as it was when the iterator was created then the application\n     * must pass the account filter again in `accounts_filter` parameter.\n     *\n     * Application should call the `remove_iterator` when iterator is no longer required.\n     *\n     * @param {ParamsOfResumeTransactionIterator} params\n     * @returns RegisteredIterator\n     */\n    resume_transaction_iterator(params) {\n        return this.client.request('net.resume_transaction_iterator', params);\n    }\n    /**\n     * Returns next available items.\n     *\n     * @remarks\n     * In addition to available items this function returns the `has_more` flag\n     * indicating that the iterator isn't reach the end of the iterated range yet.\n     *\n     * This function can return the empty list of available items but\n     * indicates that there are more items is available.\n     * This situation appears when the iterator doesn't reach iterated range\n     * but database doesn't contains available items yet.\n     *\n     * If application requests resume state in `return_resume_state` parameter\n     * then this function returns `resume_state` that can be used later to\n     * resume the iteration from the position after returned items.\n     *\n     * The structure of the items returned depends on the iterator used.\n     * See the description to the appropriated iterator creation function.\n     *\n     * @param {ParamsOfIteratorNext} params\n     * @returns ResultOfIteratorNext\n     */\n    iterator_next(params) {\n        return this.client.request('net.iterator_next', params);\n    }\n    /**\n     * Removes an iterator\n     *\n     * @remarks\n     * Frees all resources allocated in library to serve iterator.\n     *\n     * Application always should call the `remove_iterator` when iterator\n     * is no longer required.\n     *\n     * @param {RegisteredIterator} params\n     * @returns\n     */\n    remove_iterator(params) {\n        return this.client.request('net.remove_iterator', params);\n    }\n}\nexports.NetModule = NetModule;\n// debot module\nvar DebotErrorCode;\n(function (DebotErrorCode) {\n    DebotErrorCode[DebotErrorCode[\"DebotStartFailed\"] = 801] = \"DebotStartFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotFetchFailed\"] = 802] = \"DebotFetchFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotExecutionFailed\"] = 803] = \"DebotExecutionFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotInvalidHandle\"] = 804] = \"DebotInvalidHandle\";\n    DebotErrorCode[DebotErrorCode[\"DebotInvalidJsonParams\"] = 805] = \"DebotInvalidJsonParams\";\n    DebotErrorCode[DebotErrorCode[\"DebotInvalidFunctionId\"] = 806] = \"DebotInvalidFunctionId\";\n    DebotErrorCode[DebotErrorCode[\"DebotInvalidAbi\"] = 807] = \"DebotInvalidAbi\";\n    DebotErrorCode[DebotErrorCode[\"DebotGetMethodFailed\"] = 808] = \"DebotGetMethodFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotInvalidMsg\"] = 809] = \"DebotInvalidMsg\";\n    DebotErrorCode[DebotErrorCode[\"DebotExternalCallFailed\"] = 810] = \"DebotExternalCallFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotBrowserCallbackFailed\"] = 811] = \"DebotBrowserCallbackFailed\";\n    DebotErrorCode[DebotErrorCode[\"DebotOperationRejected\"] = 812] = \"DebotOperationRejected\";\n    DebotErrorCode[DebotErrorCode[\"DebotNoCode\"] = 813] = \"DebotNoCode\";\n})(DebotErrorCode = exports.DebotErrorCode || (exports.DebotErrorCode = {}));\nfunction debotActivityTransaction(msg, dst, out, fee, setcode, signkey, signing_box_handle) {\n    return {\n        type: 'Transaction',\n        msg,\n        dst,\n        out,\n        fee,\n        setcode,\n        signkey,\n        signing_box_handle,\n    };\n}\nexports.debotActivityTransaction = debotActivityTransaction;\nfunction paramsOfAppDebotBrowserLog(msg) {\n    return {\n        type: 'Log',\n        msg,\n    };\n}\nexports.paramsOfAppDebotBrowserLog = paramsOfAppDebotBrowserLog;\nfunction paramsOfAppDebotBrowserSwitch(context_id) {\n    return {\n        type: 'Switch',\n        context_id,\n    };\n}\nexports.paramsOfAppDebotBrowserSwitch = paramsOfAppDebotBrowserSwitch;\nfunction paramsOfAppDebotBrowserSwitchCompleted() {\n    return {\n        type: 'SwitchCompleted',\n    };\n}\nexports.paramsOfAppDebotBrowserSwitchCompleted = paramsOfAppDebotBrowserSwitchCompleted;\nfunction paramsOfAppDebotBrowserShowAction(action) {\n    return {\n        type: 'ShowAction',\n        action,\n    };\n}\nexports.paramsOfAppDebotBrowserShowAction = paramsOfAppDebotBrowserShowAction;\nfunction paramsOfAppDebotBrowserInput(prompt) {\n    return {\n        type: 'Input',\n        prompt,\n    };\n}\nexports.paramsOfAppDebotBrowserInput = paramsOfAppDebotBrowserInput;\nfunction paramsOfAppDebotBrowserGetSigningBox() {\n    return {\n        type: 'GetSigningBox',\n    };\n}\nexports.paramsOfAppDebotBrowserGetSigningBox = paramsOfAppDebotBrowserGetSigningBox;\nfunction paramsOfAppDebotBrowserInvokeDebot(debot_addr, action) {\n    return {\n        type: 'InvokeDebot',\n        debot_addr,\n        action,\n    };\n}\nexports.paramsOfAppDebotBrowserInvokeDebot = paramsOfAppDebotBrowserInvokeDebot;\nfunction paramsOfAppDebotBrowserSend(message) {\n    return {\n        type: 'Send',\n        message,\n    };\n}\nexports.paramsOfAppDebotBrowserSend = paramsOfAppDebotBrowserSend;\nfunction paramsOfAppDebotBrowserApprove(activity) {\n    return {\n        type: 'Approve',\n        activity,\n    };\n}\nexports.paramsOfAppDebotBrowserApprove = paramsOfAppDebotBrowserApprove;\nfunction resultOfAppDebotBrowserInput(value) {\n    return {\n        type: 'Input',\n        value,\n    };\n}\nexports.resultOfAppDebotBrowserInput = resultOfAppDebotBrowserInput;\nfunction resultOfAppDebotBrowserGetSigningBox(signing_box) {\n    return {\n        type: 'GetSigningBox',\n        signing_box,\n    };\n}\nexports.resultOfAppDebotBrowserGetSigningBox = resultOfAppDebotBrowserGetSigningBox;\nfunction resultOfAppDebotBrowserInvokeDebot() {\n    return {\n        type: 'InvokeDebot',\n    };\n}\nexports.resultOfAppDebotBrowserInvokeDebot = resultOfAppDebotBrowserInvokeDebot;\nfunction resultOfAppDebotBrowserApprove(approved) {\n    return {\n        type: 'Approve',\n        approved,\n    };\n}\nexports.resultOfAppDebotBrowserApprove = resultOfAppDebotBrowserApprove;\nfunction dispatchAppDebotBrowser(obj, params, app_request_id, client) {\n    return __awaiter(this, void 0, void 0, function* () {\n        try {\n            let result = {};\n            switch (params.type) {\n                case 'Log':\n                    obj.log(params);\n                    break;\n                case 'Switch':\n                    obj.switch(params);\n                    break;\n                case 'SwitchCompleted':\n                    obj.switch_completed();\n                    break;\n                case 'ShowAction':\n                    obj.show_action(params);\n                    break;\n                case 'Input':\n                    result = yield obj.input(params);\n                    break;\n                case 'GetSigningBox':\n                    result = yield obj.get_signing_box();\n                    break;\n                case 'InvokeDebot':\n                    yield obj.invoke_debot(params);\n                    break;\n                case 'Send':\n                    obj.send(params);\n                    break;\n                case 'Approve':\n                    result = yield obj.approve(params);\n                    break;\n            }\n            client.resolve_app_request(app_request_id, Object.assign({ type: params.type }, result));\n        }\n        catch (error) {\n            client.reject_app_request(app_request_id, error);\n        }\n    });\n}\n/**\n * [UNSTABLE](UNSTABLE.md) Module for working with debot.\n */\nclass DebotModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Creates and instance of DeBot.\n     *\n     * @remarks\n     * Downloads debot smart contract (code and data) from blockchain and creates\n     * an instance of Debot Engine for it.\n     *\n     * # Remarks\n     * It does not switch debot to context 0. Browser Callbacks are not called.\n     *\n     * @param {ParamsOfInit} params\n     * @returns RegisteredDebot\n     */\n    init(params, obj) {\n        return this.client.request('debot.init', params, (params, responseType) => {\n            if (responseType === 3) {\n                dispatchAppDebotBrowser(obj, params.request_data, params.app_request_id, this.client);\n            }\n            else if (responseType === 4) {\n                dispatchAppDebotBrowser(obj, params, null, this.client);\n            }\n        });\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Starts the DeBot.\n     *\n     * @remarks\n     * Downloads debot smart contract from blockchain and switches it to\n     * context zero.\n     *\n     * This function must be used by Debot Browser to start a dialog with debot.\n     * While the function is executing, several Browser Callbacks can be called,\n     * since the debot tries to display all actions from the context 0 to the user.\n     *\n     * When the debot starts SDK registers `BrowserCallbacks` AppObject.\n     * Therefore when `debote.remove` is called the debot is being deleted and the callback is called\n     * with `finish`=`true` which indicates that it will never be used again.\n     *\n     * @param {ParamsOfStart} params\n     * @returns\n     */\n    start(params) {\n        return this.client.request('debot.start', params);\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Fetches DeBot metadata from blockchain.\n     *\n     * @remarks\n     * Downloads DeBot from blockchain and creates and fetches its metadata.\n     *\n     * @param {ParamsOfFetch} params\n     * @returns ResultOfFetch\n     */\n    fetch(params) {\n        return this.client.request('debot.fetch', params);\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Executes debot action.\n     *\n     * @remarks\n     * Calls debot engine referenced by debot handle to execute input action.\n     * Calls Debot Browser Callbacks if needed.\n     *\n     * # Remarks\n     * Chain of actions can be executed if input action generates a list of subactions.\n     *\n     * @param {ParamsOfExecute} params\n     * @returns\n     */\n    execute(params) {\n        return this.client.request('debot.execute', params);\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Sends message to Debot.\n     *\n     * @remarks\n     * Used by Debot Browser to send response on Dinterface call or from other Debots.\n     *\n     * @param {ParamsOfSend} params\n     * @returns\n     */\n    send(params) {\n        return this.client.request('debot.send', params);\n    }\n    /**\n     * [UNSTABLE](UNSTABLE.md) Destroys debot handle.\n     *\n     * @remarks\n     * Removes handle from Client Context and drops debot engine referenced by that handle.\n     *\n     * @param {ParamsOfRemove} params\n     * @returns\n     */\n    remove(params) {\n        return this.client.request('debot.remove', params);\n    }\n}\nexports.DebotModule = DebotModule;\n// proofs module\nvar ProofsErrorCode;\n(function (ProofsErrorCode) {\n    ProofsErrorCode[ProofsErrorCode[\"InvalidData\"] = 901] = \"InvalidData\";\n    ProofsErrorCode[ProofsErrorCode[\"ProofCheckFailed\"] = 902] = \"ProofCheckFailed\";\n    ProofsErrorCode[ProofsErrorCode[\"InternalError\"] = 903] = \"InternalError\";\n    ProofsErrorCode[ProofsErrorCode[\"DataDiffersFromProven\"] = 904] = \"DataDiffersFromProven\";\n})(ProofsErrorCode = exports.ProofsErrorCode || (exports.ProofsErrorCode = {}));\n/**\n * [UNSTABLE](UNSTABLE.md) Module for proving data, retrieved from TONOS API.\n */\nclass ProofsModule {\n    constructor(client) {\n        this.client = client;\n    }\n    /**\n     * Proves that a given block's data, which is queried from TONOS API, can be trusted.\n     *\n     * @remarks\n     * This function checks block proofs and compares given data with the proven.\n     * If the given data differs from the proven, the exception will be thrown.\n     * The input param is a single block's JSON object, which was queried from DApp server using\n     * functions such as `net.query`, `net.query_collection` or `net.wait_for_collection`.\n     * If block's BOC is not provided in the JSON, it will be queried from DApp server\n     * (in this case it is required to provide at least `id` of block).\n     *\n     * Please note, that joins (like `signatures` in `Block`) are separated entities and not supported,\n     * so function will throw an exception in a case if JSON being checked has such entities in it.\n     *\n     * If `cache_in_local_storage` in config is set to `true` (default), downloaded proofs and\n     * master-chain BOCs are saved into the persistent local storage (e.g. file system for native\n     * environments or browser's IndexedDB for the web); otherwise all the data is cached only in\n     * memory in current client's context and will be lost after destruction of the client.\n     *\n     * **Why Proofs are needed**\n     *\n     * Proofs are needed to ensure that the data downloaded from a DApp server is real blockchain\n     * data. Checking proofs can protect from the malicious DApp server which can potentially provide\n     * fake data, or also from \"Man in the Middle\" attacks class.\n     *\n     * **What Proofs are**\n     *\n     * Simply, proof is a list of signatures of validators', which have signed this particular master-\n     * block.\n     *\n     * The very first validator set's public keys are included in the zero-state. Whe know a root hash\n     * of the zero-state, because it is stored in the network configuration file, it is our authority\n     * root. For proving zero-state it is enough to calculate and compare its root hash.\n     *\n     * In each new validator cycle the validator set is changed. The new one is stored in a key-block,\n     * which is signed by the validator set, which we already trust, the next validator set will be\n     * stored to the new key-block and signed by the current validator set, and so on.\n     *\n     * In order to prove any block in the master-chain we need to check, that it has been signed by\n     * a trusted validator set. So we need to check all key-blocks' proofs, started from the zero-state\n     * and until the block, which we want to prove. But it can take a lot of time and traffic to\n     * download and prove all key-blocks on a client. For solving this, special trusted blocks are used\n     * in Ever-SDK.\n     *\n     * The trusted block is the authority root, as well, as the zero-state. Each trusted block is the\n     * `id` (e.g. `root_hash`) of the already proven key-block. There can be plenty of trusted\n     * blocks, so there can be a lot of authority roots. The hashes of trusted blocks for MainNet\n     * and DevNet are hardcoded in SDK in a separated binary file (trusted_key_blocks.bin) and is\n     * being updated for each release by using `update_trusted_blocks` utility.\n     *\n     * See [update_trusted_blocks](../../../tools/update_trusted_blocks) directory for more info.\n     *\n     * In future SDK releases, one will also be able to provide their hashes of trusted blocks for\n     * other networks, besides for MainNet and DevNet.\n     * By using trusted key-blocks, in order to prove any block, we can prove chain of key-blocks to\n     * the closest previous trusted key-block, not only to the zero-state.\n     *\n     * But shard-blocks don't have proofs on DApp server. In this case, in order to prove any shard-\n     * block data, we search for a corresponding master-block, which contains the root hash of this\n     * shard-block, or some shard block which is linked to that block in shard-chain. After proving\n     * this master-block, we traverse through each link and calculate and compare hashes with links,\n     * one-by-one. After that we can ensure that this shard-block has also been proven.\n     *\n     * @param {ParamsOfProofBlockData} params\n     * @returns\n     */\n    proof_block_data(params) {\n        return this.client.request('proofs.proof_block_data', params);\n    }\n    /**\n     * Proves that a given transaction's data, which is queried from TONOS API, can be trusted.\n     *\n     * @remarks\n     * This function requests the corresponding block, checks block proofs, ensures that given\n     * transaction exists in the proven block and compares given data with the proven.\n     * If the given data differs from the proven, the exception will be thrown.\n     * The input parameter is a single transaction's JSON object (see params description),\n     * which was queried from TONOS API using functions such as `net.query`, `net.query_collection`\n     * or `net.wait_for_collection`.\n     *\n     * If transaction's BOC and/or `block_id` are not provided in the JSON, they will be queried from\n     * TONOS API.\n     *\n     * Please note, that joins (like `account`, `in_message`, `out_messages`, etc. in `Transaction`\n     * entity) are separated entities and not supported, so function will throw an exception in a case\n     * if JSON being checked has such entities in it.\n     *\n     * For more information about proofs checking, see description of `proof_block_data` function.\n     *\n     * @param {ParamsOfProofTransactionData} params\n     * @returns\n     */\n    proof_transaction_data(params) {\n        return this.client.request('proofs.proof_transaction_data', params);\n    }\n    /**\n     * Proves that a given message's data, which is queried from TONOS API, can be trusted.\n     *\n     * @remarks\n     * This function first proves the corresponding transaction, ensures that the proven transaction\n     * refers to the given message and compares given data with the proven.\n     * If the given data differs from the proven, the exception will be thrown.\n     * The input parameter is a single message's JSON object (see params description),\n     * which was queried from TONOS API using functions such as `net.query`, `net.query_collection`\n     * or `net.wait_for_collection`.\n     *\n     * If message's BOC and/or non-null `src_transaction.id` or `dst_transaction.id` are not provided\n     * in the JSON, they will be queried from TONOS API.\n     *\n     * Please note, that joins (like `block`, `dst_account`, `dst_transaction`, `src_account`,\n     * `src_transaction`, etc. in `Message` entity) are separated entities and not supported,\n     * so function will throw an exception in a case if JSON being checked has such entities in it.\n     *\n     * For more information about proofs checking, see description of `proof_block_data` function.\n     *\n     * @param {ParamsOfProofMessageData} params\n     * @returns\n     */\n    proof_message_data(params) {\n        return this.client.request('proofs.proof_message_data', params);\n    }\n}\nexports.ProofsModule = ProofsModule;\n//# sourceMappingURL=modules.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@eversdk/core/dist/modules.js\n");

/***/ }),

/***/ "./node_modules/@eversdk/lib-web/index.js":
/*!************************************************!*\
  !*** ./node_modules/@eversdk/lib-web/index.js ***!
  \************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"libWebSetup\": () => (/* binding */ libWebSetup),\n/* harmony export */   \"libWeb\": () => (/* binding */ libWeb)\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\n/*\n * Copyright 2018-2020 TON Labs LTD.\n *\n * Licensed under the SOFTWARE EVALUATION License (the \"License\"); you may not use\n * this file except in compliance with the License.\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific TON DEV software governing permissions and\n * limitations under the License.\n *\n */\n\n// This file is just a template that used to generate index.js at npm installation stage\n\nconst workerScript = `//****************************************************************** WRAPPER BEGIN\n\nlet wasm;\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet cachedFloat64Memory0 = new Float64Array();\n\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\n\nlet cachedBigInt64Memory0 = new BigInt64Array();\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0.byteLength === 0) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  \\`\\${val}\\`;\n    }\n    if (type == 'string') {\n        return \\`\"\\${val}\"\\`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return \\`Symbol(\\${description})\\`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return \\`Function(\\${name})\\`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\\\[object ([^\\\\]]+)\\\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of \\`val\\`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return \\`\\${val.name}: \\${val.message}\\\\n\\${val.stack}\\`;\n    }\n    // TODO we could test for more things here, like \\`Set\\`s and \\`Map\\`s.\n    return className;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_50(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__he8db5fa167706a09(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction __wbg_adapter_53(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hed540c88454df031(arg0, arg1);\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_56(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hc182e4d50354196b(arg0, arg1);\n}\n\nfunction __wbg_adapter_59(arg0, arg1, arg2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h7cbc3c322963706f(retptr, arg0, arg1, addHeapObject(arg2));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction __wbg_adapter_62(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h3709808ff1741914(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction __wbg_adapter_65(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h6c6161aacd664479(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction __wbg_adapter_68(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h68aa97d113ee360c(arg0, arg1, addHeapObject(arg2));\n}\n\n/**\n* @param {string} config_json\n* @returns {string}\n*/\nfunction core_create_context(config_json) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(config_json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.core_create_context(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {number} context\n*/\nfunction core_destroy_context(context) {\n    wasm.core_destroy_context(context);\n}\n\n/**\n* @param {number} context\n* @param {string} function_name\n* @param {any} params\n* @param {number} request_id\n*/\nfunction core_request(context, function_name, params, request_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.core_request(retptr, context, ptr0, len0, addHeapObject(params), request_id);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"\\`WebAssembly.instantiateStreaming\\` failed because your server does not serve wasm with \\`application/wasm\\` MIME type. Falling back to \\`WebAssembly.instantiate\\` which is slower. Original error:\\\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_new_8d2af00bc1e329ee = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_3f3d764d4747d564 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_d9aa266703cb98be = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_newwithlength_7c42f7e738a9d5d3 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_a68214f35c417fa9 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_newwithu8arraysequence_f863246af83e1785 = function() { return handleError(function (arg0) {\n        const ret = new Blob(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_get_765201544a2b6869 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_ArrayBuffer_e5e48f4762c5610b = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof ArrayBuffer;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_new_8c3f0052272a457a = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_keys_0702294afaeb6044 = function(arg0) {\n        const ret = Object.keys(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_6e3bbe7c8bd4dbd8 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_57245cc7d7c7619d = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_new0_a57059d72c5b7aee = function() {\n        const ret = new Date();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getTime_cb82adb2556ed13e = function(arg0) {\n        const ret = getObject(arg0).getTime();\n        return ret;\n    };\n    imports.wbg.__wbindgen_jsval_loose_eq = function(arg0, arg1) {\n        const ret = getObject(arg0) == getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_boolean_get = function(arg0) {\n        const v = getObject(arg0);\n        const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_bigint = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'bigint';\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'number' ? obj : undefined;\n        getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;\n        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n    };\n    imports.wbg.__wbg_isSafeInteger_dfa0593e8d7ac35a = function(arg0) {\n        const ret = Number.isSafeInteger(getObject(arg0));\n        return ret;\n    };\n    imports.wbg.__wbindgen_bigint_get_as_i64 = function(arg0, arg1) {\n        const v = getObject(arg1);\n        const ret = typeof(v) === 'bigint' ? v : undefined;\n        getBigInt64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0n : ret;\n        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n    };\n    imports.wbg.__wbindgen_bigint_from_i64 = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_jsval_eq = function(arg0, arg1) {\n        const ret = getObject(arg0) === getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_error_new = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_isArray_27c46c67f498e15d = function(arg0) {\n        const ret = Array.isArray(getObject(arg0));\n        return ret;\n    };\n    imports.wbg.__wbg_iterator_6f9d4f28845f426c = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_in = function(arg0, arg1) {\n        const ret = getObject(arg0) in getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbg_entries_65a76a413fc91037 = function(arg0) {\n        const ret = Object.entries(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_null = function(arg0) {\n        const ret = getObject(arg0) === null;\n        return ret;\n    };\n    imports.wbg.__wbg_String_91fba7ded13ba54c = function(arg0, arg1) {\n        const ret = String(getObject(arg1));\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_0b9bfdd97583284e = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_String_33099856e8a8246a = function(arg0, arg1) {\n        const ret = String(getObject(arg1));\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_coreresponsehandler_a52879454c60c764 = function(arg0, arg1, arg2, arg3) {\n        core_response_handler(arg0 >>> 0, takeObject(arg1), arg2 >>> 0, arg3 !== 0);\n    };\n    imports.wbg.__wbg_message_fe2af63ccc8985bc = function(arg0) {\n        const ret = getObject(arg0).message;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_1d9a920c6bfc44a8 = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_268f7b7dd3430798 = function() {\n        const ret = new Map();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_933729cf5b66ac11 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_set_fbc33d020f507b72 = function(arg0, arg1, arg2) {\n        getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_process_0cc2ada8524d6f83 = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_c11acceab27a6c87 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_7ff1ce49caf23815 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_static_accessor_NODE_MODULE_cf6401cc1091279e = function() {\n        const ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_a746e79b322b9336 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_crypto_2036bed7c44c25e7 = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_a21fc88caf1ecdc8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_f5933855e4f48a19 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_transaction_cce96cbebd81fe1c = function() { return handleError(function (arg0, arg1, arg2, arg3) {\n        const ret = getObject(arg0).transaction(getStringFromWasm0(arg1, arg2), takeObject(arg3));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setoncomplete_3e57a8cec8327f66 = function(arg0, arg1) {\n        getObject(arg0).oncomplete = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonerror_00051c0213f27b2c = function(arg0, arg1) {\n        getObject(arg0).onerror = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonabort_404bee3b9940d03d = function(arg0, arg1) {\n        getObject(arg0).onabort = getObject(arg1);\n    };\n    imports.wbg.__wbg_item_52a6bec36314687b = function(arg0, arg1, arg2) {\n        const ret = getObject(arg1).item(arg2 >>> 0);\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_objectStore_f17976b0e6377830 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).objectStore(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_target_bf704b7db7ad1387 = function(arg0) {\n        const ret = getObject(arg0).target;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_readyState_fb287f170113917c = function(arg0) {\n        const ret = getObject(arg0).readyState;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_setonsuccess_5f71593bc51653a3 = function(arg0, arg1) {\n        getObject(arg0).onsuccess = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonerror_d5771cc5bf9ea74c = function(arg0, arg1) {\n        getObject(arg0).onerror = getObject(arg1);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_next_aaef7c8aa5e212ac = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_1b73b0672e15f234 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_1ccc36bc03462d71 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_97ae9d8645dc388b = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_next_579e583d33566a86 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_6d479506f72c6a71 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_f2557cc78490aceb = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_7f206bda628d5286 = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_ba75c50d1cf384f4 = function() { return handleError(function () {\n        const ret = global.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newnoargs_b5b063fc6c2f0376 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_83db9690f9353e79 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_9e1ae1900cb0fbd5 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_set_bf3f89b92d5a34bf = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_self_7eede1f4488bf346 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_crypto_c909fb428dcbddb6 = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_511eefefbfc70ae4 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_static_accessor_MODULE_ef3aa2eb251158a5 = function() {\n        const ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_900d5c3984fe7703 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_307049345d0bd88c = function(arg0) {\n        const ret = getObject(arg0).getRandomValues;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_85b3f4c52c56c313 = function(arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    };\n    imports.wbg.__wbg_subarray_58ad4efbb5bcb886 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_cd175915511f705e = function(arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    };\n    imports.wbg.__wbg_randomFillSync_065afffde01daa66 = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_getRandomValues_b99eec4244a475bb = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Uint8Array_971eeda69eb75003 = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Uint8Array;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_put_84e7fc93eee27b28 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).put(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_delete_8abedd1043b4105d = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).delete(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setTimeout_d6fcf0d9067b8e64 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).setTimeout(getObject(arg1), arg2);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_clearTimeout_7d6f7bfeed34b348 = function(arg0, arg1) {\n        getObject(arg0).clearTimeout(arg1);\n    };\n    imports.wbg.__wbg_newwithstrandinit_05d7180788420c40 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_headers_85824e993aa739bf = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_992c1d31586b2957 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).set(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_fetch_0fe04905cccfc2aa = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Response_eaa426220848a39e = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_c4ef3dd591e63435 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_74285ddf2747cb3d = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_setonversionchange_840d65cd0888dfb0 = function(arg0, arg1) {\n        getObject(arg0).onversionchange = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonupgradeneeded_17d0b9530f1e0cac = function(arg0, arg1) {\n        getObject(arg0).onupgradeneeded = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonblocked_e66d6be5c879980d = function(arg0, arg1) {\n        getObject(arg0).onblocked = getObject(arg1);\n    };\n    imports.wbg.__wbg_message_a7af3ee0cc0fe28d = function(arg0, arg1) {\n        const ret = getObject(arg1).message;\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_Window_5684341ff6dfe3ad = function(arg0) {\n        const ret = getObject(arg0).Window;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_WorkerGlobalScope_e0447ffcae8bb272 = function(arg0) {\n        const ret = getObject(arg0).WorkerGlobalScope;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_indexedDB_050f0962ab607ac5 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).indexedDB;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_indexedDB_8d9e9ab4616df7f0 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).indexedDB;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_open_a31c3fe1fdc244eb = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).open(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newwithstr_d5b5f9b985ee84fb = function() { return handleError(function (arg0, arg1, arg2, arg3) {\n        const ret = new WebSocket(getStringFromWasm0(arg0, arg1), getStringFromWasm0(arg2, arg3));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_d29e507f6606de91 = function() { return handleError(function (arg0, arg1) {\n        const ret = new WebSocket(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_c5a806b62a0c5607 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonopen_9ce48dce57e549b5 = function(arg0, arg1) {\n        getObject(arg0).onopen = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonerror_02393260b3e29972 = function(arg0, arg1) {\n        getObject(arg0).onerror = getObject(arg1);\n    };\n    imports.wbg.__wbg_send_80b256d87a6779e5 = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).send(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_data_7b1f01f4e6a64fbe = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stringify_d6471d300ded9b68 = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_objectStoreNames_8c06c40d2b05141c = function(arg0) {\n        const ret = getObject(arg0).objectStoreNames;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_createObjectStore_d3e2789c13dde1fc = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).createObjectStore(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Error_56b496a10a56de66 = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Error;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_getTimezoneOffset_89bd4275e1ca8341 = function(arg0) {\n        const ret = getObject(arg0).getTimezoneOffset();\n        return ret;\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_then_cedad20fbbd9418a = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_99fe17964f31ffc0 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_11f7a54d67b4bfad = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_result_9e399c14676970d9 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).result;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_error_aacf5ac191e54ed0 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).error;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_get_6285bf458a1ee758 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).get(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Window_acc97ff9f5d2c7b4 = function(arg0) {\n        let result;\n        try {\n            result = true;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_close_45d053bea59e7746 = function() { return handleError(function (arg0) {\n        getObject(arg0).close();\n    }, arguments) };\n    imports.wbg.__wbg_text_1169d752cc697903 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).text();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper947 = function(arg0, arg1, arg2) {\n        const ret = makeClosure(arg0, arg1, 44, __wbg_adapter_50);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper958 = function(arg0, arg1, arg2) {\n        const ret = makeClosure(arg0, arg1, 47, __wbg_adapter_53);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6159 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 238, __wbg_adapter_56);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6824 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 247, __wbg_adapter_59);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6874 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 244, __wbg_adapter_62);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6875 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 1206, __wbg_adapter_65);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6876 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 241, __wbg_adapter_68);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = new BigInt64Array();\n    cachedFloat64Memory0 = new Float64Array();\n    cachedInt32Memory0 = new Int32Array();\n    cachedUint8Memory0 = new Uint8Array();\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\n\n//****************************************************************** WRAPPER END\n\nfunction replaceUndefinedWithNulls(value) {\n    if (value === undefined) {\n        return null;\n    }\n    if (value instanceof Blob) {\n        return value;\n    }\n    if (typeof value === \"object\" && value !== null) {\n        const result = Array.isArray(value) ? [] : {};\n        for (const key in value) {\n            result[key] = replaceUndefinedWithNulls(value[key]);\n        }\n        return result;\n    }\n    return value;\n};\n\nfunction core_response_handler(request_id, params, response_type, finished) {\n    postMessage({\n        type: 'response',\n        requestId: request_id,\n        params: replaceUndefinedWithNulls(params),\n        responseType: response_type,\n        finished,\n    });\n}\n\nasync function replaceBlobsWithArrayBuffers(value) {\n    if (value instanceof Blob) {\n        return await value.arrayBuffer();\n    }\n    if (typeof value === \"bigint\") {\n        if (value < Number.MAX_SAFE_INTEGER && value > Number.MIN_SAFE_INTEGER) {\n            return Number(value);\n        } else {\n            return value.toString();\n        }\n    }\n    if (typeof value === \"object\" && value !== null) {\n        const result = Array.isArray(value) ? [] : {};\n        for (const key in value) {\n            result[key] = await replaceBlobsWithArrayBuffers(value[key]);\n        }\n        return result;\n    }\n    return value;\n}\n\nself.onmessage = (e) => {\n    const message = e.data;\n    switch (message.type) {\n    case 'init':\n        (async () => {\n            await init(message.wasmModule);\n            postMessage({ type: 'init' });\n        })();\n        break;\n\n    case 'createContext':\n        postMessage({\n            type: 'createContext',\n            result: core_create_context(message.configJson),\n            requestId: message.requestId,\n        });\n        break;\n\n    case 'destroyContext':\n        core_destroy_context(message.context);\n        postMessage({\n            type: 'destroyContext'\n        });\n        break;\n\n    case 'request':\n        (async () => {\n            core_request(\n                message.context,\n                message.functionName,\n                await replaceBlobsWithArrayBuffers(message.functionParams),\n                message.requestId,\n            );\n        })();\n        break;\n    }\n};\n`;\n\nlet options = null;\n\nfunction libWebSetup(libOptions) {\n    options = libOptions;\n}\n\nfunction debugLog(message) {\n    if (options && options.debugLog) {\n        options.debugLog(message);\n    }\n}\n\n\nasync function loadModule() {\n    const startLoadTime = Date.now();\n    let wasmModule;\n    if (options && options.loadModule) {\n        wasmModule = await options.loadModule;\n    } else {\n        const fetched = fetch((options && options.binaryURL) || \"/eversdk.wasm\");\n        if (WebAssembly.compileStreaming) {\n            debugLog(\"compileStreaming binary\");\n            return await WebAssembly.compileStreaming(fetched);\n        }\n        debugLog(\"compile binary\");\n        wasmModule = await WebAssembly.compile(await (await fetched).arrayBuffer());\n    }\n    await init(wasmModule);\n    debugLog(`compile time ${Date.now() - startLoadTime}`);\n}\n\nfunction withSeparateWorker() {\n    function debugLog(message) {\n        if (options && options.debugLog) {\n            options.debugLog(message);\n        }\n    }\n\n    const workerBlob = new Blob(\n        [workerScript],\n        { type: \"application/javascript\" },\n    );\n    const workerUrl = URL.createObjectURL(workerBlob);\n    const worker = new Worker(workerUrl);\n\n\n    let nextCreateContextRequestId = 1;\n    const createContextRequests = new Map();\n    let initComplete = false;\n\n    let responseHandler = null;\n\n    worker.onmessage = (evt) => {\n        const message = evt.data;\n        switch (message.type) {\n        case \"init\":\n            initComplete = true;\n            for (const [requestId, request] of createContextRequests.entries()) {\n                worker.postMessage({\n                    type: \"createContext\",\n                    requestId,\n                    configJson: request.configJson,\n                });\n            }\n            break;\n        case \"createContext\":\n            const request = createContextRequests.get(message.requestId);\n            if (request) {\n                createContextRequests.delete(message.requestId);\n                request.resolve(message.result);\n            }\n            break;\n        case \"destroyContext\":\n            break;\n        case \"response\":\n            if (responseHandler) {\n                responseHandler(\n                    message.requestId,\n                    message.params,\n                    message.responseType,\n                    message.finished,\n                );\n            }\n            break;\n        }\n    };\n\n    worker.onerror = (evt) => {\n        console.log(`Error from Web Worker: ${evt.message}`);\n    };\n\n    (async () => {\n        worker.postMessage({\n            type: \"init\",\n            wasmModule: await loadModule(),\n        });\n    })();\n\n    return Promise.resolve({\n        setResponseParamsHandler: (handler) => {\n            responseHandler = handler;\n        },\n        createContext: (configJson) => {\n            return new Promise((resolve) => {\n                const requestId = nextCreateContextRequestId;\n                nextCreateContextRequestId += 1;\n                createContextRequests.set(requestId, {\n                    configJson,\n                    resolve,\n                });\n                if (initComplete) {\n                    worker.postMessage({\n                        type: \"createContext\",\n                        requestId,\n                        configJson,\n                    });\n                }\n            });\n        },\n        destroyContext: (context) => {\n            worker.postMessage({\n                type: \"destroyContext\",\n                context,\n            });\n        },\n        sendRequestParams: (context, requestId, functionName, functionParams) => {\n            worker.postMessage({\n                type: \"request\",\n                context,\n                requestId,\n                functionName,\n                functionParams,\n            });\n        },\n    });\n}\n\nfunction withoutSeparateWorker() {\n//****************************************************************** WRAPPER BEGIN\n\nlet wasm;\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet cachedFloat64Memory0 = new Float64Array();\n\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\n\nlet cachedBigInt64Memory0 = new BigInt64Array();\n\nfunction getBigInt64Memory0() {\n    if (cachedBigInt64Memory0.byteLength === 0) {\n        cachedBigInt64Memory0 = new BigInt64Array(wasm.memory.buffer);\n    }\n    return cachedBigInt64Memory0;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        try {\n            return f(state.a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(state.a, state.b);\n                state.a = 0;\n\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_50(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__Fn__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__he8db5fa167706a09(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction __wbg_adapter_53(arg0, arg1) {\n    wasm._dyn_core__ops__function__Fn_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hed540c88454df031(arg0, arg1);\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_56(arg0, arg1) {\n    wasm._dyn_core__ops__function__FnMut_____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hc182e4d50354196b(arg0, arg1);\n}\n\nfunction __wbg_adapter_59(arg0, arg1, arg2) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h7cbc3c322963706f(retptr, arg0, arg1, addHeapObject(arg2));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction __wbg_adapter_62(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h3709808ff1741914(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction __wbg_adapter_65(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h6c6161aacd664479(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction __wbg_adapter_68(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__h68aa97d113ee360c(arg0, arg1, addHeapObject(arg2));\n}\n\n/**\n* @param {string} config_json\n* @returns {string}\n*/\nfunction core_create_context(config_json) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(config_json, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.core_create_context(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        return getStringFromWasm0(r0, r1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(r0, r1);\n    }\n}\n\n/**\n* @param {number} context\n*/\nfunction core_destroy_context(context) {\n    wasm.core_destroy_context(context);\n}\n\n/**\n* @param {number} context\n* @param {string} function_name\n* @param {any} params\n* @param {number} request_id\n*/\nfunction core_request(context, function_name, params, request_id) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(function_name, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.core_request(retptr, context, ptr0, len0, addHeapObject(params), request_id);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        if (r1) {\n            throw takeObject(r0);\n        }\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbg_new_8d2af00bc1e329ee = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_3f3d764d4747d564 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithbyteoffsetandlength_d9aa266703cb98be = function(arg0, arg1, arg2) {\n        const ret = new Uint8Array(getObject(arg0), arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbg_newwithlength_7c42f7e738a9d5d3 = function(arg0) {\n        const ret = new Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_a68214f35c417fa9 = function(arg0, arg1, arg2) {\n        getObject(arg0)[arg1 >>> 0] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_newwithu8arraysequence_f863246af83e1785 = function() { return handleError(function (arg0) {\n        const ret = new Blob(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_get_765201544a2b6869 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_ArrayBuffer_e5e48f4762c5610b = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof ArrayBuffer;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbg_new_8c3f0052272a457a = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_keys_0702294afaeb6044 = function(arg0) {\n        const ret = Object.keys(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_6e3bbe7c8bd4dbd8 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_get_57245cc7d7c7619d = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_new0_a57059d72c5b7aee = function() {\n        const ret = new Date();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getTime_cb82adb2556ed13e = function(arg0) {\n        const ret = getObject(arg0).getTime();\n        return ret;\n    };\n    imports.wbg.__wbindgen_jsval_loose_eq = function(arg0, arg1) {\n        const ret = getObject(arg0) == getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_boolean_get = function(arg0) {\n        const v = getObject(arg0);\n        const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_bigint = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'bigint';\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'number' ? obj : undefined;\n        getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;\n        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n    };\n    imports.wbg.__wbg_isSafeInteger_dfa0593e8d7ac35a = function(arg0) {\n        const ret = Number.isSafeInteger(getObject(arg0));\n        return ret;\n    };\n    imports.wbg.__wbindgen_bigint_get_as_i64 = function(arg0, arg1) {\n        const v = getObject(arg1);\n        const ret = typeof(v) === 'bigint' ? v : undefined;\n        getBigInt64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0n : ret;\n        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n    };\n    imports.wbg.__wbindgen_bigint_from_i64 = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_jsval_eq = function(arg0, arg1) {\n        const ret = getObject(arg0) === getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbindgen_bigint_from_u64 = function(arg0) {\n        const ret = BigInt.asUintN(64, arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_error_new = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_isArray_27c46c67f498e15d = function(arg0) {\n        const ret = Array.isArray(getObject(arg0));\n        return ret;\n    };\n    imports.wbg.__wbg_iterator_6f9d4f28845f426c = function() {\n        const ret = Symbol.iterator;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_in = function(arg0, arg1) {\n        const ret = getObject(arg0) in getObject(arg1);\n        return ret;\n    };\n    imports.wbg.__wbg_entries_65a76a413fc91037 = function(arg0) {\n        const ret = Object.entries(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_null = function(arg0) {\n        const ret = getObject(arg0) === null;\n        return ret;\n    };\n    imports.wbg.__wbg_String_91fba7ded13ba54c = function(arg0, arg1) {\n        const ret = String(getObject(arg1));\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_0b9bfdd97583284e = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_String_33099856e8a8246a = function(arg0, arg1) {\n        const ret = String(getObject(arg1));\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_coreresponsehandler_a52879454c60c764 = function(arg0, arg1, arg2, arg3) {\n        core_response_handler(arg0 >>> 0, takeObject(arg1), arg2 >>> 0, arg3 !== 0);\n    };\n    imports.wbg.__wbg_message_fe2af63ccc8985bc = function(arg0) {\n        const ret = getObject(arg0).message;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_1d9a920c6bfc44a8 = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_268f7b7dd3430798 = function() {\n        const ret = new Map();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_933729cf5b66ac11 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).set(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbg_set_fbc33d020f507b72 = function(arg0, arg1, arg2) {\n        getObject(arg0)[takeObject(arg1)] = takeObject(arg2);\n    };\n    imports.wbg.__wbg_process_0cc2ada8524d6f83 = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_c11acceab27a6c87 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_7ff1ce49caf23815 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_static_accessor_NODE_MODULE_cf6401cc1091279e = function() {\n        const ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_a746e79b322b9336 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_crypto_2036bed7c44c25e7 = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_a21fc88caf1ecdc8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_f5933855e4f48a19 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_transaction_cce96cbebd81fe1c = function() { return handleError(function (arg0, arg1, arg2, arg3) {\n        const ret = getObject(arg0).transaction(getStringFromWasm0(arg1, arg2), takeObject(arg3));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setoncomplete_3e57a8cec8327f66 = function(arg0, arg1) {\n        getObject(arg0).oncomplete = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonerror_00051c0213f27b2c = function(arg0, arg1) {\n        getObject(arg0).onerror = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonabort_404bee3b9940d03d = function(arg0, arg1) {\n        getObject(arg0).onabort = getObject(arg1);\n    };\n    imports.wbg.__wbg_item_52a6bec36314687b = function(arg0, arg1, arg2) {\n        const ret = getObject(arg1).item(arg2 >>> 0);\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_objectStore_f17976b0e6377830 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).objectStore(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_target_bf704b7db7ad1387 = function(arg0) {\n        const ret = getObject(arg0).target;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    };\n    imports.wbg.__wbg_readyState_fb287f170113917c = function(arg0) {\n        const ret = getObject(arg0).readyState;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_setonsuccess_5f71593bc51653a3 = function(arg0, arg1) {\n        getObject(arg0).onsuccess = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonerror_d5771cc5bf9ea74c = function(arg0, arg1) {\n        getObject(arg0).onerror = getObject(arg1);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_next_aaef7c8aa5e212ac = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).next();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_done_1b73b0672e15f234 = function(arg0) {\n        const ret = getObject(arg0).done;\n        return ret;\n    };\n    imports.wbg.__wbg_value_1ccc36bc03462d71 = function(arg0) {\n        const ret = getObject(arg0).value;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_is_function = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'function';\n        return ret;\n    };\n    imports.wbg.__wbg_call_97ae9d8645dc388b = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_next_579e583d33566a86 = function(arg0) {\n        const ret = getObject(arg0).next;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_self_6d479506f72c6a71 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_f2557cc78490aceb = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_7f206bda628d5286 = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_ba75c50d1cf384f4 = function() { return handleError(function () {\n        const ret = __webpack_require__.g.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newnoargs_b5b063fc6c2f0376 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_83db9690f9353e79 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbg_length_9e1ae1900cb0fbd5 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbg_set_bf3f89b92d5a34bf = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_self_7eede1f4488bf346 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_crypto_c909fb428dcbddb6 = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_511eefefbfc70ae4 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_static_accessor_MODULE_ef3aa2eb251158a5 = function() {\n        const ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_900d5c3984fe7703 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_307049345d0bd88c = function(arg0) {\n        const ret = getObject(arg0).getRandomValues;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_randomFillSync_85b3f4c52c56c313 = function(arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    };\n    imports.wbg.__wbg_subarray_58ad4efbb5bcb886 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_cd175915511f705e = function(arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    };\n    imports.wbg.__wbg_randomFillSync_065afffde01daa66 = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_getRandomValues_b99eec4244a475bb = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Uint8Array_971eeda69eb75003 = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Uint8Array;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_put_84e7fc93eee27b28 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).put(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_delete_8abedd1043b4105d = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).delete(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setTimeout_d6fcf0d9067b8e64 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).setTimeout(getObject(arg1), arg2);\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_clearTimeout_7d6f7bfeed34b348 = function(arg0, arg1) {\n        getObject(arg0).clearTimeout(arg1);\n    };\n    imports.wbg.__wbg_newwithstrandinit_05d7180788420c40 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = new Request(getStringFromWasm0(arg0, arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_headers_85824e993aa739bf = function(arg0) {\n        const ret = getObject(arg0).headers;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_992c1d31586b2957 = function() { return handleError(function (arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).set(getStringFromWasm0(arg1, arg2), getStringFromWasm0(arg3, arg4));\n    }, arguments) };\n    imports.wbg.__wbg_fetch_0fe04905cccfc2aa = function(arg0, arg1) {\n        const ret = getObject(arg0).fetch(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_instanceof_Response_eaa426220848a39e = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Response;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_status_c4ef3dd591e63435 = function(arg0) {\n        const ret = getObject(arg0).status;\n        return ret;\n    };\n    imports.wbg.__wbg_url_74285ddf2747cb3d = function(arg0, arg1) {\n        const ret = getObject(arg1).url;\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_setonversionchange_840d65cd0888dfb0 = function(arg0, arg1) {\n        getObject(arg0).onversionchange = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonupgradeneeded_17d0b9530f1e0cac = function(arg0, arg1) {\n        getObject(arg0).onupgradeneeded = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonblocked_e66d6be5c879980d = function(arg0, arg1) {\n        getObject(arg0).onblocked = getObject(arg1);\n    };\n    imports.wbg.__wbg_message_a7af3ee0cc0fe28d = function(arg0, arg1) {\n        const ret = getObject(arg1).message;\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbg_Window_5684341ff6dfe3ad = function(arg0) {\n        const ret = getObject(arg0).Window;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_WorkerGlobalScope_e0447ffcae8bb272 = function(arg0) {\n        const ret = getObject(arg0).WorkerGlobalScope;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_indexedDB_050f0962ab607ac5 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).indexedDB;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_indexedDB_8d9e9ab4616df7f0 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).indexedDB;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_open_a31c3fe1fdc244eb = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).open(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newwithstr_d5b5f9b985ee84fb = function() { return handleError(function (arg0, arg1, arg2, arg3) {\n        const ret = new WebSocket(getStringFromWasm0(arg0, arg1), getStringFromWasm0(arg2, arg3));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_new_d29e507f6606de91 = function() { return handleError(function (arg0, arg1) {\n        const ret = new WebSocket(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_setonmessage_c5a806b62a0c5607 = function(arg0, arg1) {\n        getObject(arg0).onmessage = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonopen_9ce48dce57e549b5 = function(arg0, arg1) {\n        getObject(arg0).onopen = getObject(arg1);\n    };\n    imports.wbg.__wbg_setonerror_02393260b3e29972 = function(arg0, arg1) {\n        getObject(arg0).onerror = getObject(arg1);\n    };\n    imports.wbg.__wbg_send_80b256d87a6779e5 = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).send(getStringFromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_data_7b1f01f4e6a64fbe = function(arg0) {\n        const ret = getObject(arg0).data;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_stringify_d6471d300ded9b68 = function() { return handleError(function (arg0) {\n        const ret = JSON.stringify(getObject(arg0));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_objectStoreNames_8c06c40d2b05141c = function(arg0) {\n        const ret = getObject(arg0).objectStoreNames;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_createObjectStore_d3e2789c13dde1fc = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).createObjectStore(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Error_56b496a10a56de66 = function(arg0) {\n        let result;\n        try {\n            result = getObject(arg0) instanceof Error;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_getTimezoneOffset_89bd4275e1ca8341 = function(arg0) {\n        const ret = getObject(arg0).getTimezoneOffset();\n        return ret;\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_then_cedad20fbbd9418a = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).then(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_resolve_99fe17964f31ffc0 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_then_11f7a54d67b4bfad = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_result_9e399c14676970d9 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).result;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_error_aacf5ac191e54ed0 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).error;\n        return isLikeNone(ret) ? 0 : addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_get_6285bf458a1ee758 = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).get(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_instanceof_Window_acc97ff9f5d2c7b4 = function(arg0) {\n        let result;\n        try {\n            result = true;\n        } catch {\n            result = false;\n        }\n        const ret = result;\n        return ret;\n    };\n    imports.wbg.__wbg_close_45d053bea59e7746 = function() { return handleError(function (arg0) {\n        getObject(arg0).close();\n    }, arguments) };\n    imports.wbg.__wbg_text_1169d752cc697903 = function() { return handleError(function (arg0) {\n        const ret = getObject(arg0).text();\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbindgen_closure_wrapper947 = function(arg0, arg1, arg2) {\n        const ret = makeClosure(arg0, arg1, 44, __wbg_adapter_50);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper958 = function(arg0, arg1, arg2) {\n        const ret = makeClosure(arg0, arg1, 47, __wbg_adapter_53);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6159 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 238, __wbg_adapter_56);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6824 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 247, __wbg_adapter_59);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6874 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 244, __wbg_adapter_62);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6875 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 1206, __wbg_adapter_65);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6876 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 241, __wbg_adapter_68);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedBigInt64Memory0 = new BigInt64Array();\n    cachedFloat64Memory0 = new Float64Array();\n    cachedInt32Memory0 = new Int32Array();\n    cachedUint8Memory0 = new Uint8Array();\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\n\n//****************************************************************** WRAPPER END\n    function replaceUndefinedWithNulls(value) {\n        if (value === undefined) {\n            return null;\n        }\n        if (value instanceof Blob) {\n            return value;\n        }\n        if (typeof value === \"object\" && value !== null) {\n            const result = Array.isArray(value) ? [] : {};\n            for (const key in value) {\n                result[key] = replaceUndefinedWithNulls(value[key]);\n            }\n            return result;\n        }\n        return value;\n    }\n\n    async function replaceBlobsWithArrayBuffers(value) {\n        if (value instanceof Blob) {\n            return await value.arrayBuffer();\n        }\n        if (typeof value === \"bigint\") {\n            if (value < Number.MAX_SAFE_INTEGER && value > Number.MIN_SAFE_INTEGER) {\n                return Number(value);\n            } else {\n                return value.toString();\n            }\n        }\n        if (typeof value === \"object\" && value !== null) {\n            const result = Array.isArray(value) ? [] : {};\n            for (const key in value) {\n                result[key] = await replaceBlobsWithArrayBuffers(value[key]);\n            }\n            return result;\n        }\n        return value;\n    }\n\n\n    let deferredCreateContext = [];\n    let responseHandler = null;\n\n    function core_response_handler(request_id, params, response_type, finished) {\n        if (responseHandler) {\n            responseHandler(\n                request_id,\n                params,\n                response_type,\n                finished,\n            );\n        }\n    }\n\n    (async () => {\n        await init(await loadModule());\n        for (const createContext of deferredCreateContext) {\n            createContext.resolve(core_create_context(createContext.configJson));\n        }\n        deferredCreateContext = null;\n    })();\n\n    return Promise.resolve({\n        setResponseParamsHandler: (handler) => {\n            responseHandler = handler;\n        },\n        createContext: (configJson) => {\n            return deferredCreateContext === null\n                ? Promise.resolve(core_create_context(configJson))\n                : new Promise((resolve) => {\n                    deferredCreateContext.push({\n                        configJson,\n                        resolve,\n                    });\n                });\n        },\n        destroyContext: (context) => {\n            core_destroy_context(context);\n        },\n        sendRequestParams: (context, requestId, functionName, functionParams) => {\n            (async () => {\n                core_request(\n                    context,\n                    functionName,\n                    await replaceBlobsWithArrayBuffers(functionParams),\n                    requestId,\n                );\n            })();\n        },\n    });\n\n}\n\nfunction libWeb() {\n    return options && options.disableSeparateWorker ? withoutSeparateWorker() : withSeparateWorker();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@eversdk/lib-web/index.js\n");

/***/ }),

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _styles_main_scss__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./styles/main.scss */ \"./src/styles/main.scss\");\n/* harmony import */ var _scripts_display_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./scripts/display.js */ \"./src/scripts/display.js\");\n/* harmony import */ var _scripts_controls_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./scripts/controls.js */ \"./src/scripts/controls.js\");\n/* harmony import */ var _scripts_ever_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./scripts/ever.js */ \"./src/scripts/ever.js\");\n //Import CSS\n\n //Import JS\n\n\n\n //https://github.com/flauwekeul/honeycomb\n//console.clear();\n\n_scripts_display_js__WEBPACK_IMPORTED_MODULE_1__.initiateMap(_scripts_ever_js__WEBPACK_IMPORTED_MODULE_3__);\n_scripts_controls_js__WEBPACK_IMPORTED_MODULE_2__.initiateControls();\n\nif (false) {}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvaW5kZXguanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZXgtYmF0dGxlLWdhbWUvLi9zcmMvaW5kZXguanM/OTViNSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjsgLy9JbXBvcnQgQ1NTXG5cbmltcG9ydCAnLi9zdHlsZXMvbWFpbi5zY3NzJzsgLy9JbXBvcnQgSlNcblxuaW1wb3J0ICogYXMgRElTUExBWSBmcm9tICcuL3NjcmlwdHMvZGlzcGxheS5qcyc7XG5pbXBvcnQgKiBhcyBDT05UUk9MUyBmcm9tICcuL3NjcmlwdHMvY29udHJvbHMuanMnO1xuaW1wb3J0ICogYXMgUFJPVklERVIgZnJvbSAnLi9zY3JpcHRzL2V2ZXIuanMnOyAvL2h0dHBzOi8vZ2l0aHViLmNvbS9mbGF1d2VrZXVsL2hvbmV5Y29tYlxuLy9jb25zb2xlLmNsZWFyKCk7XG5cbkRJU1BMQVkuaW5pdGlhdGVNYXAoUFJPVklERVIpO1xuQ09OVFJPTFMuaW5pdGlhdGVDb250cm9scygpO1xuXG5pZiAobW9kdWxlLmhvdCkge1xuICBtb2R1bGUuaG90LmFjY2VwdCgpO1xufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/index.js\n");

/***/ }),

/***/ "./src/scripts/controls.js":
/*!*********************************!*\
  !*** ./src/scripts/controls.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"initiateControls\": () => (/* binding */ initiateControls)\n/* harmony export */ });\n/* harmony import */ var _scripts_display_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../scripts/display.js */ \"./src/scripts/display.js\");\n//Imports\n //Public variables\n//-\n//Private variables\n//-\n//Public functions\n\nfunction initiateControls() {\n  //Camera position controls\n  let timer = null;\n  document.addEventListener('mouseup', () => {\n    clearInterval(timer);\n  });\n  document.addEventListener('keyup', () => {\n    clearInterval(timer);\n  }); //Keyboard controls\n\n  document.addEventListener('keydown', e => {\n    console.log('e.code', e.code);\n\n    switch (e.code) {\n      case \"ArrowUp\":\n      case \"KeyW\":\n        clearInterval(timer);\n        timer = setInterval(() => {\n          _scripts_display_js__WEBPACK_IMPORTED_MODULE_0__.camera.y -= 5;\n        }, 10);\n        break;\n\n      case \"ArrowLeft\":\n      case \"KeyA\":\n        clearInterval(timer);\n        timer = setInterval(() => {\n          _scripts_display_js__WEBPACK_IMPORTED_MODULE_0__.camera.x -= 5;\n        }, 10);\n        break;\n\n      case \"ArrowRight\":\n      case \"KeyD\":\n        clearInterval(timer);\n        timer = setInterval(() => {\n          _scripts_display_js__WEBPACK_IMPORTED_MODULE_0__.camera.x += 5;\n        }, 10);\n        break;\n\n      case \"ArrowDown\":\n      case \"KeyS\":\n        clearInterval(timer);\n        timer = setInterval(() => {\n          _scripts_display_js__WEBPACK_IMPORTED_MODULE_0__.camera.y += 5;\n        }, 10);\n        break;\n    }\n  });\n} //Private functions//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc2NyaXB0cy9jb250cm9scy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2hleC1iYXR0bGUtZ2FtZS8uL3NyYy9zY3JpcHRzL2NvbnRyb2xzLmpzPzA3MTQiXSwic291cmNlc0NvbnRlbnQiOlsiLy9JbXBvcnRzXG5pbXBvcnQgKiBhcyBESVNQTEFZIGZyb20gJy4uL3NjcmlwdHMvZGlzcGxheS5qcyc7IC8vUHVibGljIHZhcmlhYmxlc1xuLy8tXG4vL1ByaXZhdGUgdmFyaWFibGVzXG4vLy1cbi8vUHVibGljIGZ1bmN0aW9uc1xuXG5leHBvcnQgZnVuY3Rpb24gaW5pdGlhdGVDb250cm9scygpIHtcbiAgLy9DYW1lcmEgcG9zaXRpb24gY29udHJvbHNcbiAgbGV0IHRpbWVyID0gbnVsbDtcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsICgpID0+IHtcbiAgICBjbGVhckludGVydmFsKHRpbWVyKTtcbiAgfSk7XG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgKCkgPT4ge1xuICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICB9KTsgLy9LZXlib2FyZCBjb250cm9sc1xuXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBlID0+IHtcbiAgICBjb25zb2xlLmxvZygnZS5jb2RlJywgZS5jb2RlKTtcblxuICAgIHN3aXRjaCAoZS5jb2RlKSB7XG4gICAgICBjYXNlIFwiQXJyb3dVcFwiOlxuICAgICAgY2FzZSBcIktleVdcIjpcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIERJU1BMQVkuY2FtZXJhLnkgLT0gNTtcbiAgICAgICAgfSwgMTApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIkFycm93TGVmdFwiOlxuICAgICAgY2FzZSBcIktleUFcIjpcbiAgICAgICAgY2xlYXJJbnRlcnZhbCh0aW1lcik7XG4gICAgICAgIHRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgICAgIERJU1BMQVkuY2FtZXJhLnggLT0gNTtcbiAgICAgICAgfSwgMTApO1xuICAgICAgICBicmVhaztcblxuICAgICAgY2FzZSBcIkFycm93UmlnaHRcIjpcbiAgICAgIGNhc2UgXCJLZXlEXCI6XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICBESVNQTEFZLmNhbWVyYS54ICs9IDU7XG4gICAgICAgIH0sIDEwKTtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgXCJBcnJvd0Rvd25cIjpcbiAgICAgIGNhc2UgXCJLZXlTXCI6XG4gICAgICAgIGNsZWFySW50ZXJ2YWwodGltZXIpO1xuICAgICAgICB0aW1lciA9IHNldEludGVydmFsKCgpID0+IHtcbiAgICAgICAgICBESVNQTEFZLmNhbWVyYS55ICs9IDU7XG4gICAgICAgIH0sIDEwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgfVxuICB9KTtcbn0gLy9Qcml2YXRlIGZ1bmN0aW9ucyJdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/scripts/controls.js\n");

/***/ }),

/***/ "./src/scripts/display.js":
/*!********************************!*\
  !*** ./src/scripts/display.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"camera\": () => (/* binding */ camera),\n/* harmony export */   \"currentMap\": () => (/* binding */ currentMap),\n/* harmony export */   \"getMap\": () => (/* binding */ getMap),\n/* harmony export */   \"initiateMap\": () => (/* binding */ initiateMap),\n/* harmony export */   \"zoomUpdate\": () => (/* binding */ zoomUpdate)\n/* harmony export */ });\n/* harmony import */ var honeycomb_grid__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! honeycomb-grid */ \"./node_modules/honeycomb-grid/dist/honeycomb-grid.mjs\");\n//Imports\n //Public variables\n\nconst camera = {\n  x: 0,\n  y: 0,\n  zoom: 1\n};\nlet currentMap;\nconst Hex = (0,honeycomb_grid__WEBPACK_IMPORTED_MODULE_0__.defineHex)({\n  dimensions: 52,\n  orientation: 'FLAT',\n  origin: {\n    x: -500,\n    y: -400\n  }\n}); //Private variables\n\nconst mainCanvas = document.querySelector(\"#mainCanvas\");\nconst animCanvas = document.querySelector(\"#animationCanvas\");\nconst mainCtx = mainCanvas.getContext(\"2d\");\nconst animCtx = animCanvas.getContext(\"2d\");\nlet scales = 0;\nlet hexSize;\nlet a_full, b_full, c_full, a_hex, b_hex, c_hex;\nlet halfCanvasWidth, halfCanvasHeight;\nlet grid = new honeycomb_grid__WEBPACK_IMPORTED_MODULE_0__.Grid(Hex);\nlet PROVIDER;\nlet isdblclick = false;\n\nasync function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nfunction getMap(radius) {\n  let map = new honeycomb_grid__WEBPACK_IMPORTED_MODULE_0__.Grid(Hex, (0,honeycomb_grid__WEBPACK_IMPORTED_MODULE_0__.spiral)({\n    radius: 1 * radius\n  }));\n  console.log('getMap', map.size); //Basic water layer\n\n  for (let hex of map) {\n    hex.type = \"64, 128, 255\";\n    hex.highlight = false;\n  }\n\n  return map;\n} //Public functions\n\nasync function initiateMap(ever) {\n  currentMap = [];\n  PROVIDER = ever;\n  await PROVIDER.init(radius => {\n    currentMap = getMap(radius);\n    PROVIDER.setMap(currentMap);\n  });\n  mainCanvas.width = window.innerWidth;\n  mainCanvas.height = window.innerHeight;\n  animCanvas.width = window.innerWidth;\n  animCanvas.height = window.innerHeight;\n  calculateHexDimensions();\n  windowResizeUpdate();\n  zoomUpdate();\n  drawMap();\n  camera.x = halfCanvasWidth;\n  camera.y = halfCanvasHeight;\n  recalcEnergy();\n}\n\nfunction recalcEnergy() {\n  for (let hex of currentMap) {\n    if (!hex.details) continue;\n    calculateEnergy(hex);\n  }\n\n  setTimeout(recalcEnergy, 1000);\n}\n\nfunction calculateEnergy(hex) {\n  let dateNow = Math.round(Date.now() / 1000);\n\n  if (1 * hex.details.energy >= 1 * hex.details.energyMax || 1 * hex.details.lastCalcTime >= dateNow) {\n    return;\n  }\n\n  let energy = Math.min(1 * hex.details.energy + hex.details.energySec * hex.details.speed * (dateNow - hex.details.lastCalcTime), 1 * hex.details.energyMax);\n  hex.details.lastCalcTime = dateNow;\n  hex.details.energy = energy;\n}\n\nfunction zoomUpdate() {\n  const hex = grid.pointToHex({\n    x: camera.x,\n    y: camera.y\n  });\n  const x = hex.x;\n  const y = hex.y;\n  hexSize = scales;\n  calculateHexDimensions();\n  let replacementMap = new honeycomb_grid__WEBPACK_IMPORTED_MODULE_0__.Grid(Hex, (0,honeycomb_grid__WEBPACK_IMPORTED_MODULE_0__.spiral)({\n    radius: currentMap.radius\n  }));\n\n  for (let i = 0; i < currentMap.length; i++) {\n    currentMap[i].size = replacementMap[i].size;\n\n    if (currentMap[i].x === x && currentMap[i].y === y) {\n      camera.x = Math.round((0,honeycomb_grid__WEBPACK_IMPORTED_MODULE_0__.hexToPoint)(currentMap[i]).x + b_full + hexSize / 2);\n      camera.y = Math.round((0,honeycomb_grid__WEBPACK_IMPORTED_MODULE_0__.hexToPoint)(currentMap[i]).y + c_full);\n    }\n  }\n} //Private functions\n\nfunction drawMap() {\n  //Clearing\n  mainCtx.setTransform(1, 0, 0, 1, 0, 0);\n  mainCtx.fillStyle = \"black\";\n  mainCtx.fillRect(0, 0, mainCanvas.width, mainCanvas.height); //Positioning the camera\n\n  mainCtx.translate(-camera.x + halfCanvasWidth, -camera.y + halfCanvasHeight);\n\n  for (let hex of currentMap) {\n    //Hex is ignored if it wasn't seen yet\n    //if (hex.visibility === 'unseen') continue\n    // console.log('hex', hex)\n    // console.log('hexToPoint', hexToPoint(hex))\n    let x = (0,honeycomb_grid__WEBPACK_IMPORTED_MODULE_0__.hexToPoint)(hex).x,\n        y = (0,honeycomb_grid__WEBPACK_IMPORTED_MODULE_0__.hexToPoint)(hex).y; //Checking if hex is visible within canvas\n\n    if (Math.abs(x - camera.x) > halfCanvasWidth + hexSize || Math.abs(y - camera.y) > halfCanvasHeight + hexSize) continue; //Drawing highlight around hex\n\n    if (hex.highlight) {\n      mainCtx.strokeStyle = \"white\";\n      mainCtx.beginPath();\n      mainCtx.moveTo(x + a_full, y - c_full);\n      mainCtx.lineTo(x + b_full, y);\n      mainCtx.lineTo(x + a_full, y + c_full);\n      mainCtx.lineTo(x - a_full, y + c_full);\n      mainCtx.lineTo(x - b_full, y);\n      mainCtx.lineTo(x - a_full, y - c_full);\n      mainCtx.closePath();\n      mainCtx.stroke();\n    } //Drawing the hex\n\n\n    let color = hex.details ? `${hex.details.color.r}, ${hex.details.color.g}, ${hex.details.color.b}` : hex.type;\n    mainCtx.fillStyle = `rgba(${color},1)`;\n    mainCtx.beginPath();\n    mainCtx.moveTo(x + a_hex, y - c_hex);\n    mainCtx.lineTo(x + b_hex, y);\n    mainCtx.lineTo(x + a_hex, y + c_hex);\n    mainCtx.lineTo(x - a_hex, y + c_hex);\n    mainCtx.lineTo(x - b_hex, y);\n    mainCtx.lineTo(x - a_hex, y - c_hex);\n    mainCtx.closePath();\n    mainCtx.fill();\n    setText(mainCtx, x, y - hexSize / 2, `${hex.q};${hex.r}`);\n\n    if (hex.details) {\n      setText(mainCtx, x, y, `${hex.details.energy}`);\n      setText(mainCtx, x, y + hexSize / 2, `lvl: ${1 * hex.details.level + 1}`);\n    }\n  }\n\n  requestAnimationFrame(drawMap);\n}\n\nfunction setText(ctx, x, y, txt, fontSize = 10, style = \"white\", align = 'center') {\n  let _font = `${fontSize * (camera.zoom + 1)}px Georgia`;\n  ctx.font = _font;\n  ctx.fillStyle = style;\n  ctx.textAlign = align;\n  ctx.fillText(txt, x, y, hexSize);\n}\n\nfunction calculateHexDimensions() {\n  a_full = hexSize / 2;\n  b_full = hexSize;\n  c_full = hexSize / 2 * Math.sqrt(3);\n  a_hex = a_full * 0.95;\n  b_hex = b_full * 0.95;\n  c_hex = c_full * 0.95;\n}\n\nfunction windowResizeUpdate() {\n  mainCanvas.width = window.innerWidth;\n  mainCanvas.height = window.innerHeight;\n  animCanvas.width = window.innerWidth;\n  animCanvas.height = window.innerHeight;\n  halfCanvasWidth = mainCanvas.width / 2;\n  halfCanvasHeight = mainCanvas.height / 2;\n  const min = Math.min(halfCanvasWidth, halfCanvasHeight);\n  scales = min / 7;\n  console.log('halfCanvas', halfCanvasWidth, halfCanvasHeight);\n  console.log('scales', scales);\n} //Hex Highlighting\n\n\nanimCanvas.addEventListener('click', async ({\n  offsetX,\n  offsetY\n}) => {\n  console.log('click', isdblclick);\n  await sleep(500);\n  console.log('click', isdblclick);\n\n  if (isdblclick) {\n    return;\n  }\n\n  offsetX += camera.x - mainCanvas.width / 2;\n  offsetY += camera.y - mainCanvas.height / 2;\n  const hexCoordinates = grid.pointToHex({\n    x: offsetX,\n    y: offsetY\n  });\n\n  for (let hex of currentMap) {\n    if (hex.x == hexCoordinates.x && hex.y == hexCoordinates.y) {\n      hex.highlight = !hex.highlight;\n    } else {\n      hex.highlight = false;\n    }\n  }\n});\nanimCanvas.addEventListener('dblclick', async ({\n  offsetX,\n  offsetY\n}) => {\n  isdblclick = true;\n  console.log('dblclick', isdblclick);\n  await sleep(500);\n  isdblclick = false;\n  console.log('dblclick', isdblclick);\n  offsetX += camera.x - mainCanvas.width / 2;\n  offsetY += camera.y - mainCanvas.height / 2;\n  const hexCoordinates = grid.pointToHex({\n    x: offsetX,\n    y: offsetY\n  });\n  console.log(hexCoordinates);\n  let hHex;\n  let tHex;\n\n  for (let hex of currentMap) {\n    if (hex.highlight) {\n      hHex = hex;\n    }\n\n    if (hex.x == hexCoordinates.x && hex.y == hexCoordinates.y) {\n      tHex = hex;\n    }\n  }\n\n  if (!tHex) return;\n  if (hHex && !hHex.details) return;\n  console.log('hHex', hHex);\n  console.log('tHex', tHex);\n  let cellCoord = {\n    x: hexCoordinates.q,\n    y: hexCoordinates.r,\n    z: hexCoordinates.s\n  };\n\n  if (!hHex) {\n    if (!tHex.details) {\n      await PROVIDER.newGame(cellCoord);\n    }\n  } else if (hHex.address.toString() == tHex.address.toString()) {\n    await PROVIDER.upgradeCell(tHex.address);\n  } else {\n    if (!isNeighborHex(hHex, tHex)) return;\n    let energy = 1000;\n\n    if (!tHex.details) {\n      await PROVIDER.markCell(hHex.address, cellCoord, energy);\n    } else if (colorIsEqual(hHex.details.color, tHex.details.color)) {\n      // переписать условие по владельцу ячейки и цвета\n      await PROVIDER.helpCell(hHex.address, cellCoord, energy);\n    } else {\n      await PROVIDER.attkCell(hHex.address, cellCoord, energy);\n    }\n  }\n});\n\nfunction colorIsEqual(color1, color2) {\n  return color1.r == color2.r && color1.g == color2.g && color1.b == color2.b;\n}\n\nfunction isNeighborHex(hex1, hex2) {\n  return cube_distance(hex1, hex2) == 1;\n}\n\nfunction cube_distance(hex1, hex2) {\n  return Math.max(Math.abs(hex1.q - hex2.q), Math.abs(hex1.r - hex2.r), Math.abs(hex1.s - hex2.s));\n}\n\nwindow.addEventListener('resize', () => {\n  windowResizeUpdate();\n  zoomUpdate();\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/display.js\n");

/***/ }),

/***/ "./src/scripts/ever.js":
/*!*****************************!*\
  !*** ./src/scripts/ever.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"setMap\": () => (/* binding */ setMap),\n/* harmony export */   \"init\": () => (/* binding */ init),\n/* harmony export */   \"routerDetails\": () => (/* binding */ routerDetails),\n/* harmony export */   \"routerLiders\": () => (/* binding */ routerLiders),\n/* harmony export */   \"subscribeAllCellState\": () => (/* binding */ subscribeAllCellState),\n/* harmony export */   \"getAddressCells\": () => (/* binding */ getAddressCells),\n/* harmony export */   \"newGame\": () => (/* binding */ newGame),\n/* harmony export */   \"markCell\": () => (/* binding */ markCell),\n/* harmony export */   \"upgradeCell\": () => (/* binding */ upgradeCell),\n/* harmony export */   \"helpCell\": () => (/* binding */ helpCell),\n/* harmony export */   \"attkCell\": () => (/* binding */ attkCell),\n/* harmony export */   \"newRouter\": () => (/* binding */ newRouter),\n/* harmony export */   \"getDetailsCell\": () => (/* binding */ getDetailsCell),\n/* harmony export */   \"getDetailsRouter\": () => (/* binding */ getDetailsRouter),\n/* harmony export */   \"subscribePermissionsChanged\": () => (/* binding */ subscribePermissionsChanged)\n/* harmony export */ });\n/* harmony import */ var everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! everscale-inpage-provider */ \"./node_modules/everscale-inpage-provider/dist/index.js\");\n/* harmony import */ var everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var everscale_standalone_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! everscale-standalone-client */ \"./node_modules/everscale-standalone-client/index.js\");\n/* harmony import */ var everscale_standalone_client__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(everscale_standalone_client__WEBPACK_IMPORTED_MODULE_1__);\n\n\n\nconst {\n  TonClient,\n  signerKeys,\n  signerNone\n} = __webpack_require__(/*! @eversdk/core */ \"./node_modules/@eversdk/core/dist/index.js\"); //const { libNode } = require(\"@eversdk/lib-node\");\n\n\nconst {\n  libWeb\n} = __webpack_require__(/*! @eversdk/lib-web */ \"./node_modules/@eversdk/lib-web/index.js\");\n\nconst {\n  Account\n} = __webpack_require__(/*! @eversdk/appkit */ \"./node_modules/@eversdk/appkit/dist/index.js\");\n\nTonClient.useBinaryLibrary(libWeb);\n\nconst routerAbi = __webpack_require__(/*! ../../contracts/build/Router.abi.json */ \"./contracts/build/Router.abi.json\");\n\nconst cellAbi = __webpack_require__(/*! ../../contracts/build/Cell.abi.json */ \"./contracts/build/Cell.abi.json\");\n\nconst rootAbi = __webpack_require__(/*! ../../contracts/build/GameRoot.abi.json */ \"./contracts/build/GameRoot.abi.json\");\n\nconst Config = __webpack_require__(/*! ../../config.json */ \"./config.json\");\n\nlet currentMap = [];\nlet onRoumingChange;\nconst ever = new everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.ProviderRpcClient({});\nlet everClient;\nlet subscribeAcc;\n\nconst createClient = endpoint => {\n  let client = new TonClient({\n    network: {\n      endpoints: [endpoint],\n      message_retries_count: 3,\n      message_processing_timeout: 60000\n    }\n  });\n  return client;\n};\n\nconst getAccount = (abi, address = '', keys = null) => {\n  try {\n    return new Account({\n      abi\n    }, {\n      address: address,\n      signer: keys ? signerKeys(keys) : signerNone(),\n      client: everClient\n    });\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst getAccArr = async addreses => {\n  try {\n    const result = (await everClient.net.query_collection({\n      collection: \"accounts\",\n      filter: {\n        id: {\n          in: addreses\n        }\n      },\n      result: \"id acc_type balance boc\"\n    })).result;\n    return result;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nconst runLocal = async (abi, address, functionName, input = {}, log = true, boc = null) => {\n  try {\n    const [account, message] = await Promise.all([boc || everClient.net.query_collection({\n      collection: \"accounts\",\n      filter: {\n        id: {\n          eq: address\n        }\n      },\n      result: \"boc\"\n    }).then(({\n      result\n    }) => result[0].boc).catch(() => {\n      return undefined;\n    }), everClient.abi.encode_message({\n      abi: {\n        type: 'Contract',\n        value: abi\n      },\n      address,\n      call_set: {\n        function_name: functionName,\n        input: input\n      },\n      signer: {\n        type: \"None\"\n      }\n    }).then(({\n      message\n    }) => message)]);\n    if (!account) return undefined;\n    let response = await everClient.tvm.run_tvm({\n      message: message,\n      account: account,\n      abi: {\n        type: 'Contract',\n        value: abi\n      }\n    });\n    if (log) console.log(\"output:\", response.decoded.output);\n    return response.decoded.output;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nfunction behavior(name, fn) {\n  document.querySelectorAll(`[data-behavior=${name}]`).forEach(fn);\n}\n\nconst innerText = text => elem => {\n  elem.innerText = text;\n};\n\nfunction requestPermissions() {\n  return ever.requestPermissions({\n    permissions: ['basic', 'accountInteraction']\n  });\n}\n\nasync function disconnectAction() {\n  console.log('disconnectAction');\n  await ever.disconnect();\n}\n\nasync function getRoutersAction() {\n  clearTblRows('tblRouters', 3);\n  console.log('getRoutersAction');\n  const providerState = await ever.getProviderState();\n  let details = await ever.getAccountsByCodeHash({\n    codeHash: Config[providerState.selectedConnection].codeHash,\n    limit: 50\n  });\n  let addreses = details.accounts.map(el => el.toString());\n  console.log('routers', addreses);\n  let accs = await getAccArr(addreses);\n  console.log('routers', accs);\n\n  for (let i = 0; i < accs.length; i++) {\n    let details = await getDetailsRouter(accs[i].id, accs[i].boc);\n\n    if (details) {\n      let row, cell;\n      var date = new Date(1000 * details.endTime);\n      console.log('date', date);\n      row = addTblRow('tblRouters');\n      cell = row.insertCell(0);\n      cell.innerHTML = details.name;\n      cell = row.insertCell(1);\n      cell.innerHTML = details.radius;\n      cell = row.insertCell(2);\n      cell.innerHTML = details.speed;\n      cell = row.insertCell(3);\n      cell.innerHTML = date.customFormat(\"#DD#-#MM#-#YYYY# #hh#:#mm#:#ss#\");\n      cell = row.insertCell(4);\n      var btn = document.createElement('button');\n      btn.textContent = \"Set\";\n      btn.setAttribute('type', 'button');\n      btn.setAttribute(\"addr\", accs[i].id);\n      btn.onclick = setRouter;\n      cell.appendChild(btn);\n      cell = row.insertCell(5);\n      cell.innerHTML = accs[i].id;\n      cell.style = \"visibility: hidden\"; // cell.colSpan = \"4\"\n      // cell.style=\"text-align:left;\"\n    }\n  }\n}\n\nasync function getLiderBoard() {\n  clearTblRows('tblLiders', 1);\n  console.log('getLiderBoard');\n  const providerState = await ever.getProviderState();\n  let details = await routerLiders();\n  let users = details.users.map(el => el.toString());\n  console.log('users', users);\n\n  for (let i = 0; i < users.length; i++) {\n    let usr = users[i].split(',');\n    let row, cell;\n    row = addTblRow('tblLiders');\n    cell = row.insertCell(0);\n    cell.innerHTML = `${usr[0].substr(0, 6)}...${usr[0].substr(-4, 4)}`;\n    cell = row.insertCell(1);\n    cell.innerHTML = usr[1]; // cell.colSpan = \"4\"\n    // cell.style=\"text-align:left;\"\n  }\n}\n\nasync function setRouter(el) {\n  console.log('setRouter', el);\n  let address = el.target.attributes.addr.value;\n  console.log('address', address);\n  const providerState = await ever.getProviderState();\n  const network = providerState.selectedConnection;\n  Config[network].router = address;\n\n  for (let hex of currentMap) {\n    hex.highlight = false;\n    hex.details = undefined;\n  }\n\n  let details = await routerDetails();\n  console.log('details', details);\n  onRoumingChange(details.radius);\n  loadMap();\n  getLiderBoard();\n}\n\nasync function addRouterAction() {\n  let name = document.getElementById('router_name').value;\n  let radius = document.getElementById('router_radius').value;\n  let speed = document.getElementById('router_speed').value;\n  let time = document.getElementById('router_time').value;\n  console.log('addRouterAction', name, radius, speed, time);\n  const providerState = await newRouter(name, radius, speed, time);\n  await getRoutersAction();\n}\n\nasync function connect() {\n  await ever.requestPermissions({\n    permissions: ['basic', 'accountInteraction']\n  });\n}\n\nasync function checkConnect() {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  const network = providerState.selectedConnection;\n\n  if (!contractAddress(network) || !permissions.accountInteraction) {\n    behavior('connect', elem => elem.onclick = requestPermissions);\n    switchScreen(\"login\");\n\n    const connectText = elem => {\n      const disabled = !contractAddress(network);\n      elem.disabled = disabled;\n      elem.innerText = disabled ? `Contract not found` : `Connect with ${network}`;\n    };\n\n    behavior('connect', connectText);\n  } else {\n    // INFO for transactionsFound and contractStateChanged need permissions\n    const providerState = await ever.getProviderState();\n    (await ever.subscribe('transactionsFound', {\n      address: contractAddress(providerState.selectedConnection)\n    })).on('data', event => {\n      console.log(':', {\n        address: event.address,\n        transactions: event.transactions,\n        info: event.info\n      });\n    });\n    (await ever.subscribe('contractStateChanged', {\n      address: contractAddress(providerState.selectedConnection)\n    })).on('data', event => {\n      console.log('permissionsChanged:', {\n        address: event.address,\n        state: event.state\n      });\n    });\n    switchScreen(\"main\");\n    const account = permissions.accountInteraction;\n    let address = account.address.toString();\n    let pubkey = account.publicKey.toString();\n    behavior('address', innerText(`${address.substr(0, 6)}...${address.substr(-4, 4)}`));\n    behavior('publicKey', innerText(`${pubkey.substr(0, 6)}...${pubkey.substr(-4, 4)}`));\n    behavior('disconnectAction', elem => elem.onclick = disconnectAction);\n    behavior('getRoutersAction', elem => elem.onclick = getRoutersAction);\n    behavior('addRouterAction', elem => elem.onclick = addRouterAction);\n    console.log('endpoint:', Config[network].endpoint);\n    everClient = createClient(Config[network].endpoint);\n    subscribeAcc = getAccount({}); // loadMap();\n\n    await getRoutersAction();\n  }\n}\n\nasync function setNetworkChanged(network) {\n  const mod = network === 'mainnet' ? 'success' : 'secondary';\n  const out = `<span class=\"badge bg-${mod}\">${network}</span>`;\n  behavior('network', elem => elem.innerHTML = out);\n  await checkConnect();\n}\n\nfunction contractAddress(network, name = \"router\") {\n  if (Config[network] && Config[network][name]) {\n    return new everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.Address(Config[network][name]);\n  }\n\n  return null;\n}\n\nfunction switchScreen(to) {\n  console.log('switchScreen:', to);\n  [\"extension\", \"login\", \"main\"].forEach(screen => {\n    const switcher = elem => elem.style.display = to === screen ? 'table-row' : 'none';\n\n    behavior(screen, switcher);\n  });\n}\n\nasync function mainFlow() {\n  const providerState = await ever.getProviderState();\n  console.log('selectedConnection:', providerState.selectedConnection);\n  await setNetworkChanged(providerState.selectedConnection);\n  (await ever.subscribe('networkChanged')).on('data', event => {\n    console.log('networkChanged:', event.selectedConnection);\n    setNetworkChanged(event.selectedConnection);\n  });\n  (await ever.subscribe('permissionsChanged')).on('data', async event => {\n    console.log('permissionsChanged:', event.permissions);\n    await checkConnect();\n  });\n}\n\nasync function loadMap() {\n  let coords = [];\n\n  for (const hex of currentMap) {\n    coords.push({\n      x: hex.q,\n      y: hex.r,\n      z: hex.s\n    });\n  } // console.log('coords', coords);\n\n\n  let addreses = await getAddressCells(coords);\n  addreses = addreses.map(el => el.toString());\n  let i = 0;\n\n  for (const hex of currentMap) {\n    hex.address = addreses[i].toString();\n    i++;\n  } // console.log('addreses', addreses);\n\n\n  await subscribeAllCellState(addreses);\n  let accs = await getAccArr(addreses);\n  console.log('accs', accs);\n\n  for (let i = 0; i < accs.length; i++) {\n    let details = await getDetailsCell(accs[i].id, accs[i].boc);\n\n    if (details) {\n      let hex = findHex(accs[i].id);\n      console.log('hex', hex);\n\n      if (hex) {\n        hex.details = details;\n      }\n    }\n  }\n}\n\nfunction setMap(map) {\n  currentMap = map;\n}\nasync function init(_onRoumingChange) {\n  onRoumingChange = _onRoumingChange;\n\n  if (await ever.hasProvider()) {\n    try {\n      await ever.ensureInitialized();\n      await mainFlow();\n    } catch (error) {\n      throw error; // TODO handle it\n    }\n  } else {\n    switchScreen(\"extension\");\n  }\n}\n\nfunction findHex(address) {\n  let _hex;\n\n  for (const hex of currentMap) {\n    if (hex.address == address) {\n      _hex = hex;\n      break;\n    }\n  }\n\n  return _hex;\n}\n\nasync function routerDetails() {\n  const providerState = await ever.getProviderState();\n  const router = new ever.Contract(routerAbi, contractAddress(providerState.selectedConnection, 'router'));\n\n  try {\n    let details;\n    details = await router.methods.getDetails({}).call();\n    console.log('getDetails router', details);\n    return details;\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function routerLiders() {\n  const providerState = await ever.getProviderState();\n  const router = new ever.Contract(routerAbi, contractAddress(providerState.selectedConnection, 'router'));\n\n  try {\n    let details;\n    details = await router.methods.getUsers({}).call();\n    console.log('getUsers router', details);\n    return details;\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function subscribeAllCellState(arrAcc) {\n  try {\n    await subscribeAcc.free();\n    await subscribeAcc.subscribe(\"accounts\", {\n      id: {\n        in: arrAcc\n      }\n    }, \"id boc\", async msg => {\n      console.log(`onAcc:`, msg.id);\n      let hex = findHex(msg.id);\n      console.log('hex', hex);\n\n      if (hex) {\n        hex.details = await getDetailsCell(msg.id, msg.boc);\n      }\n\n      getLiderBoard();\n    }, async msg => {\n      console.log(`onError:`, msg);\n    });\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function getAddressCells(coords) {\n  const providerState = await ever.getProviderState();\n  const router = new ever.Contract(routerAbi, contractAddress(providerState.selectedConnection, 'router'));\n\n  try {\n    let details;\n    details = await router.methods.getAddressCells({\n      coords\n    }).call();\n    console.log('getAddressCells router', details);\n    return details.addreses;\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function newGame(cellCoord) {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  if (!permissions.accountInteraction) return;\n  const account = permissions.accountInteraction;\n  const router = new ever.Contract(routerAbi, contractAddress(providerState.selectedConnection, 'router'));\n\n  try {\n    console.log('newGame', 1);\n    let res = await router.methods.newGame({\n      baseCoord: cellCoord\n    }).send({\n      from: account.address.toString(),\n      amount: '2000000000'\n    });\n    console.log('newGame', res);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function markCell(address, cellCoord, energy) {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  if (!permissions.accountInteraction) return;\n  const account = permissions.accountInteraction;\n  const cell = new ever.Contract(cellAbi, address);\n\n  try {\n    console.log('markCell', 1);\n    let res = await cell.methods.markCell({\n      targetCoord: cellCoord,\n      energy: energy\n    }).send({\n      from: account.address.toString(),\n      amount: '2000000000'\n    });\n    console.log('markCell', res);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function upgradeCell(address) {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  if (!permissions.accountInteraction) return;\n  const account = permissions.accountInteraction;\n  const cell = new ever.Contract(cellAbi, address);\n\n  try {\n    console.log('upgradeCell', 1);\n    let res = await cell.methods.upgradeCell({// }).sendExternal({ publicKey: account.publicKey.toString() })\n    }).send({\n      from: account.address.toString(),\n      amount: '1000000000'\n    });\n    console.log('upgradeCell', res);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function helpCell(address, cellCoord, energy) {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  if (!permissions.accountInteraction) return;\n  const account = permissions.accountInteraction;\n  const cell = new ever.Contract(cellAbi, address);\n\n  try {\n    console.log('helpCell', 1);\n    let res = await cell.methods.helpCell({\n      targetCoord: cellCoord,\n      energy: energy\n    }).send({\n      from: account.address.toString(),\n      amount: '1000000000'\n    });\n    console.log('helpCell', res);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function attkCell(address, cellCoord, energy) {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  if (!permissions.accountInteraction) return;\n  const account = permissions.accountInteraction;\n  const cell = new ever.Contract(cellAbi, address);\n\n  try {\n    console.log('attkCell', 1);\n    let res = await cell.methods.attkCell({\n      targetCoord: cellCoord,\n      energy: energy\n    }).send({\n      from: account.address.toString(),\n      amount: '1000000000'\n    });\n    console.log('attkCell', res);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function newRouter(name, radius, speed, time) {\n  const providerState = await ever.getProviderState();\n  const permissions = providerState.permissions;\n  if (!permissions.accountInteraction) return;\n  const account = permissions.accountInteraction;\n  const gameroot = new ever.Contract(rootAbi, Config[providerState.selectedConnection].gameroot);\n\n  try {\n    console.log('newRouter', 1);\n    let res = await gameroot.methods.newRouter({\n      roundTime: time,\n      radius: radius,\n      speed: speed,\n      name: name,\n      nonce: '0'\n    }).send({\n      from: account.address.toString(),\n      amount: '2000000000'\n    });\n    console.log('newRouter', res);\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function getDetailsCell(address, boc = null) {\n  if (boc) {\n    try {\n      const output = await runLocal(cellAbi, address, \"getDetails\", {}, true, boc);\n      return output;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const cell = new ever.Contract(cellAbi, address);\n\n  try {\n    const stateRes = await cell.getFullState();\n\n    if (stateRes.state == null || !stateRes.state.isDeployed) {\n      return null;\n    } //console.log('state', stateRes.state);\n\n\n    let details;\n    details = await cell.methods.getDetails({}).call();\n    console.log('getDetails cell', details);\n    return details;\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function getDetailsRouter(address, boc = null) {\n  if (boc) {\n    try {\n      const output = await runLocal(routerAbi, address, \"getDetails\", {}, true, boc);\n      return output;\n    } catch (error) {\n      console.error(error);\n    }\n  }\n\n  const router = new ever.Contract(routerAbi, address);\n\n  try {\n    const stateRes = await router.getFullState();\n\n    if (stateRes.state == null || !stateRes.state.isDeployed) {\n      return null;\n    } //console.log('state', stateRes.state);\n\n\n    let details;\n    details = await router.methods.getDetails({}).call();\n    console.log('getDetails router', details);\n    return details;\n  } catch (e) {\n    console.error(e);\n\n    if (e instanceof everscale_inpage_provider__WEBPACK_IMPORTED_MODULE_0__.TvmException) {\n      console.error(e.code);\n    }\n  }\n}\nasync function subscribePermissionsChanged() {\n  await ever.subscribe('permissionsChanged').on('data', permissions => {\n    console.log(permissions);\n  });\n}\n\nfunction addTblRow(tblName) {\n  var table = document.getElementById(tblName);\n  return table.insertRow(table.rows.length);\n}\n\nfunction clearTblRows(tblName, min = 1) {\n  var table = document.getElementById(tblName);\n\n  while (table.rows.length > min) table.deleteRow(table.rows.length - 1);\n}\n\nDate.prototype.customFormat = function (formatString) {\n  var YYYY, YY, MMMM, MMM, MM, M, DDDD, DDD, DD, D, hhhh, hhh, hh, h, mm, m, ss, s, ampm, AMPM, dMod, th;\n  var dateObject = this;\n  YY = ((YYYY = dateObject.getFullYear()) + \"\").slice(-2);\n  MM = (M = dateObject.getMonth() + 1) < 10 ? '0' + M : M;\n  MMM = (MMMM = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"][M - 1]).substring(0, 3);\n  DD = (D = dateObject.getDate()) < 10 ? '0' + D : D;\n  DDD = (DDDD = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"][dateObject.getDay()]).substring(0, 3);\n  th = D >= 10 && D <= 20 ? 'th' : (dMod = D % 10) == 1 ? 'st' : dMod == 2 ? 'nd' : dMod == 3 ? 'rd' : 'th';\n  formatString = formatString.replace(\"#YYYY#\", YYYY).replace(\"#YY#\", YY).replace(\"#MMMM#\", MMMM).replace(\"#MMM#\", MMM).replace(\"#MM#\", MM).replace(\"#M#\", M).replace(\"#DDDD#\", DDDD).replace(\"#DDD#\", DDD).replace(\"#DD#\", DD).replace(\"#D#\", D).replace(\"#th#\", th);\n  h = hhh = dateObject.getHours();\n  if (h == 0) h = 24;\n  if (h > 12) h -= 12;\n  hh = h < 10 ? '0' + h : h;\n  hhhh = hhh < 10 ? '0' + hhh : hhh;\n  AMPM = (ampm = hhh < 12 ? 'am' : 'pm').toUpperCase();\n  mm = (m = dateObject.getMinutes()) < 10 ? '0' + m : m;\n  ss = (s = dateObject.getSeconds()) < 10 ? '0' + s : s;\n  return formatString.replace(\"#hhhh#\", hhhh).replace(\"#hhh#\", hhh).replace(\"#hh#\", hh).replace(\"#h#\", h).replace(\"#mm#\", mm).replace(\"#m#\", m).replace(\"#ss#\", ss).replace(\"#s#\", s).replace(\"#ampm#\", ampm).replace(\"#AMPM#\", AMPM);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/scripts/ever.js\n");

/***/ }),

/***/ "./node_modules/bignumber.js/bignumber.js":
/*!************************************************!*\
  !*** ./node_modules/bignumber.js/bignumber.js ***!
  \************************************************/
/***/ (function(module, exports, __webpack_require__) {

eval("var __WEBPACK_AMD_DEFINE_RESULT__;;(function (globalObject) {\r\n  'use strict';\r\n\r\n/*\r\n *      bignumber.js v9.1.0\r\n *      A JavaScript library for arbitrary-precision arithmetic.\r\n *      https://github.com/MikeMcl/bignumber.js\r\n *      Copyright (c) 2022 Michael Mclaughlin <M8ch88l@gmail.com>\r\n *      MIT Licensed.\r\n *\r\n *      BigNumber.prototype methods     |  BigNumber methods\r\n *                                      |\r\n *      absoluteValue            abs    |  clone\r\n *      comparedTo                      |  config               set\r\n *      decimalPlaces            dp     |      DECIMAL_PLACES\r\n *      dividedBy                div    |      ROUNDING_MODE\r\n *      dividedToIntegerBy       idiv   |      EXPONENTIAL_AT\r\n *      exponentiatedBy          pow    |      RANGE\r\n *      integerValue                    |      CRYPTO\r\n *      isEqualTo                eq     |      MODULO_MODE\r\n *      isFinite                        |      POW_PRECISION\r\n *      isGreaterThan            gt     |      FORMAT\r\n *      isGreaterThanOrEqualTo   gte    |      ALPHABET\r\n *      isInteger                       |  isBigNumber\r\n *      isLessThan               lt     |  maximum              max\r\n *      isLessThanOrEqualTo      lte    |  minimum              min\r\n *      isNaN                           |  random\r\n *      isNegative                      |  sum\r\n *      isPositive                      |\r\n *      isZero                          |\r\n *      minus                           |\r\n *      modulo                   mod    |\r\n *      multipliedBy             times  |\r\n *      negated                         |\r\n *      plus                            |\r\n *      precision                sd     |\r\n *      shiftedBy                       |\r\n *      squareRoot               sqrt   |\r\n *      toExponential                   |\r\n *      toFixed                         |\r\n *      toFormat                        |\r\n *      toFraction                      |\r\n *      toJSON                          |\r\n *      toNumber                        |\r\n *      toPrecision                     |\r\n *      toString                        |\r\n *      valueOf                         |\r\n *\r\n */\r\n\r\n\r\n  var BigNumber,\r\n    isNumeric = /^-?(?:\\d+(?:\\.\\d*)?|\\.\\d+)(?:e[+-]?\\d+)?$/i,\r\n    mathceil = Math.ceil,\r\n    mathfloor = Math.floor,\r\n\r\n    bignumberError = '[BigNumber Error] ',\r\n    tooManyDigits = bignumberError + 'Number primitive has more than 15 significant digits: ',\r\n\r\n    BASE = 1e14,\r\n    LOG_BASE = 14,\r\n    MAX_SAFE_INTEGER = 0x1fffffffffffff,         // 2^53 - 1\r\n    // MAX_INT32 = 0x7fffffff,                   // 2^31 - 1\r\n    POWS_TEN = [1, 10, 100, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9, 1e10, 1e11, 1e12, 1e13],\r\n    SQRT_BASE = 1e7,\r\n\r\n    // EDITABLE\r\n    // The limit on the value of DECIMAL_PLACES, TO_EXP_NEG, TO_EXP_POS, MIN_EXP, MAX_EXP, and\r\n    // the arguments to toExponential, toFixed, toFormat, and toPrecision.\r\n    MAX = 1E9;                                   // 0 to MAX_INT32\r\n\r\n\r\n  /*\r\n   * Create and return a BigNumber constructor.\r\n   */\r\n  function clone(configObject) {\r\n    var div, convertBase, parseNumeric,\r\n      P = BigNumber.prototype = { constructor: BigNumber, toString: null, valueOf: null },\r\n      ONE = new BigNumber(1),\r\n\r\n\r\n      //----------------------------- EDITABLE CONFIG DEFAULTS -------------------------------\r\n\r\n\r\n      // The default values below must be integers within the inclusive ranges stated.\r\n      // The values can also be changed at run-time using BigNumber.set.\r\n\r\n      // The maximum number of decimal places for operations involving division.\r\n      DECIMAL_PLACES = 20,                     // 0 to MAX\r\n\r\n      // The rounding mode used when rounding to the above decimal places, and when using\r\n      // toExponential, toFixed, toFormat and toPrecision, and round (default value).\r\n      // UP         0 Away from zero.\r\n      // DOWN       1 Towards zero.\r\n      // CEIL       2 Towards +Infinity.\r\n      // FLOOR      3 Towards -Infinity.\r\n      // HALF_UP    4 Towards nearest neighbour. If equidistant, up.\r\n      // HALF_DOWN  5 Towards nearest neighbour. If equidistant, down.\r\n      // HALF_EVEN  6 Towards nearest neighbour. If equidistant, towards even neighbour.\r\n      // HALF_CEIL  7 Towards nearest neighbour. If equidistant, towards +Infinity.\r\n      // HALF_FLOOR 8 Towards nearest neighbour. If equidistant, towards -Infinity.\r\n      ROUNDING_MODE = 4,                       // 0 to 8\r\n\r\n      // EXPONENTIAL_AT : [TO_EXP_NEG , TO_EXP_POS]\r\n\r\n      // The exponent value at and beneath which toString returns exponential notation.\r\n      // Number type: -7\r\n      TO_EXP_NEG = -7,                         // 0 to -MAX\r\n\r\n      // The exponent value at and above which toString returns exponential notation.\r\n      // Number type: 21\r\n      TO_EXP_POS = 21,                         // 0 to MAX\r\n\r\n      // RANGE : [MIN_EXP, MAX_EXP]\r\n\r\n      // The minimum exponent value, beneath which underflow to zero occurs.\r\n      // Number type: -324  (5e-324)\r\n      MIN_EXP = -1e7,                          // -1 to -MAX\r\n\r\n      // The maximum exponent value, above which overflow to Infinity occurs.\r\n      // Number type:  308  (1.7976931348623157e+308)\r\n      // For MAX_EXP > 1e7, e.g. new BigNumber('1e100000000').plus(1) may be slow.\r\n      MAX_EXP = 1e7,                           // 1 to MAX\r\n\r\n      // Whether to use cryptographically-secure random number generation, if available.\r\n      CRYPTO = false,                          // true or false\r\n\r\n      // The modulo mode used when calculating the modulus: a mod n.\r\n      // The quotient (q = a / n) is calculated according to the corresponding rounding mode.\r\n      // The remainder (r) is calculated as: r = a - n * q.\r\n      //\r\n      // UP        0 The remainder is positive if the dividend is negative, else is negative.\r\n      // DOWN      1 The remainder has the same sign as the dividend.\r\n      //             This modulo mode is commonly known as 'truncated division' and is\r\n      //             equivalent to (a % n) in JavaScript.\r\n      // FLOOR     3 The remainder has the same sign as the divisor (Python %).\r\n      // HALF_EVEN 6 This modulo mode implements the IEEE 754 remainder function.\r\n      // EUCLID    9 Euclidian division. q = sign(n) * floor(a / abs(n)).\r\n      //             The remainder is always positive.\r\n      //\r\n      // The truncated division, floored division, Euclidian division and IEEE 754 remainder\r\n      // modes are commonly used for the modulus operation.\r\n      // Although the other rounding modes can also be used, they may not give useful results.\r\n      MODULO_MODE = 1,                         // 0 to 9\r\n\r\n      // The maximum number of significant digits of the result of the exponentiatedBy operation.\r\n      // If POW_PRECISION is 0, there will be unlimited significant digits.\r\n      POW_PRECISION = 0,                       // 0 to MAX\r\n\r\n      // The format specification used by the BigNumber.prototype.toFormat method.\r\n      FORMAT = {\r\n        prefix: '',\r\n        groupSize: 3,\r\n        secondaryGroupSize: 0,\r\n        groupSeparator: ',',\r\n        decimalSeparator: '.',\r\n        fractionGroupSize: 0,\r\n        fractionGroupSeparator: '\\xA0',        // non-breaking space\r\n        suffix: ''\r\n      },\r\n\r\n      // The alphabet used for base conversion. It must be at least 2 characters long, with no '+',\r\n      // '-', '.', whitespace, or repeated character.\r\n      // '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ$_'\r\n      ALPHABET = '0123456789abcdefghijklmnopqrstuvwxyz',\r\n      alphabetHasNormalDecimalDigits = true;\r\n\r\n\r\n    //------------------------------------------------------------------------------------------\r\n\r\n\r\n    // CONSTRUCTOR\r\n\r\n\r\n    /*\r\n     * The BigNumber constructor and exported function.\r\n     * Create and return a new instance of a BigNumber object.\r\n     *\r\n     * v {number|string|BigNumber} A numeric value.\r\n     * [b] {number} The base of v. Integer, 2 to ALPHABET.length inclusive.\r\n     */\r\n    function BigNumber(v, b) {\r\n      var alphabet, c, caseChanged, e, i, isNum, len, str,\r\n        x = this;\r\n\r\n      // Enable constructor call without `new`.\r\n      if (!(x instanceof BigNumber)) return new BigNumber(v, b);\r\n\r\n      if (b == null) {\r\n\r\n        if (v && v._isBigNumber === true) {\r\n          x.s = v.s;\r\n\r\n          if (!v.c || v.e > MAX_EXP) {\r\n            x.c = x.e = null;\r\n          } else if (v.e < MIN_EXP) {\r\n            x.c = [x.e = 0];\r\n          } else {\r\n            x.e = v.e;\r\n            x.c = v.c.slice();\r\n          }\r\n\r\n          return;\r\n        }\r\n\r\n        if ((isNum = typeof v == 'number') && v * 0 == 0) {\r\n\r\n          // Use `1 / n` to handle minus zero also.\r\n          x.s = 1 / v < 0 ? (v = -v, -1) : 1;\r\n\r\n          // Fast path for integers, where n < 2147483648 (2**31).\r\n          if (v === ~~v) {\r\n            for (e = 0, i = v; i >= 10; i /= 10, e++);\r\n\r\n            if (e > MAX_EXP) {\r\n              x.c = x.e = null;\r\n            } else {\r\n              x.e = e;\r\n              x.c = [v];\r\n            }\r\n\r\n            return;\r\n          }\r\n\r\n          str = String(v);\r\n        } else {\r\n\r\n          if (!isNumeric.test(str = String(v))) return parseNumeric(x, str, isNum);\r\n\r\n          x.s = str.charCodeAt(0) == 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n\r\n        // Exponential form?\r\n        if ((i = str.search(/e/i)) > 0) {\r\n\r\n          // Determine exponent.\r\n          if (e < 0) e = i;\r\n          e += +str.slice(i + 1);\r\n          str = str.substring(0, i);\r\n        } else if (e < 0) {\r\n\r\n          // Integer.\r\n          e = str.length;\r\n        }\r\n\r\n      } else {\r\n\r\n        // '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n        intCheck(b, 2, ALPHABET.length, 'Base');\r\n\r\n        // Allow exponential notation to be used with base 10 argument, while\r\n        // also rounding to DECIMAL_PLACES as with other bases.\r\n        if (b == 10 && alphabetHasNormalDecimalDigits) {\r\n          x = new BigNumber(v);\r\n          return round(x, DECIMAL_PLACES + x.e + 1, ROUNDING_MODE);\r\n        }\r\n\r\n        str = String(v);\r\n\r\n        if (isNum = typeof v == 'number') {\r\n\r\n          // Avoid potential interpretation of Infinity and NaN as base 44+ values.\r\n          if (v * 0 != 0) return parseNumeric(x, str, isNum, b);\r\n\r\n          x.s = 1 / v < 0 ? (str = str.slice(1), -1) : 1;\r\n\r\n          // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n          if (BigNumber.DEBUG && str.replace(/^0\\.0*|\\./, '').length > 15) {\r\n            throw Error\r\n             (tooManyDigits + v);\r\n          }\r\n        } else {\r\n          x.s = str.charCodeAt(0) === 45 ? (str = str.slice(1), -1) : 1;\r\n        }\r\n\r\n        alphabet = ALPHABET.slice(0, b);\r\n        e = i = 0;\r\n\r\n        // Check that str is a valid base b number.\r\n        // Don't use RegExp, so alphabet can contain special characters.\r\n        for (len = str.length; i < len; i++) {\r\n          if (alphabet.indexOf(c = str.charAt(i)) < 0) {\r\n            if (c == '.') {\r\n\r\n              // If '.' is not the first character and it has not be found before.\r\n              if (i > e) {\r\n                e = len;\r\n                continue;\r\n              }\r\n            } else if (!caseChanged) {\r\n\r\n              // Allow e.g. hexadecimal 'FF' as well as 'ff'.\r\n              if (str == str.toUpperCase() && (str = str.toLowerCase()) ||\r\n                  str == str.toLowerCase() && (str = str.toUpperCase())) {\r\n                caseChanged = true;\r\n                i = -1;\r\n                e = 0;\r\n                continue;\r\n              }\r\n            }\r\n\r\n            return parseNumeric(x, String(v), isNum, b);\r\n          }\r\n        }\r\n\r\n        // Prevent later check for length on converted number.\r\n        isNum = false;\r\n        str = convertBase(str, b, 10, x.s);\r\n\r\n        // Decimal point?\r\n        if ((e = str.indexOf('.')) > -1) str = str.replace('.', '');\r\n        else e = str.length;\r\n      }\r\n\r\n      // Determine leading zeros.\r\n      for (i = 0; str.charCodeAt(i) === 48; i++);\r\n\r\n      // Determine trailing zeros.\r\n      for (len = str.length; str.charCodeAt(--len) === 48;);\r\n\r\n      if (str = str.slice(i, ++len)) {\r\n        len -= i;\r\n\r\n        // '[BigNumber Error] Number primitive has more than 15 significant digits: {n}'\r\n        if (isNum && BigNumber.DEBUG &&\r\n          len > 15 && (v > MAX_SAFE_INTEGER || v !== mathfloor(v))) {\r\n            throw Error\r\n             (tooManyDigits + (x.s * v));\r\n        }\r\n\r\n         // Overflow?\r\n        if ((e = e - i - 1) > MAX_EXP) {\r\n\r\n          // Infinity.\r\n          x.c = x.e = null;\r\n\r\n        // Underflow?\r\n        } else if (e < MIN_EXP) {\r\n\r\n          // Zero.\r\n          x.c = [x.e = 0];\r\n        } else {\r\n          x.e = e;\r\n          x.c = [];\r\n\r\n          // Transform base\r\n\r\n          // e is the base 10 exponent.\r\n          // i is where to slice str to get the first element of the coefficient array.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (e < 0) i += LOG_BASE;  // i < 1\r\n\r\n          if (i < len) {\r\n            if (i) x.c.push(+str.slice(0, i));\r\n\r\n            for (len -= LOG_BASE; i < len;) {\r\n              x.c.push(+str.slice(i, i += LOG_BASE));\r\n            }\r\n\r\n            i = LOG_BASE - (str = str.slice(i)).length;\r\n          } else {\r\n            i -= len;\r\n          }\r\n\r\n          for (; i--; str += '0');\r\n          x.c.push(+str);\r\n        }\r\n      } else {\r\n\r\n        // Zero.\r\n        x.c = [x.e = 0];\r\n      }\r\n    }\r\n\r\n\r\n    // CONSTRUCTOR PROPERTIES\r\n\r\n\r\n    BigNumber.clone = clone;\r\n\r\n    BigNumber.ROUND_UP = 0;\r\n    BigNumber.ROUND_DOWN = 1;\r\n    BigNumber.ROUND_CEIL = 2;\r\n    BigNumber.ROUND_FLOOR = 3;\r\n    BigNumber.ROUND_HALF_UP = 4;\r\n    BigNumber.ROUND_HALF_DOWN = 5;\r\n    BigNumber.ROUND_HALF_EVEN = 6;\r\n    BigNumber.ROUND_HALF_CEIL = 7;\r\n    BigNumber.ROUND_HALF_FLOOR = 8;\r\n    BigNumber.EUCLID = 9;\r\n\r\n\r\n    /*\r\n     * Configure infrequently-changing library-wide settings.\r\n     *\r\n     * Accept an object with the following optional properties (if the value of a property is\r\n     * a number, it must be an integer within the inclusive range stated):\r\n     *\r\n     *   DECIMAL_PLACES   {number}           0 to MAX\r\n     *   ROUNDING_MODE    {number}           0 to 8\r\n     *   EXPONENTIAL_AT   {number|number[]}  -MAX to MAX  or  [-MAX to 0, 0 to MAX]\r\n     *   RANGE            {number|number[]}  -MAX to MAX (not zero)  or  [-MAX to -1, 1 to MAX]\r\n     *   CRYPTO           {boolean}          true or false\r\n     *   MODULO_MODE      {number}           0 to 9\r\n     *   POW_PRECISION       {number}           0 to MAX\r\n     *   ALPHABET         {string}           A string of two or more unique characters which does\r\n     *                                       not contain '.'.\r\n     *   FORMAT           {object}           An object with some of the following properties:\r\n     *     prefix                 {string}\r\n     *     groupSize              {number}\r\n     *     secondaryGroupSize     {number}\r\n     *     groupSeparator         {string}\r\n     *     decimalSeparator       {string}\r\n     *     fractionGroupSize      {number}\r\n     *     fractionGroupSeparator {string}\r\n     *     suffix                 {string}\r\n     *\r\n     * (The values assigned to the above FORMAT object properties are not checked for validity.)\r\n     *\r\n     * E.g.\r\n     * BigNumber.config({ DECIMAL_PLACES : 20, ROUNDING_MODE : 4 })\r\n     *\r\n     * Ignore properties/parameters set to null or undefined, except for ALPHABET.\r\n     *\r\n     * Return an object with the properties current values.\r\n     */\r\n    BigNumber.config = BigNumber.set = function (obj) {\r\n      var p, v;\r\n\r\n      if (obj != null) {\r\n\r\n        if (typeof obj == 'object') {\r\n\r\n          // DECIMAL_PLACES {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] DECIMAL_PLACES {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'DECIMAL_PLACES')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            DECIMAL_PLACES = v;\r\n          }\r\n\r\n          // ROUNDING_MODE {number} Integer, 0 to 8 inclusive.\r\n          // '[BigNumber Error] ROUNDING_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'ROUNDING_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 8, p);\r\n            ROUNDING_MODE = v;\r\n          }\r\n\r\n          // EXPONENTIAL_AT {number|number[]}\r\n          // Integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to 0 inclusive, 0 to MAX inclusive].\r\n          // '[BigNumber Error] EXPONENTIAL_AT {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'EXPONENTIAL_AT')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, 0, p);\r\n              intCheck(v[1], 0, MAX, p);\r\n              TO_EXP_NEG = v[0];\r\n              TO_EXP_POS = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              TO_EXP_NEG = -(TO_EXP_POS = v < 0 ? -v : v);\r\n            }\r\n          }\r\n\r\n          // RANGE {number|number[]} Non-zero integer, -MAX to MAX inclusive or\r\n          // [integer -MAX to -1 inclusive, integer 1 to MAX inclusive].\r\n          // '[BigNumber Error] RANGE {not a primitive number|not an integer|out of range|cannot be zero}: {v}'\r\n          if (obj.hasOwnProperty(p = 'RANGE')) {\r\n            v = obj[p];\r\n            if (v && v.pop) {\r\n              intCheck(v[0], -MAX, -1, p);\r\n              intCheck(v[1], 1, MAX, p);\r\n              MIN_EXP = v[0];\r\n              MAX_EXP = v[1];\r\n            } else {\r\n              intCheck(v, -MAX, MAX, p);\r\n              if (v) {\r\n                MIN_EXP = -(MAX_EXP = v < 0 ? -v : v);\r\n              } else {\r\n                throw Error\r\n                 (bignumberError + p + ' cannot be zero: ' + v);\r\n              }\r\n            }\r\n          }\r\n\r\n          // CRYPTO {boolean} true or false.\r\n          // '[BigNumber Error] CRYPTO not true or false: {v}'\r\n          // '[BigNumber Error] crypto unavailable'\r\n          if (obj.hasOwnProperty(p = 'CRYPTO')) {\r\n            v = obj[p];\r\n            if (v === !!v) {\r\n              if (v) {\r\n                if (typeof crypto != 'undefined' && crypto &&\r\n                 (crypto.getRandomValues || crypto.randomBytes)) {\r\n                  CRYPTO = v;\r\n                } else {\r\n                  CRYPTO = !v;\r\n                  throw Error\r\n                   (bignumberError + 'crypto unavailable');\r\n                }\r\n              } else {\r\n                CRYPTO = v;\r\n              }\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' not true or false: ' + v);\r\n            }\r\n          }\r\n\r\n          // MODULO_MODE {number} Integer, 0 to 9 inclusive.\r\n          // '[BigNumber Error] MODULO_MODE {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'MODULO_MODE')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, 9, p);\r\n            MODULO_MODE = v;\r\n          }\r\n\r\n          // POW_PRECISION {number} Integer, 0 to MAX inclusive.\r\n          // '[BigNumber Error] POW_PRECISION {not a primitive number|not an integer|out of range}: {v}'\r\n          if (obj.hasOwnProperty(p = 'POW_PRECISION')) {\r\n            v = obj[p];\r\n            intCheck(v, 0, MAX, p);\r\n            POW_PRECISION = v;\r\n          }\r\n\r\n          // FORMAT {object}\r\n          // '[BigNumber Error] FORMAT not an object: {v}'\r\n          if (obj.hasOwnProperty(p = 'FORMAT')) {\r\n            v = obj[p];\r\n            if (typeof v == 'object') FORMAT = v;\r\n            else throw Error\r\n             (bignumberError + p + ' not an object: ' + v);\r\n          }\r\n\r\n          // ALPHABET {string}\r\n          // '[BigNumber Error] ALPHABET invalid: {v}'\r\n          if (obj.hasOwnProperty(p = 'ALPHABET')) {\r\n            v = obj[p];\r\n\r\n            // Disallow if less than two characters,\r\n            // or if it contains '+', '-', '.', whitespace, or a repeated character.\r\n            if (typeof v == 'string' && !/^.?$|[+\\-.\\s]|(.).*\\1/.test(v)) {\r\n              alphabetHasNormalDecimalDigits = v.slice(0, 10) == '0123456789';\r\n              ALPHABET = v;\r\n            } else {\r\n              throw Error\r\n               (bignumberError + p + ' invalid: ' + v);\r\n            }\r\n          }\r\n\r\n        } else {\r\n\r\n          // '[BigNumber Error] Object expected: {v}'\r\n          throw Error\r\n           (bignumberError + 'Object expected: ' + obj);\r\n        }\r\n      }\r\n\r\n      return {\r\n        DECIMAL_PLACES: DECIMAL_PLACES,\r\n        ROUNDING_MODE: ROUNDING_MODE,\r\n        EXPONENTIAL_AT: [TO_EXP_NEG, TO_EXP_POS],\r\n        RANGE: [MIN_EXP, MAX_EXP],\r\n        CRYPTO: CRYPTO,\r\n        MODULO_MODE: MODULO_MODE,\r\n        POW_PRECISION: POW_PRECISION,\r\n        FORMAT: FORMAT,\r\n        ALPHABET: ALPHABET\r\n      };\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if v is a BigNumber instance, otherwise return false.\r\n     *\r\n     * If BigNumber.DEBUG is true, throw if a BigNumber instance is not well-formed.\r\n     *\r\n     * v {any}\r\n     *\r\n     * '[BigNumber Error] Invalid BigNumber: {v}'\r\n     */\r\n    BigNumber.isBigNumber = function (v) {\r\n      if (!v || v._isBigNumber !== true) return false;\r\n      if (!BigNumber.DEBUG) return true;\r\n\r\n      var i, n,\r\n        c = v.c,\r\n        e = v.e,\r\n        s = v.s;\r\n\r\n      out: if ({}.toString.call(c) == '[object Array]') {\r\n\r\n        if ((s === 1 || s === -1) && e >= -MAX && e <= MAX && e === mathfloor(e)) {\r\n\r\n          // If the first element is zero, the BigNumber value must be zero.\r\n          if (c[0] === 0) {\r\n            if (e === 0 && c.length === 1) return true;\r\n            break out;\r\n          }\r\n\r\n          // Calculate number of digits that c[0] should have, based on the exponent.\r\n          i = (e + 1) % LOG_BASE;\r\n          if (i < 1) i += LOG_BASE;\r\n\r\n          // Calculate number of digits of c[0].\r\n          //if (Math.ceil(Math.log(c[0] + 1) / Math.LN10) == i) {\r\n          if (String(c[0]).length == i) {\r\n\r\n            for (i = 0; i < c.length; i++) {\r\n              n = c[i];\r\n              if (n < 0 || n >= BASE || n !== mathfloor(n)) break out;\r\n            }\r\n\r\n            // Last element cannot be zero, unless it is the only element.\r\n            if (n !== 0) return true;\r\n          }\r\n        }\r\n\r\n      // Infinity/NaN\r\n      } else if (c === null && e === null && (s === null || s === 1 || s === -1)) {\r\n        return true;\r\n      }\r\n\r\n      throw Error\r\n        (bignumberError + 'Invalid BigNumber: ' + v);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the maximum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.maximum = BigNumber.max = function () {\r\n      return maxOrMin(arguments, P.lt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the minimum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.minimum = BigNumber.min = function () {\r\n      return maxOrMin(arguments, P.gt);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber with a random value equal to or greater than 0 and less than 1,\r\n     * and with dp, or DECIMAL_PLACES if dp is omitted, decimal places (or less if trailing\r\n     * zeros are produced).\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp}'\r\n     * '[BigNumber Error] crypto unavailable'\r\n     */\r\n    BigNumber.random = (function () {\r\n      var pow2_53 = 0x20000000000000;\r\n\r\n      // Return a 53 bit integer n, where 0 <= n < 9007199254740992.\r\n      // Check if Math.random() produces more than 32 bits of randomness.\r\n      // If it does, assume at least 53 bits are produced, otherwise assume at least 30 bits.\r\n      // 0x40000000 is 2^30, 0x800000 is 2^23, 0x1fffff is 2^21 - 1.\r\n      var random53bitInt = (Math.random() * pow2_53) & 0x1fffff\r\n       ? function () { return mathfloor(Math.random() * pow2_53); }\r\n       : function () { return ((Math.random() * 0x40000000 | 0) * 0x800000) +\r\n         (Math.random() * 0x800000 | 0); };\r\n\r\n      return function (dp) {\r\n        var a, b, e, k, v,\r\n          i = 0,\r\n          c = [],\r\n          rand = new BigNumber(ONE);\r\n\r\n        if (dp == null) dp = DECIMAL_PLACES;\r\n        else intCheck(dp, 0, MAX);\r\n\r\n        k = mathceil(dp / LOG_BASE);\r\n\r\n        if (CRYPTO) {\r\n\r\n          // Browsers supporting crypto.getRandomValues.\r\n          if (crypto.getRandomValues) {\r\n\r\n            a = crypto.getRandomValues(new Uint32Array(k *= 2));\r\n\r\n            for (; i < k;) {\r\n\r\n              // 53 bits:\r\n              // ((Math.pow(2, 32) - 1) * Math.pow(2, 21)).toString(2)\r\n              // 11111 11111111 11111111 11111111 11100000 00000000 00000000\r\n              // ((Math.pow(2, 32) - 1) >>> 11).toString(2)\r\n              //                                     11111 11111111 11111111\r\n              // 0x20000 is 2^21.\r\n              v = a[i] * 0x20000 + (a[i + 1] >>> 11);\r\n\r\n              // Rejection sampling:\r\n              // 0 <= v < 9007199254740992\r\n              // Probability that v >= 9e15, is\r\n              // 7199254740992 / 9007199254740992 ~= 0.0008, i.e. 1 in 1251\r\n              if (v >= 9e15) {\r\n                b = crypto.getRandomValues(new Uint32Array(2));\r\n                a[i] = b[0];\r\n                a[i + 1] = b[1];\r\n              } else {\r\n\r\n                // 0 <= v <= 8999999999999999\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 2;\r\n              }\r\n            }\r\n            i = k / 2;\r\n\r\n          // Node.js supporting crypto.randomBytes.\r\n          } else if (crypto.randomBytes) {\r\n\r\n            // buffer\r\n            a = crypto.randomBytes(k *= 7);\r\n\r\n            for (; i < k;) {\r\n\r\n              // 0x1000000000000 is 2^48, 0x10000000000 is 2^40\r\n              // 0x100000000 is 2^32, 0x1000000 is 2^24\r\n              // 11111 11111111 11111111 11111111 11111111 11111111 11111111\r\n              // 0 <= v < 9007199254740992\r\n              v = ((a[i] & 31) * 0x1000000000000) + (a[i + 1] * 0x10000000000) +\r\n                 (a[i + 2] * 0x100000000) + (a[i + 3] * 0x1000000) +\r\n                 (a[i + 4] << 16) + (a[i + 5] << 8) + a[i + 6];\r\n\r\n              if (v >= 9e15) {\r\n                crypto.randomBytes(7).copy(a, i);\r\n              } else {\r\n\r\n                // 0 <= (v % 1e14) <= 99999999999999\r\n                c.push(v % 1e14);\r\n                i += 7;\r\n              }\r\n            }\r\n            i = k / 7;\r\n          } else {\r\n            CRYPTO = false;\r\n            throw Error\r\n             (bignumberError + 'crypto unavailable');\r\n          }\r\n        }\r\n\r\n        // Use Math.random.\r\n        if (!CRYPTO) {\r\n\r\n          for (; i < k;) {\r\n            v = random53bitInt();\r\n            if (v < 9e15) c[i++] = v % 1e14;\r\n          }\r\n        }\r\n\r\n        k = c[--i];\r\n        dp %= LOG_BASE;\r\n\r\n        // Convert trailing digits to zeros according to dp.\r\n        if (k && dp) {\r\n          v = POWS_TEN[LOG_BASE - dp];\r\n          c[i] = mathfloor(k / v) * v;\r\n        }\r\n\r\n        // Remove trailing elements which are zero.\r\n        for (; c[i] === 0; c.pop(), i--);\r\n\r\n        // Zero?\r\n        if (i < 0) {\r\n          c = [e = 0];\r\n        } else {\r\n\r\n          // Remove leading elements which are zero and adjust exponent accordingly.\r\n          for (e = -1 ; c[0] === 0; c.splice(0, 1), e -= LOG_BASE);\r\n\r\n          // Count the digits of the first element of c to determine leading zeros, and...\r\n          for (i = 1, v = c[0]; v >= 10; v /= 10, i++);\r\n\r\n          // adjust the exponent accordingly.\r\n          if (i < LOG_BASE) e -= LOG_BASE - i;\r\n        }\r\n\r\n        rand.e = e;\r\n        rand.c = c;\r\n        return rand;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the sum of the arguments.\r\n     *\r\n     * arguments {number|string|BigNumber}\r\n     */\r\n    BigNumber.sum = function () {\r\n      var i = 1,\r\n        args = arguments,\r\n        sum = new BigNumber(args[0]);\r\n      for (; i < args.length;) sum = sum.plus(args[i++]);\r\n      return sum;\r\n    };\r\n\r\n\r\n    // PRIVATE FUNCTIONS\r\n\r\n\r\n    // Called by BigNumber and BigNumber.prototype.toString.\r\n    convertBase = (function () {\r\n      var decimal = '0123456789';\r\n\r\n      /*\r\n       * Convert string of baseIn to an array of numbers of baseOut.\r\n       * Eg. toBaseOut('255', 10, 16) returns [15, 15].\r\n       * Eg. toBaseOut('ff', 16, 10) returns [2, 5, 5].\r\n       */\r\n      function toBaseOut(str, baseIn, baseOut, alphabet) {\r\n        var j,\r\n          arr = [0],\r\n          arrL,\r\n          i = 0,\r\n          len = str.length;\r\n\r\n        for (; i < len;) {\r\n          for (arrL = arr.length; arrL--; arr[arrL] *= baseIn);\r\n\r\n          arr[0] += alphabet.indexOf(str.charAt(i++));\r\n\r\n          for (j = 0; j < arr.length; j++) {\r\n\r\n            if (arr[j] > baseOut - 1) {\r\n              if (arr[j + 1] == null) arr[j + 1] = 0;\r\n              arr[j + 1] += arr[j] / baseOut | 0;\r\n              arr[j] %= baseOut;\r\n            }\r\n          }\r\n        }\r\n\r\n        return arr.reverse();\r\n      }\r\n\r\n      // Convert a numeric string of baseIn to a numeric string of baseOut.\r\n      // If the caller is toString, we are converting from base 10 to baseOut.\r\n      // If the caller is BigNumber, we are converting from baseIn to base 10.\r\n      return function (str, baseIn, baseOut, sign, callerIsToString) {\r\n        var alphabet, d, e, k, r, x, xc, y,\r\n          i = str.indexOf('.'),\r\n          dp = DECIMAL_PLACES,\r\n          rm = ROUNDING_MODE;\r\n\r\n        // Non-integer.\r\n        if (i >= 0) {\r\n          k = POW_PRECISION;\r\n\r\n          // Unlimited precision.\r\n          POW_PRECISION = 0;\r\n          str = str.replace('.', '');\r\n          y = new BigNumber(baseIn);\r\n          x = y.pow(str.length - i);\r\n          POW_PRECISION = k;\r\n\r\n          // Convert str as if an integer, then restore the fraction part by dividing the\r\n          // result by its base raised to a power.\r\n\r\n          y.c = toBaseOut(toFixedPoint(coeffToString(x.c), x.e, '0'),\r\n           10, baseOut, decimal);\r\n          y.e = y.c.length;\r\n        }\r\n\r\n        // Convert the number as integer.\r\n\r\n        xc = toBaseOut(str, baseIn, baseOut, callerIsToString\r\n         ? (alphabet = ALPHABET, decimal)\r\n         : (alphabet = decimal, ALPHABET));\r\n\r\n        // xc now represents str as an integer and converted to baseOut. e is the exponent.\r\n        e = k = xc.length;\r\n\r\n        // Remove trailing zeros.\r\n        for (; xc[--k] == 0; xc.pop());\r\n\r\n        // Zero?\r\n        if (!xc[0]) return alphabet.charAt(0);\r\n\r\n        // Does str represent an integer? If so, no need for the division.\r\n        if (i < 0) {\r\n          --e;\r\n        } else {\r\n          x.c = xc;\r\n          x.e = e;\r\n\r\n          // The sign is needed for correct rounding.\r\n          x.s = sign;\r\n          x = div(x, y, dp, rm, baseOut);\r\n          xc = x.c;\r\n          r = x.r;\r\n          e = x.e;\r\n        }\r\n\r\n        // xc now represents str converted to baseOut.\r\n\r\n        // THe index of the rounding digit.\r\n        d = e + dp + 1;\r\n\r\n        // The rounding digit: the digit to the right of the digit that may be rounded up.\r\n        i = xc[d];\r\n\r\n        // Look at the rounding digits and mode to determine whether to round up.\r\n\r\n        k = baseOut / 2;\r\n        r = r || d < 0 || xc[d + 1] != null;\r\n\r\n        r = rm < 4 ? (i != null || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n              : i > k || i == k &&(rm == 4 || r || rm == 6 && xc[d - 1] & 1 ||\r\n               rm == (x.s < 0 ? 8 : 7));\r\n\r\n        // If the index of the rounding digit is not greater than zero, or xc represents\r\n        // zero, then the result of the base conversion is zero or, if rounding up, a value\r\n        // such as 0.00001.\r\n        if (d < 1 || !xc[0]) {\r\n\r\n          // 1^-dp or 0\r\n          str = r ? toFixedPoint(alphabet.charAt(1), -dp, alphabet.charAt(0)) : alphabet.charAt(0);\r\n        } else {\r\n\r\n          // Truncate xc to the required number of decimal places.\r\n          xc.length = d;\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            // Rounding up may mean the previous digit has to be rounded up and so on.\r\n            for (--baseOut; ++xc[--d] > baseOut;) {\r\n              xc[d] = 0;\r\n\r\n              if (!d) {\r\n                ++e;\r\n                xc = [1].concat(xc);\r\n              }\r\n            }\r\n          }\r\n\r\n          // Determine trailing zeros.\r\n          for (k = xc.length; !xc[--k];);\r\n\r\n          // E.g. [4, 11, 15] becomes 4bf.\r\n          for (i = 0, str = ''; i <= k; str += alphabet.charAt(xc[i++]));\r\n\r\n          // Add leading zeros, decimal point and trailing zeros as required.\r\n          str = toFixedPoint(str, e, alphabet.charAt(0));\r\n        }\r\n\r\n        // The caller will add the sign.\r\n        return str;\r\n      };\r\n    })();\r\n\r\n\r\n    // Perform division in the specified base. Called by div and convertBase.\r\n    div = (function () {\r\n\r\n      // Assume non-zero x and k.\r\n      function multiply(x, k, base) {\r\n        var m, temp, xlo, xhi,\r\n          carry = 0,\r\n          i = x.length,\r\n          klo = k % SQRT_BASE,\r\n          khi = k / SQRT_BASE | 0;\r\n\r\n        for (x = x.slice(); i--;) {\r\n          xlo = x[i] % SQRT_BASE;\r\n          xhi = x[i] / SQRT_BASE | 0;\r\n          m = khi * xlo + xhi * klo;\r\n          temp = klo * xlo + ((m % SQRT_BASE) * SQRT_BASE) + carry;\r\n          carry = (temp / base | 0) + (m / SQRT_BASE | 0) + khi * xhi;\r\n          x[i] = temp % base;\r\n        }\r\n\r\n        if (carry) x = [carry].concat(x);\r\n\r\n        return x;\r\n      }\r\n\r\n      function compare(a, b, aL, bL) {\r\n        var i, cmp;\r\n\r\n        if (aL != bL) {\r\n          cmp = aL > bL ? 1 : -1;\r\n        } else {\r\n\r\n          for (i = cmp = 0; i < aL; i++) {\r\n\r\n            if (a[i] != b[i]) {\r\n              cmp = a[i] > b[i] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        return cmp;\r\n      }\r\n\r\n      function subtract(a, b, aL, base) {\r\n        var i = 0;\r\n\r\n        // Subtract b from a.\r\n        for (; aL--;) {\r\n          a[aL] -= i;\r\n          i = a[aL] < b[aL] ? 1 : 0;\r\n          a[aL] = i * base + a[aL] - b[aL];\r\n        }\r\n\r\n        // Remove leading zeros.\r\n        for (; !a[0] && a.length > 1; a.splice(0, 1));\r\n      }\r\n\r\n      // x: dividend, y: divisor.\r\n      return function (x, y, dp, rm, base) {\r\n        var cmp, e, i, more, n, prod, prodL, q, qc, rem, remL, rem0, xi, xL, yc0,\r\n          yL, yz,\r\n          s = x.s == y.s ? 1 : -1,\r\n          xc = x.c,\r\n          yc = y.c;\r\n\r\n        // Either NaN, Infinity or 0?\r\n        if (!xc || !xc[0] || !yc || !yc[0]) {\r\n\r\n          return new BigNumber(\r\n\r\n           // Return NaN if either NaN, or both Infinity or 0.\r\n           !x.s || !y.s || (xc ? yc && xc[0] == yc[0] : !yc) ? NaN :\r\n\r\n            // Return ±0 if x is ±0 or y is ±Infinity, or return ±Infinity as y is ±0.\r\n            xc && xc[0] == 0 || !yc ? s * 0 : s / 0\r\n         );\r\n        }\r\n\r\n        q = new BigNumber(s);\r\n        qc = q.c = [];\r\n        e = x.e - y.e;\r\n        s = dp + e + 1;\r\n\r\n        if (!base) {\r\n          base = BASE;\r\n          e = bitFloor(x.e / LOG_BASE) - bitFloor(y.e / LOG_BASE);\r\n          s = s / LOG_BASE | 0;\r\n        }\r\n\r\n        // Result exponent may be one less then the current value of e.\r\n        // The coefficients of the BigNumbers from convertBase may have trailing zeros.\r\n        for (i = 0; yc[i] == (xc[i] || 0); i++);\r\n\r\n        if (yc[i] > (xc[i] || 0)) e--;\r\n\r\n        if (s < 0) {\r\n          qc.push(1);\r\n          more = true;\r\n        } else {\r\n          xL = xc.length;\r\n          yL = yc.length;\r\n          i = 0;\r\n          s += 2;\r\n\r\n          // Normalise xc and yc so highest order digit of yc is >= base / 2.\r\n\r\n          n = mathfloor(base / (yc[0] + 1));\r\n\r\n          // Not necessary, but to handle odd bases where yc[0] == (base / 2) - 1.\r\n          // if (n > 1 || n++ == 1 && yc[0] < base / 2) {\r\n          if (n > 1) {\r\n            yc = multiply(yc, n, base);\r\n            xc = multiply(xc, n, base);\r\n            yL = yc.length;\r\n            xL = xc.length;\r\n          }\r\n\r\n          xi = yL;\r\n          rem = xc.slice(0, yL);\r\n          remL = rem.length;\r\n\r\n          // Add zeros to make remainder as long as divisor.\r\n          for (; remL < yL; rem[remL++] = 0);\r\n          yz = yc.slice();\r\n          yz = [0].concat(yz);\r\n          yc0 = yc[0];\r\n          if (yc[1] >= base / 2) yc0++;\r\n          // Not necessary, but to prevent trial digit n > base, when using base 3.\r\n          // else if (base == 3 && yc0 == 1) yc0 = 1 + 1e-15;\r\n\r\n          do {\r\n            n = 0;\r\n\r\n            // Compare divisor and remainder.\r\n            cmp = compare(yc, rem, yL, remL);\r\n\r\n            // If divisor < remainder.\r\n            if (cmp < 0) {\r\n\r\n              // Calculate trial digit, n.\r\n\r\n              rem0 = rem[0];\r\n              if (yL != remL) rem0 = rem0 * base + (rem[1] || 0);\r\n\r\n              // n is how many times the divisor goes into the current remainder.\r\n              n = mathfloor(rem0 / yc0);\r\n\r\n              //  Algorithm:\r\n              //  product = divisor multiplied by trial digit (n).\r\n              //  Compare product and remainder.\r\n              //  If product is greater than remainder:\r\n              //    Subtract divisor from product, decrement trial digit.\r\n              //  Subtract product from remainder.\r\n              //  If product was less than remainder at the last compare:\r\n              //    Compare new remainder and divisor.\r\n              //    If remainder is greater than divisor:\r\n              //      Subtract divisor from remainder, increment trial digit.\r\n\r\n              if (n > 1) {\r\n\r\n                // n may be > base only when base is 3.\r\n                if (n >= base) n = base - 1;\r\n\r\n                // product = divisor * trial digit.\r\n                prod = multiply(yc, n, base);\r\n                prodL = prod.length;\r\n                remL = rem.length;\r\n\r\n                // Compare product and remainder.\r\n                // If product > remainder then trial digit n too high.\r\n                // n is 1 too high about 5% of the time, and is not known to have\r\n                // ever been more than 1 too high.\r\n                while (compare(prod, rem, prodL, remL) == 1) {\r\n                  n--;\r\n\r\n                  // Subtract divisor from product.\r\n                  subtract(prod, yL < prodL ? yz : yc, prodL, base);\r\n                  prodL = prod.length;\r\n                  cmp = 1;\r\n                }\r\n              } else {\r\n\r\n                // n is 0 or 1, cmp is -1.\r\n                // If n is 0, there is no need to compare yc and rem again below,\r\n                // so change cmp to 1 to avoid it.\r\n                // If n is 1, leave cmp as -1, so yc and rem are compared again.\r\n                if (n == 0) {\r\n\r\n                  // divisor < remainder, so n must be at least 1.\r\n                  cmp = n = 1;\r\n                }\r\n\r\n                // product = divisor\r\n                prod = yc.slice();\r\n                prodL = prod.length;\r\n              }\r\n\r\n              if (prodL < remL) prod = [0].concat(prod);\r\n\r\n              // Subtract product from remainder.\r\n              subtract(rem, prod, remL, base);\r\n              remL = rem.length;\r\n\r\n               // If product was < remainder.\r\n              if (cmp == -1) {\r\n\r\n                // Compare divisor and new remainder.\r\n                // If divisor < new remainder, subtract divisor from remainder.\r\n                // Trial digit n too low.\r\n                // n is 1 too low about 5% of the time, and very rarely 2 too low.\r\n                while (compare(yc, rem, yL, remL) < 1) {\r\n                  n++;\r\n\r\n                  // Subtract divisor from remainder.\r\n                  subtract(rem, yL < remL ? yz : yc, remL, base);\r\n                  remL = rem.length;\r\n                }\r\n              }\r\n            } else if (cmp === 0) {\r\n              n++;\r\n              rem = [0];\r\n            } // else cmp === 1 and n will be 0\r\n\r\n            // Add the next digit, n, to the result array.\r\n            qc[i++] = n;\r\n\r\n            // Update the remainder.\r\n            if (rem[0]) {\r\n              rem[remL++] = xc[xi] || 0;\r\n            } else {\r\n              rem = [xc[xi]];\r\n              remL = 1;\r\n            }\r\n          } while ((xi++ < xL || rem[0] != null) && s--);\r\n\r\n          more = rem[0] != null;\r\n\r\n          // Leading zero?\r\n          if (!qc[0]) qc.splice(0, 1);\r\n        }\r\n\r\n        if (base == BASE) {\r\n\r\n          // To calculate q.e, first get the number of digits of qc[0].\r\n          for (i = 1, s = qc[0]; s >= 10; s /= 10, i++);\r\n\r\n          round(q, dp + (q.e = i + e * LOG_BASE - 1) + 1, rm, more);\r\n\r\n        // Caller is convertBase.\r\n        } else {\r\n          q.e = e;\r\n          q.r = +more;\r\n        }\r\n\r\n        return q;\r\n      };\r\n    })();\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of BigNumber n in fixed-point or exponential\r\n     * notation rounded to the specified decimal places or significant digits.\r\n     *\r\n     * n: a BigNumber.\r\n     * i: the index of the last digit required (i.e. the digit that may be rounded up).\r\n     * rm: the rounding mode.\r\n     * id: 1 (toExponential) or 2 (toPrecision).\r\n     */\r\n    function format(n, i, rm, id) {\r\n      var c0, e, ne, len, str;\r\n\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n\r\n      if (!n.c) return n.toString();\r\n\r\n      c0 = n.c[0];\r\n      ne = n.e;\r\n\r\n      if (i == null) {\r\n        str = coeffToString(n.c);\r\n        str = id == 1 || id == 2 && (ne <= TO_EXP_NEG || ne >= TO_EXP_POS)\r\n         ? toExponential(str, ne)\r\n         : toFixedPoint(str, ne, '0');\r\n      } else {\r\n        n = round(new BigNumber(n), i, rm);\r\n\r\n        // n.e may have changed if the value was rounded up.\r\n        e = n.e;\r\n\r\n        str = coeffToString(n.c);\r\n        len = str.length;\r\n\r\n        // toPrecision returns exponential notation if the number of significant digits\r\n        // specified is less than the number of digits necessary to represent the integer\r\n        // part of the value in fixed-point notation.\r\n\r\n        // Exponential notation.\r\n        if (id == 1 || id == 2 && (i <= e || e <= TO_EXP_NEG)) {\r\n\r\n          // Append zeros?\r\n          for (; len < i; str += '0', len++);\r\n          str = toExponential(str, e);\r\n\r\n        // Fixed-point notation.\r\n        } else {\r\n          i -= ne;\r\n          str = toFixedPoint(str, e, '0');\r\n\r\n          // Append zeros?\r\n          if (e + 1 > len) {\r\n            if (--i > 0) for (str += '.'; i--; str += '0');\r\n          } else {\r\n            i += e - len;\r\n            if (i > 0) {\r\n              if (e + 1 == len) str += '.';\r\n              for (; i--; str += '0');\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return n.s < 0 && c0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // Handle BigNumber.max and BigNumber.min.\r\n    function maxOrMin(args, method) {\r\n      var n,\r\n        i = 1,\r\n        m = new BigNumber(args[0]);\r\n\r\n      for (; i < args.length; i++) {\r\n        n = new BigNumber(args[i]);\r\n\r\n        // If any number is NaN, return NaN.\r\n        if (!n.s) {\r\n          m = n;\r\n          break;\r\n        } else if (method.call(m, n)) {\r\n          m = n;\r\n        }\r\n      }\r\n\r\n      return m;\r\n    }\r\n\r\n\r\n    /*\r\n     * Strip trailing zeros, calculate base 10 exponent and check against MIN_EXP and MAX_EXP.\r\n     * Called by minus, plus and times.\r\n     */\r\n    function normalise(n, c, e) {\r\n      var i = 1,\r\n        j = c.length;\r\n\r\n       // Remove trailing zeros.\r\n      for (; !c[--j]; c.pop());\r\n\r\n      // Calculate the base 10 exponent. First get the number of digits of c[0].\r\n      for (j = c[0]; j >= 10; j /= 10, i++);\r\n\r\n      // Overflow?\r\n      if ((e = i + e * LOG_BASE - 1) > MAX_EXP) {\r\n\r\n        // Infinity.\r\n        n.c = n.e = null;\r\n\r\n      // Underflow?\r\n      } else if (e < MIN_EXP) {\r\n\r\n        // Zero.\r\n        n.c = [n.e = 0];\r\n      } else {\r\n        n.e = e;\r\n        n.c = c;\r\n      }\r\n\r\n      return n;\r\n    }\r\n\r\n\r\n    // Handle values that fail the validity test in BigNumber.\r\n    parseNumeric = (function () {\r\n      var basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i,\r\n        dotAfter = /^([^.]+)\\.$/,\r\n        dotBefore = /^\\.([^.]+)$/,\r\n        isInfinityOrNaN = /^-?(Infinity|NaN)$/,\r\n        whitespaceOrPlus = /^\\s*\\+(?=[\\w.])|^\\s+|\\s+$/g;\r\n\r\n      return function (x, str, isNum, b) {\r\n        var base,\r\n          s = isNum ? str : str.replace(whitespaceOrPlus, '');\r\n\r\n        // No exception on ±Infinity or NaN.\r\n        if (isInfinityOrNaN.test(s)) {\r\n          x.s = isNaN(s) ? null : s < 0 ? -1 : 1;\r\n        } else {\r\n          if (!isNum) {\r\n\r\n            // basePrefix = /^(-?)0([xbo])(?=\\w[\\w.]*$)/i\r\n            s = s.replace(basePrefix, function (m, p1, p2) {\r\n              base = (p2 = p2.toLowerCase()) == 'x' ? 16 : p2 == 'b' ? 2 : 8;\r\n              return !b || b == base ? p1 : m;\r\n            });\r\n\r\n            if (b) {\r\n              base = b;\r\n\r\n              // E.g. '1.' to '1', '.1' to '0.1'\r\n              s = s.replace(dotAfter, '$1').replace(dotBefore, '0.$1');\r\n            }\r\n\r\n            if (str != s) return new BigNumber(s, base);\r\n          }\r\n\r\n          // '[BigNumber Error] Not a number: {n}'\r\n          // '[BigNumber Error] Not a base {b} number: {n}'\r\n          if (BigNumber.DEBUG) {\r\n            throw Error\r\n              (bignumberError + 'Not a' + (b ? ' base ' + b : '') + ' number: ' + str);\r\n          }\r\n\r\n          // NaN\r\n          x.s = null;\r\n        }\r\n\r\n        x.c = x.e = null;\r\n      }\r\n    })();\r\n\r\n\r\n    /*\r\n     * Round x to sd significant digits using rounding mode rm. Check for over/under-flow.\r\n     * If r is truthy, it is known that there are more digits after the rounding digit.\r\n     */\r\n    function round(x, sd, rm, r) {\r\n      var d, i, j, k, n, ni, rd,\r\n        xc = x.c,\r\n        pows10 = POWS_TEN;\r\n\r\n      // if x is not Infinity or NaN...\r\n      if (xc) {\r\n\r\n        // rd is the rounding digit, i.e. the digit after the digit that may be rounded up.\r\n        // n is a base 1e14 number, the value of the element of array x.c containing rd.\r\n        // ni is the index of n within x.c.\r\n        // d is the number of digits of n.\r\n        // i is the index of rd within n including leading zeros.\r\n        // j is the actual index of rd within n (if < 0, rd is a leading zero).\r\n        out: {\r\n\r\n          // Get the number of digits of the first element of xc.\r\n          for (d = 1, k = xc[0]; k >= 10; k /= 10, d++);\r\n          i = sd - d;\r\n\r\n          // If the rounding digit is in the first element of xc...\r\n          if (i < 0) {\r\n            i += LOG_BASE;\r\n            j = sd;\r\n            n = xc[ni = 0];\r\n\r\n            // Get the rounding digit at index j of n.\r\n            rd = n / pows10[d - j - 1] % 10 | 0;\r\n          } else {\r\n            ni = mathceil((i + 1) / LOG_BASE);\r\n\r\n            if (ni >= xc.length) {\r\n\r\n              if (r) {\r\n\r\n                // Needed by sqrt.\r\n                for (; xc.length <= ni; xc.push(0));\r\n                n = rd = 0;\r\n                d = 1;\r\n                i %= LOG_BASE;\r\n                j = i - LOG_BASE + 1;\r\n              } else {\r\n                break out;\r\n              }\r\n            } else {\r\n              n = k = xc[ni];\r\n\r\n              // Get the number of digits of n.\r\n              for (d = 1; k >= 10; k /= 10, d++);\r\n\r\n              // Get the index of rd within n.\r\n              i %= LOG_BASE;\r\n\r\n              // Get the index of rd within n, adjusted for leading zeros.\r\n              // The number of leading zeros of n is given by LOG_BASE - d.\r\n              j = i - LOG_BASE + d;\r\n\r\n              // Get the rounding digit at index j of n.\r\n              rd = j < 0 ? 0 : n / pows10[d - j - 1] % 10 | 0;\r\n            }\r\n          }\r\n\r\n          r = r || sd < 0 ||\r\n\r\n          // Are there any non-zero digits after the rounding digit?\r\n          // The expression  n % pows10[d - j - 1]  returns all digits of n to the right\r\n          // of the digit at j, e.g. if n is 908714 and j is 2, the expression gives 714.\r\n           xc[ni + 1] != null || (j < 0 ? n : n % pows10[d - j - 1]);\r\n\r\n          r = rm < 4\r\n           ? (rd || r) && (rm == 0 || rm == (x.s < 0 ? 3 : 2))\r\n           : rd > 5 || rd == 5 && (rm == 4 || r || rm == 6 &&\r\n\r\n            // Check whether the digit to the left of the rounding digit is odd.\r\n            ((i > 0 ? j > 0 ? n / pows10[d - j] : 0 : xc[ni - 1]) % 10) & 1 ||\r\n             rm == (x.s < 0 ? 8 : 7));\r\n\r\n          if (sd < 1 || !xc[0]) {\r\n            xc.length = 0;\r\n\r\n            if (r) {\r\n\r\n              // Convert sd to decimal places.\r\n              sd -= x.e + 1;\r\n\r\n              // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n              xc[0] = pows10[(LOG_BASE - sd % LOG_BASE) % LOG_BASE];\r\n              x.e = -sd || 0;\r\n            } else {\r\n\r\n              // Zero.\r\n              xc[0] = x.e = 0;\r\n            }\r\n\r\n            return x;\r\n          }\r\n\r\n          // Remove excess digits.\r\n          if (i == 0) {\r\n            xc.length = ni;\r\n            k = 1;\r\n            ni--;\r\n          } else {\r\n            xc.length = ni + 1;\r\n            k = pows10[LOG_BASE - i];\r\n\r\n            // E.g. 56700 becomes 56000 if 7 is the rounding digit.\r\n            // j > 0 means i > number of leading zeros of n.\r\n            xc[ni] = j > 0 ? mathfloor(n / pows10[d - j] % pows10[j]) * k : 0;\r\n          }\r\n\r\n          // Round up?\r\n          if (r) {\r\n\r\n            for (; ;) {\r\n\r\n              // If the digit to be rounded up is in the first element of xc...\r\n              if (ni == 0) {\r\n\r\n                // i will be the length of xc[0] before k is added.\r\n                for (i = 1, j = xc[0]; j >= 10; j /= 10, i++);\r\n                j = xc[0] += k;\r\n                for (k = 1; j >= 10; j /= 10, k++);\r\n\r\n                // if i != k the length has increased.\r\n                if (i != k) {\r\n                  x.e++;\r\n                  if (xc[0] == BASE) xc[0] = 1;\r\n                }\r\n\r\n                break;\r\n              } else {\r\n                xc[ni] += k;\r\n                if (xc[ni] != BASE) break;\r\n                xc[ni--] = 0;\r\n                k = 1;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Remove trailing zeros.\r\n          for (i = xc.length; xc[--i] === 0; xc.pop());\r\n        }\r\n\r\n        // Overflow? Infinity.\r\n        if (x.e > MAX_EXP) {\r\n          x.c = x.e = null;\r\n\r\n        // Underflow? Zero.\r\n        } else if (x.e < MIN_EXP) {\r\n          x.c = [x.e = 0];\r\n        }\r\n      }\r\n\r\n      return x;\r\n    }\r\n\r\n\r\n    function valueOf(n) {\r\n      var str,\r\n        e = n.e;\r\n\r\n      if (e === null) return n.toString();\r\n\r\n      str = coeffToString(n.c);\r\n\r\n      str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n        ? toExponential(str, e)\r\n        : toFixedPoint(str, e, '0');\r\n\r\n      return n.s < 0 ? '-' + str : str;\r\n    }\r\n\r\n\r\n    // PROTOTYPE/INSTANCE METHODS\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the absolute value of this BigNumber.\r\n     */\r\n    P.absoluteValue = P.abs = function () {\r\n      var x = new BigNumber(this);\r\n      if (x.s < 0) x.s = 1;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return\r\n     *   1 if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     *   -1 if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     *   0 if they have the same value,\r\n     *   or null if the value of either is NaN.\r\n     */\r\n    P.comparedTo = function (y, b) {\r\n      return compare(this, new BigNumber(y, b));\r\n    };\r\n\r\n\r\n    /*\r\n     * If dp is undefined or null or true or false, return the number of decimal places of the\r\n     * value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     *\r\n     * Otherwise, if dp is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of dp decimal places using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [dp] {number} Decimal places: integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.decimalPlaces = P.dp = function (dp, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), dp + x.e + 1, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      n = ((v = c.length - 1) - bitFloor(this.e / LOG_BASE)) * LOG_BASE;\r\n\r\n      // Subtract the number of trailing zeros of the last number.\r\n      if (v = c[v]) for (; v % 10 == 0; v /= 10, n--);\r\n      if (n < 0) n = 0;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n / 0 = I\r\n     *  n / N = N\r\n     *  n / I = 0\r\n     *  0 / n = 0\r\n     *  0 / 0 = N\r\n     *  0 / N = N\r\n     *  0 / I = 0\r\n     *  N / n = N\r\n     *  N / 0 = N\r\n     *  N / N = N\r\n     *  N / I = N\r\n     *  I / n = I\r\n     *  I / 0 = I\r\n     *  I / N = N\r\n     *  I / I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber divided by the value of\r\n     * BigNumber(y, b), rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.dividedBy = P.div = function (y, b) {\r\n      return div(this, new BigNumber(y, b), DECIMAL_PLACES, ROUNDING_MODE);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the integer part of dividing the value of this\r\n     * BigNumber by the value of BigNumber(y, b).\r\n     */\r\n    P.dividedToIntegerBy = P.idiv = function (y, b) {\r\n      return div(this, new BigNumber(y, b), 0, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a BigNumber whose value is the value of this BigNumber exponentiated by n.\r\n     *\r\n     * If m is present, return the result modulo m.\r\n     * If n is negative round according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     * If POW_PRECISION is non-zero and m is not present, round to POW_PRECISION using ROUNDING_MODE.\r\n     *\r\n     * The modular power operation works efficiently when x, n, and m are integers, otherwise it\r\n     * is equivalent to calculating x.exponentiatedBy(n).modulo(m) with a POW_PRECISION of 0.\r\n     *\r\n     * n {number|string|BigNumber} The exponent. An integer.\r\n     * [m] {number|string|BigNumber} The modulus.\r\n     *\r\n     * '[BigNumber Error] Exponent not an integer: {n}'\r\n     */\r\n    P.exponentiatedBy = P.pow = function (n, m) {\r\n      var half, isModExp, i, k, more, nIsBig, nIsNeg, nIsOdd, y,\r\n        x = this;\r\n\r\n      n = new BigNumber(n);\r\n\r\n      // Allow NaN and ±Infinity, but not other non-integers.\r\n      if (n.c && !n.isInteger()) {\r\n        throw Error\r\n          (bignumberError + 'Exponent not an integer: ' + valueOf(n));\r\n      }\r\n\r\n      if (m != null) m = new BigNumber(m);\r\n\r\n      // Exponent of MAX_SAFE_INTEGER is 15.\r\n      nIsBig = n.e > 14;\r\n\r\n      // If x is NaN, ±Infinity, ±0 or ±1, or n is ±Infinity, NaN or ±0.\r\n      if (!x.c || !x.c[0] || x.c[0] == 1 && !x.e && x.c.length == 1 || !n.c || !n.c[0]) {\r\n\r\n        // The sign of the result of pow when x is negative depends on the evenness of n.\r\n        // If +n overflows to ±Infinity, the evenness of n would be not be known.\r\n        y = new BigNumber(Math.pow(+valueOf(x), nIsBig ? 2 - isOdd(n) : +valueOf(n)));\r\n        return m ? y.mod(m) : y;\r\n      }\r\n\r\n      nIsNeg = n.s < 0;\r\n\r\n      if (m) {\r\n\r\n        // x % m returns NaN if abs(m) is zero, or m is NaN.\r\n        if (m.c ? !m.c[0] : !m.s) return new BigNumber(NaN);\r\n\r\n        isModExp = !nIsNeg && x.isInteger() && m.isInteger();\r\n\r\n        if (isModExp) x = x.mod(m);\r\n\r\n      // Overflow to ±Infinity: >=2**1e10 or >=1.0000024**1e15.\r\n      // Underflow to ±0: <=0.79**1e10 or <=0.9999975**1e15.\r\n      } else if (n.e > 9 && (x.e > 0 || x.e < -1 || (x.e == 0\r\n        // [1, 240000000]\r\n        ? x.c[0] > 1 || nIsBig && x.c[1] >= 24e7\r\n        // [80000000000000]  [99999750000000]\r\n        : x.c[0] < 8e13 || nIsBig && x.c[0] <= 9999975e7))) {\r\n\r\n        // If x is negative and n is odd, k = -0, else k = 0.\r\n        k = x.s < 0 && isOdd(n) ? -0 : 0;\r\n\r\n        // If x >= 1, k = ±Infinity.\r\n        if (x.e > -1) k = 1 / k;\r\n\r\n        // If n is negative return ±0, else return ±Infinity.\r\n        return new BigNumber(nIsNeg ? 1 / k : k);\r\n\r\n      } else if (POW_PRECISION) {\r\n\r\n        // Truncating each coefficient array to a length of k after each multiplication\r\n        // equates to truncating significant digits to POW_PRECISION + [28, 41],\r\n        // i.e. there will be a minimum of 28 guard digits retained.\r\n        k = mathceil(POW_PRECISION / LOG_BASE + 2);\r\n      }\r\n\r\n      if (nIsBig) {\r\n        half = new BigNumber(0.5);\r\n        if (nIsNeg) n.s = 1;\r\n        nIsOdd = isOdd(n);\r\n      } else {\r\n        i = Math.abs(+valueOf(n));\r\n        nIsOdd = i % 2;\r\n      }\r\n\r\n      y = new BigNumber(ONE);\r\n\r\n      // Performs 54 loop iterations for n of 9007199254740991.\r\n      for (; ;) {\r\n\r\n        if (nIsOdd) {\r\n          y = y.times(x);\r\n          if (!y.c) break;\r\n\r\n          if (k) {\r\n            if (y.c.length > k) y.c.length = k;\r\n          } else if (isModExp) {\r\n            y = y.mod(m);    //y = y.minus(div(y, m, 0, MODULO_MODE).times(m));\r\n          }\r\n        }\r\n\r\n        if (i) {\r\n          i = mathfloor(i / 2);\r\n          if (i === 0) break;\r\n          nIsOdd = i % 2;\r\n        } else {\r\n          n = n.times(half);\r\n          round(n, n.e + 1, 1);\r\n\r\n          if (n.e > 14) {\r\n            nIsOdd = isOdd(n);\r\n          } else {\r\n            i = +valueOf(n);\r\n            if (i === 0) break;\r\n            nIsOdd = i % 2;\r\n          }\r\n        }\r\n\r\n        x = x.times(x);\r\n\r\n        if (k) {\r\n          if (x.c && x.c.length > k) x.c.length = k;\r\n        } else if (isModExp) {\r\n          x = x.mod(m);    //x = x.minus(div(x, m, 0, MODULO_MODE).times(m));\r\n        }\r\n      }\r\n\r\n      if (isModExp) return y;\r\n      if (nIsNeg) y = ONE.div(y);\r\n\r\n      return m ? y.mod(m) : k ? round(y, POW_PRECISION, ROUNDING_MODE, more) : y;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber rounded to an integer\r\n     * using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {rm}'\r\n     */\r\n    P.integerValue = function (rm) {\r\n      var n = new BigNumber(this);\r\n      if (rm == null) rm = ROUNDING_MODE;\r\n      else intCheck(rm, 0, 8);\r\n      return round(n, n.e + 1, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is equal to the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isEqualTo = P.eq = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is a finite number, otherwise return false.\r\n     */\r\n    P.isFinite = function () {\r\n      return !!this.c;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isGreaterThan = P.gt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is greater than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isGreaterThanOrEqualTo = P.gte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === 1 || b === 0;\r\n\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is an integer, otherwise return false.\r\n     */\r\n    P.isInteger = function () {\r\n      return !!this.c && bitFloor(this.e / LOG_BASE) > this.c.length - 2;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than the value of BigNumber(y, b),\r\n     * otherwise return false.\r\n     */\r\n    P.isLessThan = P.lt = function (y, b) {\r\n      return compare(this, new BigNumber(y, b)) < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is less than or equal to the value of\r\n     * BigNumber(y, b), otherwise return false.\r\n     */\r\n    P.isLessThanOrEqualTo = P.lte = function (y, b) {\r\n      return (b = compare(this, new BigNumber(y, b))) === -1 || b === 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is NaN, otherwise return false.\r\n     */\r\n    P.isNaN = function () {\r\n      return !this.s;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is negative, otherwise return false.\r\n     */\r\n    P.isNegative = function () {\r\n      return this.s < 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is positive, otherwise return false.\r\n     */\r\n    P.isPositive = function () {\r\n      return this.s > 0;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return true if the value of this BigNumber is 0 or -0, otherwise return false.\r\n     */\r\n    P.isZero = function () {\r\n      return !!this.c && this.c[0] == 0;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n - 0 = n\r\n     *  n - N = N\r\n     *  n - I = -I\r\n     *  0 - n = -n\r\n     *  0 - 0 = 0\r\n     *  0 - N = N\r\n     *  0 - I = -I\r\n     *  N - n = N\r\n     *  N - 0 = N\r\n     *  N - N = N\r\n     *  N - I = N\r\n     *  I - n = I\r\n     *  I - 0 = I\r\n     *  I - N = N\r\n     *  I - I = N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber minus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.minus = function (y, b) {\r\n      var i, j, t, xLTy,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n      if (a != b) {\r\n        y.s = -b;\r\n        return x.plus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Either Infinity?\r\n        if (!xc || !yc) return xc ? (y.s = -b, y) : new BigNumber(yc ? x : NaN);\r\n\r\n        // Either zero?\r\n        if (!xc[0] || !yc[0]) {\r\n\r\n          // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n          return yc[0] ? (y.s = -b, y) : new BigNumber(xc[0] ? x :\r\n\r\n           // IEEE 754 (2008) 6.3: n - n = -0 when rounding to -Infinity\r\n           ROUNDING_MODE == 3 ? -0 : 0);\r\n        }\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Determine which is the bigger number.\r\n      if (a = xe - ye) {\r\n\r\n        if (xLTy = a < 0) {\r\n          a = -a;\r\n          t = xc;\r\n        } else {\r\n          ye = xe;\r\n          t = yc;\r\n        }\r\n\r\n        t.reverse();\r\n\r\n        // Prepend zeros to equalise exponents.\r\n        for (b = a; b--; t.push(0));\r\n        t.reverse();\r\n      } else {\r\n\r\n        // Exponents equal. Check digit by digit.\r\n        j = (xLTy = (a = xc.length) < (b = yc.length)) ? a : b;\r\n\r\n        for (a = b = 0; b < j; b++) {\r\n\r\n          if (xc[b] != yc[b]) {\r\n            xLTy = xc[b] < yc[b];\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // x < y? Point xc to the array of the bigger number.\r\n      if (xLTy) {\r\n        t = xc;\r\n        xc = yc;\r\n        yc = t;\r\n        y.s = -y.s;\r\n      }  \r\n\r\n      b = (j = yc.length) - (i = xc.length);\r\n\r\n      // Append zeros to xc if shorter.\r\n      // No need to add zeros to yc if shorter as subtract only needs to start at yc.length.\r\n      if (b > 0) for (; b--; xc[i++] = 0);\r\n      b = BASE - 1;\r\n\r\n      // Subtract yc from xc.\r\n      for (; j > a;) {\r\n\r\n        if (xc[--j] < yc[j]) {\r\n          for (i = j; i && !xc[--i]; xc[i] = b);\r\n          --xc[i];\r\n          xc[j] += BASE;\r\n        }\r\n\r\n        xc[j] -= yc[j];\r\n      }\r\n\r\n      // Remove leading zeros and adjust exponent accordingly.\r\n      for (; xc[0] == 0; xc.splice(0, 1), --ye);\r\n\r\n      // Zero?\r\n      if (!xc[0]) {\r\n\r\n        // Following IEEE 754 (2008) 6.3,\r\n        // n - n = +0  but  n - n = -0  when rounding towards -Infinity.\r\n        y.s = ROUNDING_MODE == 3 ? -1 : 1;\r\n        y.c = [y.e = 0];\r\n        return y;\r\n      }\r\n\r\n      // No need to check for Infinity as +x - +y != Infinity && -x - -y != Infinity\r\n      // for finite x and y.\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     *   n % 0 =  N\r\n     *   n % N =  N\r\n     *   n % I =  n\r\n     *   0 % n =  0\r\n     *  -0 % n = -0\r\n     *   0 % 0 =  N\r\n     *   0 % N =  N\r\n     *   0 % I =  0\r\n     *   N % n =  N\r\n     *   N % 0 =  N\r\n     *   N % N =  N\r\n     *   N % I =  N\r\n     *   I % n =  N\r\n     *   I % 0 =  N\r\n     *   I % N =  N\r\n     *   I % I =  N\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber modulo the value of\r\n     * BigNumber(y, b). The result depends on the value of MODULO_MODE.\r\n     */\r\n    P.modulo = P.mod = function (y, b) {\r\n      var q, s,\r\n        x = this;\r\n\r\n      y = new BigNumber(y, b);\r\n\r\n      // Return NaN if x is Infinity or NaN, or y is NaN or zero.\r\n      if (!x.c || !y.s || y.c && !y.c[0]) {\r\n        return new BigNumber(NaN);\r\n\r\n      // Return x if y is Infinity or x is zero.\r\n      } else if (!y.c || x.c && !x.c[0]) {\r\n        return new BigNumber(x);\r\n      }\r\n\r\n      if (MODULO_MODE == 9) {\r\n\r\n        // Euclidian division: q = sign(y) * floor(x / abs(y))\r\n        // r = x - qy    where  0 <= r < abs(y)\r\n        s = y.s;\r\n        y.s = 1;\r\n        q = div(x, y, 0, 3);\r\n        y.s = s;\r\n        q.s *= s;\r\n      } else {\r\n        q = div(x, y, 0, MODULO_MODE);\r\n      }\r\n\r\n      y = x.minus(q.times(y));\r\n\r\n      // To match JavaScript %, ensure sign of zero is sign of dividend.\r\n      if (!y.c[0] && MODULO_MODE == 1) y.s = x.s;\r\n\r\n      return y;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n * 0 = 0\r\n     *  n * N = N\r\n     *  n * I = I\r\n     *  0 * n = 0\r\n     *  0 * 0 = 0\r\n     *  0 * N = N\r\n     *  0 * I = N\r\n     *  N * n = N\r\n     *  N * 0 = N\r\n     *  N * N = N\r\n     *  N * I = N\r\n     *  I * n = I\r\n     *  I * 0 = N\r\n     *  I * N = N\r\n     *  I * I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber multiplied by the value\r\n     * of BigNumber(y, b).\r\n     */\r\n    P.multipliedBy = P.times = function (y, b) {\r\n      var c, e, i, j, k, m, xcL, xlo, xhi, ycL, ylo, yhi, zc,\r\n        base, sqrtBase,\r\n        x = this,\r\n        xc = x.c,\r\n        yc = (y = new BigNumber(y, b)).c;\r\n\r\n      // Either NaN, ±Infinity or ±0?\r\n      if (!xc || !yc || !xc[0] || !yc[0]) {\r\n\r\n        // Return NaN if either is NaN, or one is 0 and the other is Infinity.\r\n        if (!x.s || !y.s || xc && !xc[0] && !yc || yc && !yc[0] && !xc) {\r\n          y.c = y.e = y.s = null;\r\n        } else {\r\n          y.s *= x.s;\r\n\r\n          // Return ±Infinity if either is ±Infinity.\r\n          if (!xc || !yc) {\r\n            y.c = y.e = null;\r\n\r\n          // Return ±0 if either is ±0.\r\n          } else {\r\n            y.c = [0];\r\n            y.e = 0;\r\n          }\r\n        }\r\n\r\n        return y;\r\n      }\r\n\r\n      e = bitFloor(x.e / LOG_BASE) + bitFloor(y.e / LOG_BASE);\r\n      y.s *= x.s;\r\n      xcL = xc.length;\r\n      ycL = yc.length;\r\n\r\n      // Ensure xc points to longer array and xcL to its length.\r\n      if (xcL < ycL) {\r\n        zc = xc;\r\n        xc = yc;\r\n        yc = zc;\r\n        i = xcL;\r\n        xcL = ycL;\r\n        ycL = i;\r\n      }  \r\n\r\n      // Initialise the result array with zeros.\r\n      for (i = xcL + ycL, zc = []; i--; zc.push(0));\r\n\r\n      base = BASE;\r\n      sqrtBase = SQRT_BASE;\r\n\r\n      for (i = ycL; --i >= 0;) {\r\n        c = 0;\r\n        ylo = yc[i] % sqrtBase;\r\n        yhi = yc[i] / sqrtBase | 0;\r\n\r\n        for (k = xcL, j = i + k; j > i;) {\r\n          xlo = xc[--k] % sqrtBase;\r\n          xhi = xc[k] / sqrtBase | 0;\r\n          m = yhi * xlo + xhi * ylo;\r\n          xlo = ylo * xlo + ((m % sqrtBase) * sqrtBase) + zc[j] + c;\r\n          c = (xlo / base | 0) + (m / sqrtBase | 0) + yhi * xhi;\r\n          zc[j--] = xlo % base;\r\n        }\r\n\r\n        zc[j] = c;\r\n      }\r\n\r\n      if (c) {\r\n        ++e;\r\n      } else {\r\n        zc.splice(0, 1);\r\n      }\r\n\r\n      return normalise(y, zc, e);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber negated,\r\n     * i.e. multiplied by -1.\r\n     */\r\n    P.negated = function () {\r\n      var x = new BigNumber(this);\r\n      x.s = -x.s || null;\r\n      return x;\r\n    };\r\n\r\n\r\n    /*\r\n     *  n + 0 = n\r\n     *  n + N = N\r\n     *  n + I = I\r\n     *  0 + n = n\r\n     *  0 + 0 = 0\r\n     *  0 + N = N\r\n     *  0 + I = I\r\n     *  N + n = N\r\n     *  N + 0 = N\r\n     *  N + N = N\r\n     *  N + I = N\r\n     *  I + n = I\r\n     *  I + 0 = I\r\n     *  I + N = N\r\n     *  I + I = I\r\n     *\r\n     * Return a new BigNumber whose value is the value of this BigNumber plus the value of\r\n     * BigNumber(y, b).\r\n     */\r\n    P.plus = function (y, b) {\r\n      var t,\r\n        x = this,\r\n        a = x.s;\r\n\r\n      y = new BigNumber(y, b);\r\n      b = y.s;\r\n\r\n      // Either NaN?\r\n      if (!a || !b) return new BigNumber(NaN);\r\n\r\n      // Signs differ?\r\n       if (a != b) {\r\n        y.s = -b;\r\n        return x.minus(y);\r\n      }\r\n\r\n      var xe = x.e / LOG_BASE,\r\n        ye = y.e / LOG_BASE,\r\n        xc = x.c,\r\n        yc = y.c;\r\n\r\n      if (!xe || !ye) {\r\n\r\n        // Return ±Infinity if either ±Infinity.\r\n        if (!xc || !yc) return new BigNumber(a / 0);\r\n\r\n        // Either zero?\r\n        // Return y if y is non-zero, x if x is non-zero, or zero if both are zero.\r\n        if (!xc[0] || !yc[0]) return yc[0] ? y : new BigNumber(xc[0] ? x : a * 0);\r\n      }\r\n\r\n      xe = bitFloor(xe);\r\n      ye = bitFloor(ye);\r\n      xc = xc.slice();\r\n\r\n      // Prepend zeros to equalise exponents. Faster to use reverse then do unshifts.\r\n      if (a = xe - ye) {\r\n        if (a > 0) {\r\n          ye = xe;\r\n          t = yc;\r\n        } else {\r\n          a = -a;\r\n          t = xc;\r\n        }\r\n\r\n        t.reverse();\r\n        for (; a--; t.push(0));\r\n        t.reverse();\r\n      }\r\n\r\n      a = xc.length;\r\n      b = yc.length;\r\n\r\n      // Point xc to the longer array, and b to the shorter length.\r\n      if (a - b < 0) {\r\n        t = yc;\r\n        yc = xc;\r\n        xc = t;\r\n        b = a;\r\n      }  \r\n\r\n      // Only start adding at yc.length - 1 as the further digits of xc can be ignored.\r\n      for (a = 0; b;) {\r\n        a = (xc[--b] = xc[b] + yc[b] + a) / BASE | 0;\r\n        xc[b] = BASE === xc[b] ? 0 : xc[b] % BASE;\r\n      }\r\n\r\n      if (a) {\r\n        xc = [a].concat(xc);\r\n        ++ye;\r\n      }\r\n\r\n      // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n      // ye = MAX_EXP + 1 possible\r\n      return normalise(y, xc, ye);\r\n    };\r\n\r\n\r\n    /*\r\n     * If sd is undefined or null or true or false, return the number of significant digits of\r\n     * the value of this BigNumber, or null if the value of this BigNumber is ±Infinity or NaN.\r\n     * If sd is true include integer-part trailing zeros in the count.\r\n     *\r\n     * Otherwise, if sd is a number, return a new BigNumber whose value is the value of this\r\n     * BigNumber rounded to a maximum of sd significant digits using rounding mode rm, or\r\n     * ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * sd {number|boolean} number: significant digits: integer, 1 to MAX inclusive.\r\n     *                     boolean: whether to count integer-part trailing zeros: true or false.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.precision = P.sd = function (sd, rm) {\r\n      var c, n, v,\r\n        x = this;\r\n\r\n      if (sd != null && sd !== !!sd) {\r\n        intCheck(sd, 1, MAX);\r\n        if (rm == null) rm = ROUNDING_MODE;\r\n        else intCheck(rm, 0, 8);\r\n\r\n        return round(new BigNumber(x), sd, rm);\r\n      }\r\n\r\n      if (!(c = x.c)) return null;\r\n      v = c.length - 1;\r\n      n = v * LOG_BASE + 1;\r\n\r\n      if (v = c[v]) {\r\n\r\n        // Subtract the number of trailing zeros of the last element.\r\n        for (; v % 10 == 0; v /= 10, n--);\r\n\r\n        // Add the number of digits of the first element.\r\n        for (v = c[0]; v >= 10; v /= 10, n++);\r\n      }\r\n\r\n      if (sd && x.e + 1 > n) n = x.e + 1;\r\n\r\n      return n;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a new BigNumber whose value is the value of this BigNumber shifted by k places\r\n     * (powers of 10). Shift to the right if n > 0, and to the left if n < 0.\r\n     *\r\n     * k {number} Integer, -MAX_SAFE_INTEGER to MAX_SAFE_INTEGER inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {k}'\r\n     */\r\n    P.shiftedBy = function (k) {\r\n      intCheck(k, -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER);\r\n      return this.times('1e' + k);\r\n    };\r\n\r\n\r\n    /*\r\n     *  sqrt(-n) =  N\r\n     *  sqrt(N) =  N\r\n     *  sqrt(-I) =  N\r\n     *  sqrt(I) =  I\r\n     *  sqrt(0) =  0\r\n     *  sqrt(-0) = -0\r\n     *\r\n     * Return a new BigNumber whose value is the square root of the value of this BigNumber,\r\n     * rounded according to DECIMAL_PLACES and ROUNDING_MODE.\r\n     */\r\n    P.squareRoot = P.sqrt = function () {\r\n      var m, n, r, rep, t,\r\n        x = this,\r\n        c = x.c,\r\n        s = x.s,\r\n        e = x.e,\r\n        dp = DECIMAL_PLACES + 4,\r\n        half = new BigNumber('0.5');\r\n\r\n      // Negative/NaN/Infinity/zero?\r\n      if (s !== 1 || !c || !c[0]) {\r\n        return new BigNumber(!s || s < 0 && (!c || c[0]) ? NaN : c ? x : 1 / 0);\r\n      }\r\n\r\n      // Initial estimate.\r\n      s = Math.sqrt(+valueOf(x));\r\n\r\n      // Math.sqrt underflow/overflow?\r\n      // Pass x to Math.sqrt as integer, then adjust the exponent of the result.\r\n      if (s == 0 || s == 1 / 0) {\r\n        n = coeffToString(c);\r\n        if ((n.length + e) % 2 == 0) n += '0';\r\n        s = Math.sqrt(+n);\r\n        e = bitFloor((e + 1) / 2) - (e < 0 || e % 2);\r\n\r\n        if (s == 1 / 0) {\r\n          n = '5e' + e;\r\n        } else {\r\n          n = s.toExponential();\r\n          n = n.slice(0, n.indexOf('e') + 1) + e;\r\n        }\r\n\r\n        r = new BigNumber(n);\r\n      } else {\r\n        r = new BigNumber(s + '');\r\n      }\r\n\r\n      // Check for zero.\r\n      // r could be zero if MIN_EXP is changed after the this value was created.\r\n      // This would cause a division by zero (x/t) and hence Infinity below, which would cause\r\n      // coeffToString to throw.\r\n      if (r.c[0]) {\r\n        e = r.e;\r\n        s = e + dp;\r\n        if (s < 3) s = 0;\r\n\r\n        // Newton-Raphson iteration.\r\n        for (; ;) {\r\n          t = r;\r\n          r = half.times(t.plus(div(x, t, dp, 1)));\r\n\r\n          if (coeffToString(t.c).slice(0, s) === (n = coeffToString(r.c)).slice(0, s)) {\r\n\r\n            // The exponent of r may here be one less than the final result exponent,\r\n            // e.g 0.0009999 (e-4) --> 0.001 (e-3), so adjust s so the rounding digits\r\n            // are indexed correctly.\r\n            if (r.e < e) --s;\r\n            n = n.slice(s - 3, s + 1);\r\n\r\n            // The 4th rounding digit may be in error by -1 so if the 4 rounding digits\r\n            // are 9999 or 4999 (i.e. approaching a rounding boundary) continue the\r\n            // iteration.\r\n            if (n == '9999' || !rep && n == '4999') {\r\n\r\n              // On the first iteration only, check to see if rounding up gives the\r\n              // exact result as the nines may infinitely repeat.\r\n              if (!rep) {\r\n                round(t, t.e + DECIMAL_PLACES + 2, 0);\r\n\r\n                if (t.times(t).eq(x)) {\r\n                  r = t;\r\n                  break;\r\n                }\r\n              }\r\n\r\n              dp += 4;\r\n              s += 4;\r\n              rep = 1;\r\n            } else {\r\n\r\n              // If rounding digits are null, 0{0,4} or 50{0,3}, check for exact\r\n              // result. If not, then there are further digits and m will be truthy.\r\n              if (!+n || !+n.slice(1) && n.charAt(0) == '5') {\r\n\r\n                // Truncate to the first rounding digit.\r\n                round(r, r.e + DECIMAL_PLACES + 2, 1);\r\n                m = !r.times(r).eq(x);\r\n              }\r\n\r\n              break;\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      return round(r, r.e + DECIMAL_PLACES + 1, ROUNDING_MODE, m);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in exponential notation and\r\n     * rounded using ROUNDING_MODE to dp fixed decimal places.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toExponential = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp++;\r\n      }\r\n      return format(this, dp, rm, 1);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounding\r\n     * to dp fixed decimal places using rounding mode rm, or ROUNDING_MODE if rm is omitted.\r\n     *\r\n     * Note: as with JavaScript's number type, (-0).toFixed(0) is '0',\r\n     * but e.g. (-0.00001).toFixed(0) is '-0'.\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     */\r\n    P.toFixed = function (dp, rm) {\r\n      if (dp != null) {\r\n        intCheck(dp, 0, MAX);\r\n        dp = dp + this.e + 1;\r\n      }\r\n      return format(this, dp, rm);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in fixed-point notation rounded\r\n     * using rm or ROUNDING_MODE to dp decimal places, and formatted according to the properties\r\n     * of the format or FORMAT object (see BigNumber.set).\r\n     *\r\n     * The formatting object may contain some or all of the properties shown below.\r\n     *\r\n     * FORMAT = {\r\n     *   prefix: '',\r\n     *   groupSize: 3,\r\n     *   secondaryGroupSize: 0,\r\n     *   groupSeparator: ',',\r\n     *   decimalSeparator: '.',\r\n     *   fractionGroupSize: 0,\r\n     *   fractionGroupSeparator: '\\xA0',      // non-breaking space\r\n     *   suffix: ''\r\n     * };\r\n     *\r\n     * [dp] {number} Decimal places. Integer, 0 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     * [format] {object} Formatting options. See FORMAT pbject above.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {dp|rm}'\r\n     * '[BigNumber Error] Argument not an object: {format}'\r\n     */\r\n    P.toFormat = function (dp, rm, format) {\r\n      var str,\r\n        x = this;\r\n\r\n      if (format == null) {\r\n        if (dp != null && rm && typeof rm == 'object') {\r\n          format = rm;\r\n          rm = null;\r\n        } else if (dp && typeof dp == 'object') {\r\n          format = dp;\r\n          dp = rm = null;\r\n        } else {\r\n          format = FORMAT;\r\n        }\r\n      } else if (typeof format != 'object') {\r\n        throw Error\r\n          (bignumberError + 'Argument not an object: ' + format);\r\n      }\r\n\r\n      str = x.toFixed(dp, rm);\r\n\r\n      if (x.c) {\r\n        var i,\r\n          arr = str.split('.'),\r\n          g1 = +format.groupSize,\r\n          g2 = +format.secondaryGroupSize,\r\n          groupSeparator = format.groupSeparator || '',\r\n          intPart = arr[0],\r\n          fractionPart = arr[1],\r\n          isNeg = x.s < 0,\r\n          intDigits = isNeg ? intPart.slice(1) : intPart,\r\n          len = intDigits.length;\r\n\r\n        if (g2) {\r\n          i = g1;\r\n          g1 = g2;\r\n          g2 = i;\r\n          len -= i;\r\n        }  \r\n\r\n        if (g1 > 0 && len > 0) {\r\n          i = len % g1 || g1;\r\n          intPart = intDigits.substr(0, i);\r\n          for (; i < len; i += g1) intPart += groupSeparator + intDigits.substr(i, g1);\r\n          if (g2 > 0) intPart += groupSeparator + intDigits.slice(i);\r\n          if (isNeg) intPart = '-' + intPart;\r\n        }\r\n\r\n        str = fractionPart\r\n         ? intPart + (format.decimalSeparator || '') + ((g2 = +format.fractionGroupSize)\r\n          ? fractionPart.replace(new RegExp('\\\\d{' + g2 + '}\\\\B', 'g'),\r\n           '$&' + (format.fractionGroupSeparator || ''))\r\n          : fractionPart)\r\n         : intPart;\r\n      }\r\n\r\n      return (format.prefix || '') + str + (format.suffix || '');\r\n    };\r\n\r\n\r\n    /*\r\n     * Return an array of two BigNumbers representing the value of this BigNumber as a simple\r\n     * fraction with an integer numerator and an integer denominator.\r\n     * The denominator will be a positive non-zero value less than or equal to the specified\r\n     * maximum denominator. If a maximum denominator is not specified, the denominator will be\r\n     * the lowest value necessary to represent the number exactly.\r\n     *\r\n     * [md] {number|string|BigNumber} Integer >= 1, or Infinity. The maximum denominator.\r\n     *\r\n     * '[BigNumber Error] Argument {not an integer|out of range} : {md}'\r\n     */\r\n    P.toFraction = function (md) {\r\n      var d, d0, d1, d2, e, exp, n, n0, n1, q, r, s,\r\n        x = this,\r\n        xc = x.c;\r\n\r\n      if (md != null) {\r\n        n = new BigNumber(md);\r\n\r\n        // Throw if md is less than one or is not an integer, unless it is Infinity.\r\n        if (!n.isInteger() && (n.c || n.s !== 1) || n.lt(ONE)) {\r\n          throw Error\r\n            (bignumberError + 'Argument ' +\r\n              (n.isInteger() ? 'out of range: ' : 'not an integer: ') + valueOf(n));\r\n        }\r\n      }\r\n\r\n      if (!xc) return new BigNumber(x);\r\n\r\n      d = new BigNumber(ONE);\r\n      n1 = d0 = new BigNumber(ONE);\r\n      d1 = n0 = new BigNumber(ONE);\r\n      s = coeffToString(xc);\r\n\r\n      // Determine initial denominator.\r\n      // d is a power of 10 and the minimum max denominator that specifies the value exactly.\r\n      e = d.e = s.length - x.e - 1;\r\n      d.c[0] = POWS_TEN[(exp = e % LOG_BASE) < 0 ? LOG_BASE + exp : exp];\r\n      md = !md || n.comparedTo(d) > 0 ? (e > 0 ? d : n1) : n;\r\n\r\n      exp = MAX_EXP;\r\n      MAX_EXP = 1 / 0;\r\n      n = new BigNumber(s);\r\n\r\n      // n0 = d1 = 0\r\n      n0.c[0] = 0;\r\n\r\n      for (; ;)  {\r\n        q = div(n, d, 0, 1);\r\n        d2 = d0.plus(q.times(d1));\r\n        if (d2.comparedTo(md) == 1) break;\r\n        d0 = d1;\r\n        d1 = d2;\r\n        n1 = n0.plus(q.times(d2 = n1));\r\n        n0 = d2;\r\n        d = n.minus(q.times(d2 = d));\r\n        n = d2;\r\n      }\r\n\r\n      d2 = div(md.minus(d0), d1, 0, 1);\r\n      n0 = n0.plus(d2.times(n1));\r\n      d0 = d0.plus(d2.times(d1));\r\n      n0.s = n1.s = x.s;\r\n      e = e * 2;\r\n\r\n      // Determine which fraction is closer to x, n0/d0 or n1/d1\r\n      r = div(n1, d1, e, ROUNDING_MODE).minus(x).abs().comparedTo(\r\n          div(n0, d0, e, ROUNDING_MODE).minus(x).abs()) < 1 ? [n1, d1] : [n0, d0];\r\n\r\n      MAX_EXP = exp;\r\n\r\n      return r;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return the value of this BigNumber converted to a number primitive.\r\n     */\r\n    P.toNumber = function () {\r\n      return +valueOf(this);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber rounded to sd significant digits\r\n     * using rounding mode rm or ROUNDING_MODE. If sd is less than the number of digits\r\n     * necessary to represent the integer part of the value in fixed-point notation, then use\r\n     * exponential notation.\r\n     *\r\n     * [sd] {number} Significant digits. Integer, 1 to MAX inclusive.\r\n     * [rm] {number} Rounding mode. Integer, 0 to 8 inclusive.\r\n     *\r\n     * '[BigNumber Error] Argument {not a primitive number|not an integer|out of range}: {sd|rm}'\r\n     */\r\n    P.toPrecision = function (sd, rm) {\r\n      if (sd != null) intCheck(sd, 1, MAX);\r\n      return format(this, sd, rm, 2);\r\n    };\r\n\r\n\r\n    /*\r\n     * Return a string representing the value of this BigNumber in base b, or base 10 if b is\r\n     * omitted. If a base is specified, including base 10, round according to DECIMAL_PLACES and\r\n     * ROUNDING_MODE. If a base is not specified, and this BigNumber has a positive exponent\r\n     * that is equal to or greater than TO_EXP_POS, or a negative exponent equal to or less than\r\n     * TO_EXP_NEG, return exponential notation.\r\n     *\r\n     * [b] {number} Integer, 2 to ALPHABET.length inclusive.\r\n     *\r\n     * '[BigNumber Error] Base {not a primitive number|not an integer|out of range}: {b}'\r\n     */\r\n    P.toString = function (b) {\r\n      var str,\r\n        n = this,\r\n        s = n.s,\r\n        e = n.e;\r\n\r\n      // Infinity or NaN?\r\n      if (e === null) {\r\n        if (s) {\r\n          str = 'Infinity';\r\n          if (s < 0) str = '-' + str;\r\n        } else {\r\n          str = 'NaN';\r\n        }\r\n      } else {\r\n        if (b == null) {\r\n          str = e <= TO_EXP_NEG || e >= TO_EXP_POS\r\n           ? toExponential(coeffToString(n.c), e)\r\n           : toFixedPoint(coeffToString(n.c), e, '0');\r\n        } else if (b === 10 && alphabetHasNormalDecimalDigits) {\r\n          n = round(new BigNumber(n), DECIMAL_PLACES + e + 1, ROUNDING_MODE);\r\n          str = toFixedPoint(coeffToString(n.c), n.e, '0');\r\n        } else {\r\n          intCheck(b, 2, ALPHABET.length, 'Base');\r\n          str = convertBase(toFixedPoint(coeffToString(n.c), e, '0'), 10, b, s, true);\r\n        }\r\n\r\n        if (s < 0 && n.c[0]) str = '-' + str;\r\n      }\r\n\r\n      return str;\r\n    };\r\n\r\n\r\n    /*\r\n     * Return as toString, but do not accept a base argument, and include the minus sign for\r\n     * negative zero.\r\n     */\r\n    P.valueOf = P.toJSON = function () {\r\n      return valueOf(this);\r\n    };\r\n\r\n\r\n    P._isBigNumber = true;\r\n\r\n    if (configObject != null) BigNumber.set(configObject);\r\n\r\n    return BigNumber;\r\n  }\r\n\r\n\r\n  // PRIVATE HELPER FUNCTIONS\r\n\r\n  // These functions don't need access to variables,\r\n  // e.g. DECIMAL_PLACES, in the scope of the `clone` function above.\r\n\r\n\r\n  function bitFloor(n) {\r\n    var i = n | 0;\r\n    return n > 0 || n === i ? i : i - 1;\r\n  }\r\n\r\n\r\n  // Return a coefficient array as a string of base 10 digits.\r\n  function coeffToString(a) {\r\n    var s, z,\r\n      i = 1,\r\n      j = a.length,\r\n      r = a[0] + '';\r\n\r\n    for (; i < j;) {\r\n      s = a[i++] + '';\r\n      z = LOG_BASE - s.length;\r\n      for (; z--; s = '0' + s);\r\n      r += s;\r\n    }\r\n\r\n    // Determine trailing zeros.\r\n    for (j = r.length; r.charCodeAt(--j) === 48;);\r\n\r\n    return r.slice(0, j + 1 || 1);\r\n  }\r\n\r\n\r\n  // Compare the value of BigNumbers x and y.\r\n  function compare(x, y) {\r\n    var a, b,\r\n      xc = x.c,\r\n      yc = y.c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either NaN?\r\n    if (!i || !j) return null;\r\n\r\n    a = xc && !xc[0];\r\n    b = yc && !yc[0];\r\n\r\n    // Either zero?\r\n    if (a || b) return a ? b ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    a = i < 0;\r\n    b = k == l;\r\n\r\n    // Either Infinity?\r\n    if (!xc || !yc) return b ? 0 : !xc ^ a ? 1 : -1;\r\n\r\n    // Compare exponents.\r\n    if (!b) return k > l ^ a ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = 0; i < j; i++) if (xc[i] != yc[i]) return xc[i] > yc[i] ^ a ? 1 : -1;\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ a ? 1 : -1;\r\n  }\r\n\r\n\r\n  /*\r\n   * Check that n is a primitive number, an integer, and in range, otherwise throw.\r\n   */\r\n  function intCheck(n, min, max, name) {\r\n    if (n < min || n > max || n !== mathfloor(n)) {\r\n      throw Error\r\n       (bignumberError + (name || 'Argument') + (typeof n == 'number'\r\n         ? n < min || n > max ? ' out of range: ' : ' not an integer: '\r\n         : ' not a primitive number: ') + String(n));\r\n    }\r\n  }\r\n\r\n\r\n  // Assumes finite n.\r\n  function isOdd(n) {\r\n    var k = n.c.length - 1;\r\n    return bitFloor(n.e / LOG_BASE) == k && n.c[k] % 2 != 0;\r\n  }\r\n\r\n\r\n  function toExponential(str, e) {\r\n    return (str.length > 1 ? str.charAt(0) + '.' + str.slice(1) : str) +\r\n     (e < 0 ? 'e' : 'e+') + e;\r\n  }\r\n\r\n\r\n  function toFixedPoint(str, e, z) {\r\n    var len, zs;\r\n\r\n    // Negative exponent?\r\n    if (e < 0) {\r\n\r\n      // Prepend zeros.\r\n      for (zs = z + '.'; ++e; zs += z);\r\n      str = zs + str;\r\n\r\n    // Positive exponent\r\n    } else {\r\n      len = str.length;\r\n\r\n      // Append zeros.\r\n      if (++e > len) {\r\n        for (zs = z, e -= len; --e; zs += z);\r\n        str += zs;\r\n      } else if (e < len) {\r\n        str = str.slice(0, e) + '.' + str.slice(e);\r\n      }\r\n    }\r\n\r\n    return str;\r\n  }\r\n\r\n\r\n  // EXPORT\r\n\r\n\r\n  BigNumber = clone();\r\n  BigNumber['default'] = BigNumber.BigNumber = BigNumber;\r\n\r\n  // AMD.\r\n  if (true) {\r\n    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () { return BigNumber; }).call(exports, __webpack_require__, exports, module),\n\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\r\n\r\n  // Node.js and other environments that support module.exports.\r\n  } else {}\r\n})(this);\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/bignumber.js/bignumber.js\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/main.scss":
/*!***********************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/main.scss ***!
  \***********************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0__);\n// Imports\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_0___default()(function(i){return i[1]});\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"html,\\nbody {\\n  background-color: #414141;\\n  user-select: none;\\n  text-align: center;\\n  overflow: hidden;\\n  margin: 0px;\\n  width: 100%;\\n  height: 100%;\\n}\\n\\ntable {\\n  margin: auto;\\n  z-index: 1;\\n}\\n\\ncanvas {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n}\\n\\ntr td {\\n  color: lawngreen;\\n  font-size: 20px;\\n}\\n\\ntr td div p {\\n  margin-top: 0px;\\n  margin-bottom: 0px;\\n}\", \"\"]);\n// Exports\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3NyYy9zdHlsZXMvbWFpbi5zY3NzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vc3JjL3N0eWxlcy9tYWluLnNjc3M/YTNlZiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oZnVuY3Rpb24oaSl7cmV0dXJuIGlbMV19KTtcbi8vIE1vZHVsZVxuX19fQ1NTX0xPQURFUl9FWFBPUlRfX18ucHVzaChbbW9kdWxlLmlkLCBcImh0bWwsXFxuYm9keSB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDE0MTQxO1xcbiAgdXNlci1zZWxlY3Q6IG5vbmU7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBvdmVyZmxvdzogaGlkZGVuO1xcbiAgbWFyZ2luOiAwcHg7XFxuICB3aWR0aDogMTAwJTtcXG4gIGhlaWdodDogMTAwJTtcXG59XFxuXFxudGFibGUge1xcbiAgbWFyZ2luOiBhdXRvO1xcbiAgei1pbmRleDogMTtcXG59XFxuXFxuY2FudmFzIHtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogMDtcXG4gIGxlZnQ6IDA7XFxufVxcblxcbnRyIHRkIHtcXG4gIGNvbG9yOiBsYXduZ3JlZW47XFxuICBmb250LXNpemU6IDIwcHg7XFxufVxcblxcbnRyIHRkIGRpdiBwIHtcXG4gIG1hcmdpbi10b3A6IDBweDtcXG4gIG1hcmdpbi1ib3R0b206IDBweDtcXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTsiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/main.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/runtime/api.js":
/*!*****************************************************!*\
  !*** ./node_modules/css-loader/dist/runtime/api.js ***!
  \*****************************************************/
/***/ ((module) => {

"use strict";
eval("\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (cssWithMappingToString) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join(\"\");\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === \"string\") {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, \"\"]];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcz8wZTMyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG4vKlxuICBNSVQgTGljZW5zZSBodHRwOi8vd3d3Lm9wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL21pdC1saWNlbnNlLnBocFxuICBBdXRob3IgVG9iaWFzIEtvcHBlcnMgQHNva3JhXG4qL1xuLy8gY3NzIGJhc2UgY29kZSwgaW5qZWN0ZWQgYnkgdGhlIGNzcy1sb2FkZXJcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSk7XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIHJldHVybiBcIkBtZWRpYSBcIi5jb25jYXQoaXRlbVsyXSwgXCIge1wiKS5jb25jYXQoY29udGVudCwgXCJ9XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gY29udGVudDtcbiAgICB9KS5qb2luKFwiXCIpO1xuICB9OyAvLyBpbXBvcnQgYSBsaXN0IG9mIG1vZHVsZXMgaW50byB0aGUgbGlzdFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuXG5cbiAgbGlzdC5pID0gZnVuY3Rpb24gKG1vZHVsZXMsIG1lZGlhUXVlcnksIGRlZHVwZSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICBtb2R1bGVzID0gW1tudWxsLCBtb2R1bGVzLCBcIlwiXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLWRlc3RydWN0dXJpbmdcbiAgICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaWRdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBtb2R1bGVzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIGl0ZW0gPSBbXS5jb25jYXQobW9kdWxlc1tfaV0pO1xuXG4gICAgICBpZiAoZGVkdXBlICYmIGFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnRpbnVlXG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuXG4gICAgICBpZiAobWVkaWFRdWVyeSkge1xuICAgICAgICBpZiAoIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzJdID0gXCJcIi5jb25jYXQobWVkaWFRdWVyeSwgXCIgYW5kIFwiKS5jb25jYXQoaXRlbVsyXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/runtime/api.js\n");

/***/ }),

/***/ "./node_modules/events/events.js":
/*!***************************************!*\
  !*** ./node_modules/events/events.js ***!
  \***************************************/
/***/ ((module) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n\nvar R = typeof Reflect === 'object' ? Reflect : null\nvar ReflectApply = R && typeof R.apply === 'function'\n  ? R.apply\n  : function ReflectApply(target, receiver, args) {\n    return Function.prototype.apply.call(target, receiver, args);\n  }\n\nvar ReflectOwnKeys\nif (R && typeof R.ownKeys === 'function') {\n  ReflectOwnKeys = R.ownKeys\n} else if (Object.getOwnPropertySymbols) {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target)\n      .concat(Object.getOwnPropertySymbols(target));\n  };\n} else {\n  ReflectOwnKeys = function ReflectOwnKeys(target) {\n    return Object.getOwnPropertyNames(target);\n  };\n}\n\nfunction ProcessEmitWarning(warning) {\n  if (console && console.warn) console.warn(warning);\n}\n\nvar NumberIsNaN = Number.isNaN || function NumberIsNaN(value) {\n  return value !== value;\n}\n\nfunction EventEmitter() {\n  EventEmitter.init.call(this);\n}\nmodule.exports = EventEmitter;\nmodule.exports.once = once;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._eventsCount = 0;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nvar defaultMaxListeners = 10;\n\nfunction checkListener(listener) {\n  if (typeof listener !== 'function') {\n    throw new TypeError('The \"listener\" argument must be of type Function. Received type ' + typeof listener);\n  }\n}\n\nObject.defineProperty(EventEmitter, 'defaultMaxListeners', {\n  enumerable: true,\n  get: function() {\n    return defaultMaxListeners;\n  },\n  set: function(arg) {\n    if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) {\n      throw new RangeError('The value of \"defaultMaxListeners\" is out of range. It must be a non-negative number. Received ' + arg + '.');\n    }\n    defaultMaxListeners = arg;\n  }\n});\n\nEventEmitter.init = function() {\n\n  if (this._events === undefined ||\n      this._events === Object.getPrototypeOf(this)._events) {\n    this._events = Object.create(null);\n    this._eventsCount = 0;\n  }\n\n  this._maxListeners = this._maxListeners || undefined;\n};\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {\n  if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) {\n    throw new RangeError('The value of \"n\" is out of range. It must be a non-negative number. Received ' + n + '.');\n  }\n  this._maxListeners = n;\n  return this;\n};\n\nfunction _getMaxListeners(that) {\n  if (that._maxListeners === undefined)\n    return EventEmitter.defaultMaxListeners;\n  return that._maxListeners;\n}\n\nEventEmitter.prototype.getMaxListeners = function getMaxListeners() {\n  return _getMaxListeners(this);\n};\n\nEventEmitter.prototype.emit = function emit(type) {\n  var args = [];\n  for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);\n  var doError = (type === 'error');\n\n  var events = this._events;\n  if (events !== undefined)\n    doError = (doError && events.error === undefined);\n  else if (!doError)\n    return false;\n\n  // If there is no 'error' event listener then throw.\n  if (doError) {\n    var er;\n    if (args.length > 0)\n      er = args[0];\n    if (er instanceof Error) {\n      // Note: The comments on the `throw` lines are intentional, they show\n      // up in Node's output if this results in an unhandled exception.\n      throw er; // Unhandled 'error' event\n    }\n    // At least give some kind of context to the user\n    var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));\n    err.context = er;\n    throw err; // Unhandled 'error' event\n  }\n\n  var handler = events[type];\n\n  if (handler === undefined)\n    return false;\n\n  if (typeof handler === 'function') {\n    ReflectApply(handler, this, args);\n  } else {\n    var len = handler.length;\n    var listeners = arrayClone(handler, len);\n    for (var i = 0; i < len; ++i)\n      ReflectApply(listeners[i], this, args);\n  }\n\n  return true;\n};\n\nfunction _addListener(target, type, listener, prepend) {\n  var m;\n  var events;\n  var existing;\n\n  checkListener(listener);\n\n  events = target._events;\n  if (events === undefined) {\n    events = target._events = Object.create(null);\n    target._eventsCount = 0;\n  } else {\n    // To avoid recursion in the case that type === \"newListener\"! Before\n    // adding it to the listeners, first emit \"newListener\".\n    if (events.newListener !== undefined) {\n      target.emit('newListener', type,\n                  listener.listener ? listener.listener : listener);\n\n      // Re-assign `events` because a newListener handler could have caused the\n      // this._events to be assigned to a new object\n      events = target._events;\n    }\n    existing = events[type];\n  }\n\n  if (existing === undefined) {\n    // Optimize the case of one listener. Don't need the extra array object.\n    existing = events[type] = listener;\n    ++target._eventsCount;\n  } else {\n    if (typeof existing === 'function') {\n      // Adding the second element, need to change to array.\n      existing = events[type] =\n        prepend ? [listener, existing] : [existing, listener];\n      // If we've already got an array, just append.\n    } else if (prepend) {\n      existing.unshift(listener);\n    } else {\n      existing.push(listener);\n    }\n\n    // Check for listener leak\n    m = _getMaxListeners(target);\n    if (m > 0 && existing.length > m && !existing.warned) {\n      existing.warned = true;\n      // No error code for this since it is a Warning\n      // eslint-disable-next-line no-restricted-syntax\n      var w = new Error('Possible EventEmitter memory leak detected. ' +\n                          existing.length + ' ' + String(type) + ' listeners ' +\n                          'added. Use emitter.setMaxListeners() to ' +\n                          'increase limit');\n      w.name = 'MaxListenersExceededWarning';\n      w.emitter = target;\n      w.type = type;\n      w.count = existing.length;\n      ProcessEmitWarning(w);\n    }\n  }\n\n  return target;\n}\n\nEventEmitter.prototype.addListener = function addListener(type, listener) {\n  return _addListener(this, type, listener, false);\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.prependListener =\n    function prependListener(type, listener) {\n      return _addListener(this, type, listener, true);\n    };\n\nfunction onceWrapper() {\n  if (!this.fired) {\n    this.target.removeListener(this.type, this.wrapFn);\n    this.fired = true;\n    if (arguments.length === 0)\n      return this.listener.call(this.target);\n    return this.listener.apply(this.target, arguments);\n  }\n}\n\nfunction _onceWrap(target, type, listener) {\n  var state = { fired: false, wrapFn: undefined, target: target, type: type, listener: listener };\n  var wrapped = onceWrapper.bind(state);\n  wrapped.listener = listener;\n  state.wrapFn = wrapped;\n  return wrapped;\n}\n\nEventEmitter.prototype.once = function once(type, listener) {\n  checkListener(listener);\n  this.on(type, _onceWrap(this, type, listener));\n  return this;\n};\n\nEventEmitter.prototype.prependOnceListener =\n    function prependOnceListener(type, listener) {\n      checkListener(listener);\n      this.prependListener(type, _onceWrap(this, type, listener));\n      return this;\n    };\n\n// Emits a 'removeListener' event if and only if the listener was removed.\nEventEmitter.prototype.removeListener =\n    function removeListener(type, listener) {\n      var list, events, position, i, originalListener;\n\n      checkListener(listener);\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      list = events[type];\n      if (list === undefined)\n        return this;\n\n      if (list === listener || list.listener === listener) {\n        if (--this._eventsCount === 0)\n          this._events = Object.create(null);\n        else {\n          delete events[type];\n          if (events.removeListener)\n            this.emit('removeListener', type, list.listener || listener);\n        }\n      } else if (typeof list !== 'function') {\n        position = -1;\n\n        for (i = list.length - 1; i >= 0; i--) {\n          if (list[i] === listener || list[i].listener === listener) {\n            originalListener = list[i].listener;\n            position = i;\n            break;\n          }\n        }\n\n        if (position < 0)\n          return this;\n\n        if (position === 0)\n          list.shift();\n        else {\n          spliceOne(list, position);\n        }\n\n        if (list.length === 1)\n          events[type] = list[0];\n\n        if (events.removeListener !== undefined)\n          this.emit('removeListener', type, originalListener || listener);\n      }\n\n      return this;\n    };\n\nEventEmitter.prototype.off = EventEmitter.prototype.removeListener;\n\nEventEmitter.prototype.removeAllListeners =\n    function removeAllListeners(type) {\n      var listeners, events, i;\n\n      events = this._events;\n      if (events === undefined)\n        return this;\n\n      // not listening for removeListener, no need to emit\n      if (events.removeListener === undefined) {\n        if (arguments.length === 0) {\n          this._events = Object.create(null);\n          this._eventsCount = 0;\n        } else if (events[type] !== undefined) {\n          if (--this._eventsCount === 0)\n            this._events = Object.create(null);\n          else\n            delete events[type];\n        }\n        return this;\n      }\n\n      // emit removeListener for all listeners on all events\n      if (arguments.length === 0) {\n        var keys = Object.keys(events);\n        var key;\n        for (i = 0; i < keys.length; ++i) {\n          key = keys[i];\n          if (key === 'removeListener') continue;\n          this.removeAllListeners(key);\n        }\n        this.removeAllListeners('removeListener');\n        this._events = Object.create(null);\n        this._eventsCount = 0;\n        return this;\n      }\n\n      listeners = events[type];\n\n      if (typeof listeners === 'function') {\n        this.removeListener(type, listeners);\n      } else if (listeners !== undefined) {\n        // LIFO order\n        for (i = listeners.length - 1; i >= 0; i--) {\n          this.removeListener(type, listeners[i]);\n        }\n      }\n\n      return this;\n    };\n\nfunction _listeners(target, type, unwrap) {\n  var events = target._events;\n\n  if (events === undefined)\n    return [];\n\n  var evlistener = events[type];\n  if (evlistener === undefined)\n    return [];\n\n  if (typeof evlistener === 'function')\n    return unwrap ? [evlistener.listener || evlistener] : [evlistener];\n\n  return unwrap ?\n    unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);\n}\n\nEventEmitter.prototype.listeners = function listeners(type) {\n  return _listeners(this, type, true);\n};\n\nEventEmitter.prototype.rawListeners = function rawListeners(type) {\n  return _listeners(this, type, false);\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  if (typeof emitter.listenerCount === 'function') {\n    return emitter.listenerCount(type);\n  } else {\n    return listenerCount.call(emitter, type);\n  }\n};\n\nEventEmitter.prototype.listenerCount = listenerCount;\nfunction listenerCount(type) {\n  var events = this._events;\n\n  if (events !== undefined) {\n    var evlistener = events[type];\n\n    if (typeof evlistener === 'function') {\n      return 1;\n    } else if (evlistener !== undefined) {\n      return evlistener.length;\n    }\n  }\n\n  return 0;\n}\n\nEventEmitter.prototype.eventNames = function eventNames() {\n  return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];\n};\n\nfunction arrayClone(arr, n) {\n  var copy = new Array(n);\n  for (var i = 0; i < n; ++i)\n    copy[i] = arr[i];\n  return copy;\n}\n\nfunction spliceOne(list, index) {\n  for (; index + 1 < list.length; index++)\n    list[index] = list[index + 1];\n  list.pop();\n}\n\nfunction unwrapListeners(arr) {\n  var ret = new Array(arr.length);\n  for (var i = 0; i < ret.length; ++i) {\n    ret[i] = arr[i].listener || arr[i];\n  }\n  return ret;\n}\n\nfunction once(emitter, name) {\n  return new Promise(function (resolve, reject) {\n    function errorListener(err) {\n      emitter.removeListener(name, resolver);\n      reject(err);\n    }\n\n    function resolver() {\n      if (typeof emitter.removeListener === 'function') {\n        emitter.removeListener('error', errorListener);\n      }\n      resolve([].slice.call(arguments));\n    };\n\n    eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });\n    if (name !== 'error') {\n      addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });\n    }\n  });\n}\n\nfunction addErrorHandlerIfEventEmitter(emitter, handler, flags) {\n  if (typeof emitter.on === 'function') {\n    eventTargetAgnosticAddListener(emitter, 'error', handler, flags);\n  }\n}\n\nfunction eventTargetAgnosticAddListener(emitter, name, listener, flags) {\n  if (typeof emitter.on === 'function') {\n    if (flags.once) {\n      emitter.once(name, listener);\n    } else {\n      emitter.on(name, listener);\n    }\n  } else if (typeof emitter.addEventListener === 'function') {\n    // EventTarget does not have `error` event semantics like Node\n    // EventEmitters, we do not listen for `error` events here.\n    emitter.addEventListener(name, function wrapListener(arg) {\n      // IE does not have builtin `{ once: true }` support so we\n      // have to do it manually.\n      if (flags.once) {\n        emitter.removeEventListener(name, wrapListener);\n      }\n      listener(arg);\n    });\n  } else {\n    throw new TypeError('The \"emitter\" argument must be of type EventEmitter. Received type ' + typeof emitter);\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/events/events.js\n");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/api.js":
/*!************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/api.js ***!
  \************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLWlucGFnZS1wcm92aWRlci9kaXN0L2FwaS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2hleC1iYXR0bGUtZ2FtZS8uL25vZGVfbW9kdWxlcy9ldmVyc2NhbGUtaW5wYWdlLXByb3ZpZGVyL2Rpc3QvYXBpLmpzPzI4YjAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/everscale-inpage-provider/dist/api.js\n");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/contract.js":
/*!*****************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/contract.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TvmException = exports.Contract = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/everscale-inpage-provider/dist/utils.js\");\nconst models_1 = __webpack_require__(/*! ./models */ \"./node_modules/everscale-inpage-provider/dist/models.js\");\n/**\n * @category Contract\n */\nclass Contract {\n    constructor(provider, abi, address) {\n        if (!Array.isArray(abi.functions)) {\n            throw new Error('Invalid abi. Functions array required');\n        }\n        if (!Array.isArray(abi.events)) {\n            throw new Error('Invalid abi. Events array required');\n        }\n        this._provider = provider;\n        this._abi = JSON.stringify(abi);\n        this._functions = abi.functions.reduce((functions, item) => {\n            functions[item.name] = { inputs: item.inputs || [], outputs: item.outputs || [] };\n            return functions;\n        }, {});\n        this._events = abi.events.reduce((events, item) => {\n            events[item.name] = { inputs: item.inputs || [] };\n            return events;\n        }, {});\n        this._address = address;\n        this._methods = new Proxy({}, {\n            get: (_object, method) => {\n                const rawAbi = this._functions[method];\n                return (params = {}) => new ContractMethodImpl(this._provider, rawAbi, this._abi, this._address, method, params);\n            },\n        });\n    }\n    get methods() {\n        return this._methods;\n    }\n    get address() {\n        return this._address;\n    }\n    get abi() {\n        return this._abi;\n    }\n    /**\n     * Requests contract data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getFullState() {\n        await this._provider.ensureInitialized();\n        return await this._provider.rawApi.getFullContractState({\n            address: this.address.toString(),\n        });\n    }\n    /**\n     * Creates new contract transactions stream\n     *\n     * @param subscriber\n     */\n    transactions(subscriber) {\n        return subscriber.transactions(this._address)\n            .flatMap(({ transactions }) => transactions);\n    }\n    /**\n     * Creates new contract events stream\n     *\n     * @param subscriber\n     */\n    events(subscriber) {\n        return subscriber.transactions(this._address)\n            .flatMap(({ transactions }) => transactions)\n            .flatMap((tx) => this.decodeTransactionEvents({ transaction: tx }).then((events) => {\n            events.forEach((event) => event.transaction = tx);\n            return events;\n        }));\n    }\n    async waitForEvent(args = {}) {\n        const { range, filter } = args;\n        const filterFn = typeof filter === 'string'\n            ? ({ event }) => event === filter\n            : filter;\n        let subscriber = args.subscriber;\n        const hasTempSubscriber = subscriber == null;\n        if (subscriber == null) {\n            subscriber = new this._provider.Subscriber();\n        }\n        const event = await (((range === null || range === void 0 ? void 0 : range.fromLt) != null || (range === null || range === void 0 ? void 0 : range.fromUtime) != null)\n            ? subscriber.oldTransactions(this._address, range)\n                .merge(subscriber.transactions(this._address))\n            : subscriber.transactions(this.address)).flatMap(item => item.transactions)\n            .takeWhile(item => range == null ||\n            (range.fromLt == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.fromLt) > 0) &&\n                (range.fromUtime == null || item.createdAt > range.fromUtime) &&\n                (range.toLt == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.toLt) < 0) &&\n                (range.toUtime == null || item.createdAt < range.toUtime))\n            .flatMap(tx => this.decodeTransactionEvents({ transaction: tx })\n            .then((events) => {\n            events.forEach((event) => event.transaction = tx);\n            return events;\n        }))\n            .filterMap(async (event) => {\n            if (filterFn == null || (await filterFn(event))) {\n                return event;\n            }\n            else {\n                return undefined;\n            }\n        })\n            .first();\n        hasTempSubscriber && (await subscriber.unsubscribe());\n        return event;\n    }\n    async getPastEvents(args) {\n        const { range, filter, limit } = args;\n        const filterFn = typeof filter === 'string'\n            ? ({ event }) => event === filter\n            : filter;\n        const result = [];\n        let currentContinuation = args === null || args === void 0 ? void 0 : args.continuation;\n        outer: while (true) {\n            const { transactions, continuation } = await this._provider.getTransactions({\n                address: this._address,\n                continuation: currentContinuation,\n            });\n            if (transactions.length === null) {\n                break;\n            }\n            const filteredTransactions = transactions.filter((item) => (((range === null || range === void 0 ? void 0 : range.fromLt) == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.fromLt) > 0) &&\n                ((range === null || range === void 0 ? void 0 : range.fromUtime) == null || item.createdAt > range.fromUtime) &&\n                ((range === null || range === void 0 ? void 0 : range.toLt) == null || utils_1.LT_COLLATOR.compare(item.id.lt, range.toLt) < 0) &&\n                ((range === null || range === void 0 ? void 0 : range.toUtime) == null || item.createdAt < range.toUtime)));\n            if (filteredTransactions.length > 0) {\n                const parsedEvents = await Promise.all(filteredTransactions.map(async (tx) => {\n                    return {\n                        tx, events: await this.decodeTransactionEvents({ transaction: tx }).then((events) => {\n                            events.forEach((event) => event.transaction = tx);\n                            return events;\n                        }),\n                    };\n                }));\n                for (let { tx, events } of parsedEvents) {\n                    if (filterFn != null) {\n                        events = await Promise.all(events.map(async (event) => (await filterFn(event)) ? event : undefined)).then(events => events.filter((event) => event != null));\n                    }\n                    currentContinuation = tx.id; // update continuation in case of early break\n                    for (const event of events) {\n                        if (limit != null && result.length >= limit) {\n                            break outer;\n                        }\n                        result.push(event);\n                    }\n                    if (limit != null && result.length >= limit) {\n                        break outer;\n                    }\n                }\n            }\n            currentContinuation = continuation;\n            if (currentContinuation == null) {\n                break;\n            }\n        }\n        return { events: result, continuation: currentContinuation };\n    }\n    async decodeTransaction(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeTransaction({\n                transaction: (0, models_1.serializeTransaction)(args.transaction),\n                abi: this._abi,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { method, input, output } = result;\n            const rawAbi = this._functions[method];\n            return {\n                method,\n                input: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, input) : {},\n                output: rawAbi.outputs != null ? (0, models_1.parseTokensObject)(rawAbi.outputs, output) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    async decodeTransactionEvents(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const { events } = await this._provider.rawApi.decodeTransactionEvents({\n                transaction: (0, models_1.serializeTransaction)(args.transaction),\n                abi: this._abi,\n            });\n            const result = [];\n            for (const { event, data } of events) {\n                const rawAbi = this._events[event];\n                result.push({\n                    event,\n                    data: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, data) : {},\n                });\n            }\n            return result;\n        }\n        catch (_) {\n            return [];\n        }\n    }\n    async decodeInputMessage(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeInput({\n                abi: this._abi,\n                body: args.body,\n                internal: args.internal,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { method, input } = result;\n            const rawAbi = this._functions[method];\n            return {\n                method,\n                input: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, input) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    async decodeOutputMessage(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeOutput({\n                abi: this._abi,\n                body: args.body,\n                method: args.methods,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { method, output } = result;\n            const rawAbi = this._functions[method];\n            return {\n                method,\n                output: rawAbi.outputs != null ? (0, models_1.parseTokensObject)(rawAbi.outputs, output) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n    async decodeEvent(args) {\n        await this._provider.ensureInitialized();\n        try {\n            const result = await this._provider.rawApi.decodeEvent({\n                abi: this.abi,\n                body: args.body,\n                event: args.events,\n            });\n            if (result == null) {\n                return undefined;\n            }\n            const { event, data } = result;\n            const rawAbi = this._events[event];\n            return {\n                event,\n                data: rawAbi.inputs != null ? (0, models_1.parseTokensObject)(rawAbi.inputs, data) : {},\n            };\n        }\n        catch (_) {\n            return undefined;\n        }\n    }\n}\nexports.Contract = Contract;\n/**\n * @category Contract\n */\nclass TvmException extends Error {\n    constructor(code) {\n        super(`TvmException: ${code}`);\n        this.code = code;\n    }\n}\nexports.TvmException = TvmException;\nclass ContractMethodImpl {\n    constructor(provider, functionAbi, abi, address, method, params) {\n        this.provider = provider;\n        this.functionAbi = functionAbi;\n        this.abi = abi;\n        this.address = address;\n        this.method = method;\n        this.params = (0, models_1.serializeTokensObject)(params);\n    }\n    async send(args) {\n        await this.provider.ensureInitialized();\n        const { transaction } = await this.provider.rawApi.sendMessage({\n            sender: args.from.toString(),\n            recipient: this.address.toString(),\n            amount: args.amount,\n            bounce: args.bounce == null ? true : args.bounce,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        });\n        return (0, models_1.parseTransaction)(transaction);\n    }\n    async sendDelayed(args) {\n        await this.provider.ensureInitialized();\n        const transactions = new utils_1.DelayedTransactions;\n        const subscription = await this.provider.subscribe('messageStatusUpdated');\n        subscription.on('data', (data) => {\n            if (!data.address.equals(args.from)) {\n                return;\n            }\n            transactions.fillTransaction(data.hash, data.transaction);\n        });\n        const { message } = await this.provider.rawApi.sendMessageDelayed({\n            sender: args.from.toString(),\n            recipient: this.address.toString(),\n            amount: args.amount,\n            bounce: args.bounce == null ? true : args.bounce,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        }).catch(e => {\n            subscription.unsubscribe().catch(console.error);\n            throw e;\n        });\n        const transaction = transactions\n            .waitTransaction(this.address, message.hash)\n            .finally(() => subscription.unsubscribe().catch(console.error));\n        return {\n            messageHash: message.hash,\n            expireAt: message.expireAt,\n            transaction,\n        };\n    }\n    async sendWithResult(args) {\n        await this.provider.ensureInitialized();\n        let subscriber = args.subscriber;\n        const hasTempSubscriber = subscriber == null;\n        if (subscriber == null) {\n            subscriber = new this.provider.Subscriber();\n        }\n        try {\n            // Parent transaction from wallet\n            let parentTransaction = undefined;\n            // Child transaction promise\n            let resolveChildTransactionPromise;\n            const childTransactionPromise = new Promise((resolve) => {\n                resolveChildTransactionPromise = (tx) => resolve(tx);\n            });\n            // Array for collecting transactions on target before parent transaction promise resolution\n            const possibleChildren = [];\n            // Subscribe to this account\n            subscriber.transactions(this.address)\n                .flatMap(batch => batch.transactions)\n                // Listen only messages from sender\n                .filter(item => { var _a; return ((_a = item.inMessage.src) === null || _a === void 0 ? void 0 : _a.equals(args.from)) || false; })\n                .on((tx) => {\n                if (parentTransaction == null) {\n                    // If we don't known whether the message was sent just collect all transactions from the sender\n                    possibleChildren.push(tx);\n                }\n                else if (parentTransaction.possibleMessages.findIndex((msg) => msg.hash == tx.inMessage.hash) >= 0) {\n                    // Resolve promise if transaction was found\n                    resolveChildTransactionPromise === null || resolveChildTransactionPromise === void 0 ? void 0 : resolveChildTransactionPromise(tx);\n                }\n            });\n            // Send message\n            const transaction = await this.send(args);\n            // Extract all outgoing messages from the parent transaction to this contract\n            const possibleMessages = transaction.outMessages.filter(msg => { var _a; return ((_a = msg.dst) === null || _a === void 0 ? void 0 : _a.equals(this.address)) || false; });\n            // Update stream state\n            parentTransaction = {\n                transaction,\n                possibleMessages,\n            };\n            // Check whether child transaction was already found\n            const alreadyReceived = possibleChildren.find((tx) => {\n                return possibleMessages.findIndex((msg) => msg.hash == tx.inMessage.hash) >= 0;\n            });\n            if (alreadyReceived != null) {\n                resolveChildTransactionPromise === null || resolveChildTransactionPromise === void 0 ? void 0 : resolveChildTransactionPromise(alreadyReceived);\n            }\n            const childTransaction = await childTransactionPromise;\n            // Parse output\n            let output = undefined;\n            try {\n                const result = await this.provider.rawApi.decodeTransaction({\n                    transaction: (0, models_1.serializeTransaction)(childTransaction),\n                    abi: this.abi,\n                    method: this.method,\n                });\n                if (result != null) {\n                    output = this.functionAbi.outputs != null\n                        ? (0, models_1.parseTokensObject)(this.functionAbi.outputs, result.output)\n                        : {};\n                }\n            }\n            catch (e) {\n                console.error(e);\n            }\n            // Done\n            return {\n                parentTransaction: parentTransaction.transaction,\n                childTransaction,\n                output,\n            };\n        }\n        finally {\n            hasTempSubscriber && (await subscriber.unsubscribe());\n        }\n    }\n    async estimateFees(args) {\n        await this.provider.ensureInitialized();\n        const { fees } = await this.provider.rawApi.estimateFees({\n            sender: args.from.toString(),\n            recipient: this.address.toString(),\n            amount: args.amount,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        });\n        return fees;\n    }\n    async sendExternal(args) {\n        await this.provider.ensureInitialized();\n        const method = args.withoutSignature === true\n            ? this.provider.rawApi.sendUnsignedExternalMessage\n            : this.provider.rawApi.sendExternalMessage;\n        const { transaction, output } = await method({\n            publicKey: args.publicKey,\n            recipient: this.address.toString(),\n            stateInit: args.stateInit,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n            local: args.local,\n        });\n        return {\n            transaction: (0, models_1.parseTransaction)(transaction),\n            output: output != null ? (0, models_1.parseTokensObject)(this.functionAbi.outputs, output) : undefined,\n        };\n    }\n    async sendExternalDelayed(args) {\n        await this.provider.ensureInitialized();\n        const transactions = new utils_1.DelayedTransactions;\n        const subscription = await this.provider.subscribe('messageStatusUpdated');\n        subscription.on('data', (data) => {\n            if (!data.address.equals(this.address)) {\n                return;\n            }\n            transactions.fillTransaction(data.hash, data.transaction);\n        });\n        const { message } = await this.provider.rawApi.sendExternalMessageDelayed({\n            publicKey: args.publicKey,\n            recipient: this.address.toString(),\n            stateInit: args.stateInit,\n            payload: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        }).catch(e => {\n            subscription.unsubscribe().catch(console.error);\n            throw e;\n        });\n        const transaction = transactions\n            .waitTransaction(this.address, message.hash)\n            .finally(() => subscription.unsubscribe().catch(console.error));\n        return {\n            messageHash: message.hash,\n            expireAt: message.expireAt,\n            transaction,\n        };\n    }\n    async call(args = {}) {\n        await this.provider.ensureInitialized();\n        const { output, code } = await this.provider.rawApi.runLocal({\n            address: this.address.toString(),\n            cachedState: args.cachedState,\n            responsible: args.responsible,\n            functionCall: {\n                abi: this.abi,\n                method: this.method,\n                params: this.params,\n            },\n        });\n        if (output == null || code != 0) {\n            throw new TvmException(code);\n        }\n        else {\n            return (0, models_1.parseTokensObject)(this.functionAbi.outputs, output);\n        }\n    }\n    async encodeInternal() {\n        await this.provider.ensureInitialized();\n        const { boc } = await this.provider.rawApi.encodeInternalInput({\n            abi: this.abi,\n            method: this.method,\n            params: this.params,\n        });\n        return boc;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-inpage-provider/dist/contract.js\n");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/index.js":
/*!**************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/index.js ***!
  \**************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ProviderNotInitializedException = exports.ProviderNotFoundException = exports.ProviderRpcClient = exports.hasEverscaleProvider = exports.LT_COLLATOR = exports.mergeTransactions = exports.MessageExpiredException = exports.AddressLiteral = exports.Address = exports.Subscriber = void 0;\nconst models_1 = __webpack_require__(/*! ./models */ \"./node_modules/everscale-inpage-provider/dist/models.js\");\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/everscale-inpage-provider/dist/utils.js\");\nconst subscriber = __importStar(__webpack_require__(/*! ./stream */ \"./node_modules/everscale-inpage-provider/dist/stream.js\"));\nconst contract = __importStar(__webpack_require__(/*! ./contract */ \"./node_modules/everscale-inpage-provider/dist/contract.js\"));\n__exportStar(__webpack_require__(/*! ./api */ \"./node_modules/everscale-inpage-provider/dist/api.js\"), exports);\n__exportStar(__webpack_require__(/*! ./models */ \"./node_modules/everscale-inpage-provider/dist/models.js\"), exports);\n__exportStar(__webpack_require__(/*! ./contract */ \"./node_modules/everscale-inpage-provider/dist/contract.js\"), exports);\nvar stream_1 = __webpack_require__(/*! ./stream */ \"./node_modules/everscale-inpage-provider/dist/stream.js\");\nObject.defineProperty(exports, \"Subscriber\", ({ enumerable: true, get: function () { return stream_1.Subscriber; } }));\nvar utils_2 = __webpack_require__(/*! ./utils */ \"./node_modules/everscale-inpage-provider/dist/utils.js\");\nObject.defineProperty(exports, \"Address\", ({ enumerable: true, get: function () { return utils_2.Address; } }));\nObject.defineProperty(exports, \"AddressLiteral\", ({ enumerable: true, get: function () { return utils_2.AddressLiteral; } }));\nObject.defineProperty(exports, \"MessageExpiredException\", ({ enumerable: true, get: function () { return utils_2.MessageExpiredException; } }));\nObject.defineProperty(exports, \"mergeTransactions\", ({ enumerable: true, get: function () { return utils_2.mergeTransactions; } }));\nObject.defineProperty(exports, \"LT_COLLATOR\", ({ enumerable: true, get: function () { return utils_2.LT_COLLATOR; } }));\nconst isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';\nlet ensurePageLoaded;\nif (!isBrowser || document.readyState === 'complete') {\n    ensurePageLoaded = Promise.resolve();\n}\nelse {\n    ensurePageLoaded = new Promise((resolve) => {\n        window.addEventListener('load', () => {\n            resolve();\n        });\n    });\n}\nconst getProvider = () => isBrowser ? window.__ever || window.ton : undefined;\n/**\n * @category Provider\n */\nasync function hasEverscaleProvider() {\n    if (!isBrowser) {\n        return false;\n    }\n    await ensurePageLoaded;\n    return window.__hasEverscaleProvider === true || window.hasTonProvider === true;\n}\nexports.hasEverscaleProvider = hasEverscaleProvider;\n/**\n * @category Provider\n */\nclass ProviderRpcClient {\n    constructor(properties = {}) {\n        this._subscriptions = {\n            connected: new Map(),\n            disconnected: new Map(),\n            transactionsFound: new Map(),\n            contractStateChanged: new Map(),\n            messageStatusUpdated: new Map(),\n            networkChanged: new Map(),\n            permissionsChanged: new Map(),\n            loggedOut: new Map(),\n        };\n        this._contractSubscriptions = new Map();\n        this._properties = properties;\n        const self = this;\n        // Create contract proxy type\n        class ProviderContract extends contract.Contract {\n            constructor(abi, address) {\n                super(self, abi, address);\n            }\n        }\n        this.Contract = ProviderContract;\n        // Create subscriber proxy type\n        class ProviderSubscriber extends subscriber.Subscriber {\n            constructor() {\n                super(self);\n            }\n        }\n        this.Subscriber = ProviderSubscriber;\n        // Wrap provider requests\n        this._api = new Proxy({}, {\n            get: (_object, method) => (params) => {\n                if (this._provider != null) {\n                    return this._provider.request({ method, params });\n                }\n                else {\n                    throw new ProviderNotInitializedException();\n                }\n            },\n        });\n        if (properties.forceUseFallback === true) {\n            this._initializationPromise = properties.fallback != null\n                ? properties.fallback()\n                    .then((provider) => {\n                    this._provider = provider;\n                })\n                : Promise.resolve();\n        }\n        else {\n            // Initialize provider with injected object by default\n            this._provider = getProvider();\n            if (this._provider != null) {\n                // Provider as already injected\n                this._initializationPromise = Promise.resolve();\n            }\n            else {\n                // Wait until page is loaded and initialization complete\n                this._initializationPromise = hasEverscaleProvider()\n                    .then((hasProvider) => new Promise((resolve) => {\n                    if (!hasProvider) {\n                        // Fully loaded page doesn't even contain provider flag\n                        return resolve();\n                    }\n                    // Wait injected provider initialization otherwise\n                    this._provider = getProvider();\n                    if (this._provider != null) {\n                        resolve();\n                    }\n                    else {\n                        const eventName = window.__hasEverscaleProvider === true ? 'ever#initialized' : 'ton#initialized';\n                        window.addEventListener(eventName, (_) => {\n                            this._provider = getProvider();\n                            resolve();\n                        });\n                    }\n                }))\n                    .then(async () => {\n                    if (this._provider == null && properties.fallback != null) {\n                        this._provider = await properties.fallback();\n                    }\n                });\n            }\n        }\n        // Will only register handlers for successfully loaded injected provider\n        this._initializationPromise.then(() => {\n            if (this._provider != null) {\n                this._registerEventHandlers(this._provider);\n            }\n        });\n    }\n    /**\n     * Checks whether this page has injected Everscale provider or\n     * there is a fallback provider.\n     */\n    async hasProvider() {\n        if (this._properties.fallback != null) {\n            return true;\n        }\n        return hasEverscaleProvider();\n    }\n    /**\n     * Waits until provider api will be available. Calls `fallback` if no provider was found\n     *\n     * @throws ProviderNotFoundException when no provider found\n     */\n    async ensureInitialized() {\n        await this._initializationPromise;\n        if (this._provider == null) {\n            throw new ProviderNotFoundException();\n        }\n    }\n    /**\n     * Whether provider api is ready\n     */\n    get isInitialized() {\n        return this._provider != null;\n    }\n    /**\n     * Raw provider\n     */\n    get raw() {\n        if (this._provider != null) {\n            return this._provider;\n        }\n        else {\n            throw new ProviderNotInitializedException();\n        }\n    }\n    /**\n     * Raw provider api\n     */\n    get rawApi() {\n        return this._api;\n    }\n    /**\n     * Creates typed contract wrapper.\n     *\n     * @param abi Readonly object (must be declared with `as const`)\n     * @param address Default contract address\n     *\n     * @deprecated `new ever.Contract(abi, address)` should be used instead\n     */\n    createContract(abi, address) {\n        return new this.Contract(abi, address);\n    }\n    /**\n     * Creates subscriptions group\n     *\n     * @deprecated `new ever.Subscriber()` should be used instead\n     */\n    createSubscriber() {\n        return new this.Subscriber();\n    }\n    /**\n     * Requests new permissions for current origin.\n     * Shows an approval window to the user.\n     * Will overwrite already existing permissions\n     *\n     * ---\n     * Required permissions: none\n     */\n    async requestPermissions(args) {\n        await this.ensureInitialized();\n        const result = await this._api.requestPermissions({\n            permissions: args.permissions,\n        });\n        return (0, models_1.parsePermissions)(result);\n    }\n    /**\n     * Updates `accountInteraction` permission value\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async changeAccount() {\n        await this.ensureInitialized();\n        await this._api.changeAccount();\n    }\n    /**\n     * Removes all permissions for current origin and stops all subscriptions\n     */\n    async disconnect() {\n        await this.ensureInitialized();\n        await this._api.disconnect();\n    }\n    async subscribe(eventName, params) {\n        class SubscriptionImpl {\n            constructor(_subscribe, _unsubscribe) {\n                this._subscribe = _subscribe;\n                this._unsubscribe = _unsubscribe;\n                this._listeners = {\n                    data: [],\n                    subscribed: [],\n                    unsubscribed: [],\n                };\n                this._subscribed = false;\n                this.subscribe = async () => {\n                    if (this._subscribed) {\n                        return;\n                    }\n                    this._subscribed = true;\n                    await this._subscribe(this);\n                    for (const handler of this._listeners['subscribed']) {\n                        handler();\n                    }\n                };\n                this.unsubscribe = async () => {\n                    if (!this._subscribed) {\n                        return;\n                    }\n                    this._subscribed = false;\n                    await this._unsubscribe();\n                    for (const handler of this._listeners['unsubscribed']) {\n                        handler();\n                    }\n                };\n            }\n            on(eventName, listener) {\n                this._listeners[eventName].push(listener);\n                return this;\n            }\n            notify(data) {\n                for (const handler of this._listeners['data']) {\n                    handler(data);\n                }\n            }\n        }\n        const existingSubscriptions = this._subscriptions[eventName];\n        const id = (0, utils_1.getUniqueId)();\n        switch (eventName) {\n            case 'connected':\n            case 'disconnected':\n            case 'messageStatusUpdated':\n            case 'networkChanged':\n            case 'permissionsChanged':\n            case 'loggedOut': {\n                const subscription = new SubscriptionImpl(async (subscription) => {\n                    if (existingSubscriptions.has(id)) {\n                        return;\n                    }\n                    existingSubscriptions.set(id, (data) => {\n                        subscription.notify(data);\n                    });\n                }, async () => {\n                    existingSubscriptions.delete(id);\n                });\n                await subscription.subscribe();\n                return subscription;\n            }\n            case 'transactionsFound':\n            case 'contractStateChanged': {\n                if (params == null) {\n                    throw new Error('Address must be specified for the subscription');\n                }\n                await this.ensureInitialized();\n                const address = params.address.toString();\n                const subscription = new SubscriptionImpl(async (subscription) => {\n                    if (existingSubscriptions.has(id)) {\n                        return;\n                    }\n                    existingSubscriptions.set(id, ((data) => {\n                        if (data.address.toString() === address) {\n                            subscription.notify(data);\n                        }\n                    }));\n                    let contractSubscriptions = this._contractSubscriptions.get(address);\n                    if (contractSubscriptions == null) {\n                        contractSubscriptions = new Map();\n                        this._contractSubscriptions.set(address, contractSubscriptions);\n                    }\n                    const subscriptionState = {\n                        state: eventName === 'contractStateChanged',\n                        transactions: eventName === 'transactionsFound',\n                    };\n                    contractSubscriptions.set(id, subscriptionState);\n                    const { total, withoutExcluded, } = foldSubscriptions(contractSubscriptions.values(), subscriptionState);\n                    try {\n                        if (total.transactions !== withoutExcluded.transactions || total.state !== withoutExcluded.state) {\n                            await this.rawApi.subscribe({ address, subscriptions: total });\n                        }\n                    }\n                    catch (e) {\n                        existingSubscriptions.delete(id);\n                        contractSubscriptions.delete(id);\n                        throw e;\n                    }\n                }, async () => {\n                    existingSubscriptions.delete(id);\n                    const contractSubscriptions = this._contractSubscriptions.get(address);\n                    if (contractSubscriptions == null) {\n                        return;\n                    }\n                    const updates = contractSubscriptions.get(id);\n                    const { total, withoutExcluded } = foldSubscriptions(contractSubscriptions.values(), updates);\n                    contractSubscriptions.delete(id);\n                    if (!withoutExcluded.transactions && !withoutExcluded.state) {\n                        await this.rawApi.unsubscribe({ address });\n                    }\n                    else if (total.transactions !== withoutExcluded.transactions || total.state !== withoutExcluded.state) {\n                        await this.rawApi.subscribe({ address, subscriptions: withoutExcluded });\n                    }\n                });\n                await subscription.subscribe();\n                return subscription;\n            }\n            default: {\n                throw new Error(`Unknown event ${eventName}`);\n            }\n        }\n    }\n    /**\n     * Returns provider api state\n     *\n     * ---\n     * Required permissions: none\n     */\n    async getProviderState() {\n        await this.ensureInitialized();\n        const state = await this._api.getProviderState();\n        return {\n            ...state,\n            permissions: (0, models_1.parsePermissions)(state.permissions),\n        };\n    }\n    /**\n     * Requests contract balance\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getBalance(address) {\n        const { state } = await this.getFullContractState({\n            address,\n        });\n        return state == null ? '0' : state === null || state === void 0 ? void 0 : state.balance;\n    }\n    /**\n     * Requests contract data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getFullContractState(args) {\n        await this.ensureInitialized();\n        return await this._api.getFullContractState({\n            address: args.address.toString(),\n        });\n    }\n    /**\n     * Requests accounts with specified code hash\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getAccountsByCodeHash(args) {\n        await this.ensureInitialized();\n        const { accounts, continuation } = await this._api.getAccountsByCodeHash({\n            ...args,\n        });\n        return {\n            accounts: accounts.map((address) => new utils_1.Address(address)),\n            continuation,\n        };\n    }\n    /**\n     * Requests contract transactions\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getTransactions(args) {\n        await this.ensureInitialized();\n        const { transactions, continuation, info } = await this._api.getTransactions({\n            ...args,\n            address: args.address.toString(),\n        });\n        return {\n            transactions: transactions.map(models_1.parseTransaction),\n            continuation,\n            info,\n        };\n    }\n    /**\n     * Searches transaction by hash\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getTransaction(args) {\n        await this.ensureInitialized();\n        const { transaction } = await this._api.getTransaction({\n            ...args,\n        });\n        return {\n            transaction: transaction ? (0, models_1.parseTransaction)(transaction) : undefined,\n        };\n    }\n    /**\n     * Computes contract address from code and init params\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getExpectedAddress(abi, args) {\n        const { address } = await this.getStateInit(abi, args);\n        return address;\n    }\n    /**\n     * Computes contract address and state from code and init params\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getStateInit(abi, args) {\n        await this.ensureInitialized();\n        const { address, stateInit } = await this._api.getExpectedAddress({\n            abi: JSON.stringify(abi),\n            ...args,\n            initParams: (0, models_1.serializeTokensObject)(args.initParams),\n        });\n        return {\n            address: new utils_1.Address(address),\n            stateInit,\n        };\n    }\n    /**\n     * Computes hash of base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getBocHash(boc) {\n        await this.ensureInitialized();\n        return await this._api.getBocHash({\n            boc,\n        }).then(({ hash }) => hash);\n    }\n    /**\n     * Creates base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async packIntoCell(args) {\n        await this.ensureInitialized();\n        return await this._api.packIntoCell({\n            abiVersion: args.abiVersion,\n            structure: args.structure,\n            data: (0, models_1.serializeTokensObject)(args.data),\n        });\n    }\n    /**\n     * Decodes base64 encoded BOC\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async unpackFromCell(args) {\n        await this.ensureInitialized();\n        const { data } = await this._api.unpackFromCell({\n            ...args,\n            structure: args.structure,\n        });\n        return {\n            data: (0, models_1.parseTokensObject)(args.structure, data),\n        };\n    }\n    /**\n     * Extracts public key from raw account state\n     *\n     * **NOTE:** can only be used on contracts which are deployed and has `pubkey` header\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async extractPublicKey(boc) {\n        await this.ensureInitialized();\n        const { publicKey } = await this._api.extractPublicKey({\n            boc,\n        });\n        return publicKey;\n    }\n    /**\n     * Converts base64 encoded contract code into tvc with default init data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async codeToTvc(code) {\n        await this.ensureInitialized();\n        const { tvc } = await this._api.codeToTvc({\n            code,\n        });\n        return tvc;\n    }\n    /**\n     * Merges code and data into state init\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async mergeTvc(args) {\n        await this.ensureInitialized();\n        return await this._api.mergeTvc(args);\n    }\n    /**\n     * Splits base64 encoded state init into code and data\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async splitTvc(tvc) {\n        await this.ensureInitialized();\n        return await this._api.splitTvc({\n            tvc,\n        });\n    }\n    /**\n     * Merges code and data into state init\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async setCodeSalt(args) {\n        let salt;\n        if (typeof args.salt === 'string') {\n            await this.ensureInitialized();\n            salt = args.salt;\n        }\n        else {\n            const { boc } = await this.packIntoCell(args.salt);\n            salt = boc;\n        }\n        return await this._api.setCodeSalt({ code: args.code, salt });\n    }\n    /**\n     * Retrieves salt from code. Returns undefined if code doesn't contain salt\n     *\n     * ---\n     * Required permissions: `basic`\n     */\n    async getCodeSalt(args) {\n        await this.ensureInitialized();\n        const { salt } = await this.rawApi.getCodeSalt({\n            code: args.code,\n        });\n        return salt;\n    }\n    /**\n     * Adds asset to the selected account\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async addAsset(args) {\n        await this.ensureInitialized();\n        let params;\n        switch (args.type) {\n            case 'tip3_token': {\n                params = {\n                    rootContract: args.params.rootContract.toString(),\n                };\n                break;\n            }\n            default:\n                throw new Error('Unknown asset type');\n        }\n        return await this._api.addAsset({\n            account: args.account.toString(),\n            type: args.type,\n            params,\n        });\n    }\n    async verifySignature(args) {\n        await this.ensureInitialized();\n        return await this._api.verifySignature(args);\n    }\n    /**\n     * Signs arbitrary data.\n     *\n     * NOTE: hashes data before signing. Use `signDataRaw` to sign without hash.\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async signData(args) {\n        await this.ensureInitialized();\n        return await this._api.signData(args);\n    }\n    /**\n     * Signs arbitrary data without hashing it\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async signDataRaw(args) {\n        await this.ensureInitialized();\n        return await this._api.signDataRaw(args);\n    }\n    /**\n     * Encrypts arbitrary data with specified algorithm for each specified recipient\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async encryptData(args) {\n        await this.ensureInitialized();\n        const { encryptedData } = await this._api.encryptData(args);\n        return encryptedData;\n    }\n    /**\n     * Decrypts encrypted data. Returns base64 encoded data\n     *\n     * ---\n     * Requires permissions: `accountInteraction`\n     */\n    async decryptData(encryptedData) {\n        await this.ensureInitialized();\n        const { data } = await this._api.decryptData({ encryptedData });\n        return data;\n    }\n    /**\n     * Sends an internal message from the user account.\n     * Shows an approval window to the user.\n     *\n     * ---\n     * Required permissions: `accountInteraction`\n     */\n    async sendMessage(args) {\n        await this.ensureInitialized();\n        const { transaction } = await this._api.sendMessage({\n            sender: args.sender.toString(),\n            recipient: args.recipient.toString(),\n            amount: args.amount,\n            bounce: args.bounce,\n            payload: args.payload ? ({\n                abi: args.payload.abi,\n                method: args.payload.method,\n                params: (0, models_1.serializeTokensObject)(args.payload.params),\n            }) : undefined,\n        });\n        return {\n            transaction: (0, models_1.parseTransaction)(transaction),\n        };\n    }\n    /**\n     * Sends an internal message from the user account without waiting for the transaction.\n     * Shows an approval window to the user.\n     *\n     * @see messageStatusUpdated\n     *\n     * ---\n     * Required permissions: `accountInteraction`\n     */\n    async sendMessageDelayed(args) {\n        await this.ensureInitialized();\n        const transactions = new utils_1.DelayedTransactions;\n        const subscription = await this.subscribe('messageStatusUpdated');\n        subscription.on('data', (data) => {\n            if (!data.address.equals(args.sender)) {\n                return;\n            }\n            transactions.fillTransaction(data.hash, data.transaction);\n        });\n        const { message } = await this._api.sendMessageDelayed({\n            sender: args.sender.toString(),\n            recipient: args.recipient.toString(),\n            amount: args.amount,\n            bounce: args.bounce,\n            payload: args.payload ? ({\n                abi: args.payload.abi,\n                method: args.payload.method,\n                params: (0, models_1.serializeTokensObject)(args.payload.params),\n            }) : undefined,\n        }).catch(e => {\n            subscription.unsubscribe().catch(console.error);\n            throw e;\n        });\n        const transaction = transactions\n            .waitTransaction(args.sender, message.hash)\n            .finally(() => subscription.unsubscribe().catch(console.error));\n        return {\n            messageHash: message.hash,\n            expireAt: message.expireAt,\n            transaction,\n        };\n    }\n    _registerEventHandlers(provider) {\n        const knownEvents = {\n            'connected': (data) => data,\n            'disconnected': (data) => data,\n            'transactionsFound': (data) => ({\n                address: new utils_1.Address(data.address),\n                transactions: data.transactions.map(models_1.parseTransaction),\n                info: data.info,\n            }),\n            'contractStateChanged': (data) => ({\n                address: new utils_1.Address(data.address),\n                state: data.state,\n            }),\n            'messageStatusUpdated': (data) => ({\n                address: new utils_1.Address(data.address),\n                hash: data.hash,\n                transaction: data.transaction != null ? (0, models_1.parseTransaction)(data.transaction) : undefined,\n            }),\n            'networkChanged': data => data,\n            'permissionsChanged': (data) => ({\n                permissions: (0, models_1.parsePermissions)(data.permissions),\n            }),\n            'loggedOut': data => data,\n        };\n        for (const [eventName, extractor] of Object.entries(knownEvents)) {\n            provider.addListener(eventName, (data) => {\n                const handlers = this._subscriptions[eventName];\n                const parsed = extractor(data);\n                for (const handler of handlers.values()) {\n                    handler(parsed);\n                }\n            });\n        }\n    }\n}\nexports.ProviderRpcClient = ProviderRpcClient;\n/**\n * @category Provider\n */\nclass ProviderNotFoundException extends Error {\n    constructor() {\n        super('Everscale provider was not found');\n    }\n}\nexports.ProviderNotFoundException = ProviderNotFoundException;\n/**\n * @category Provider\n */\nclass ProviderNotInitializedException extends Error {\n    constructor() {\n        super('Everscale provider was not initialized yet');\n    }\n}\nexports.ProviderNotInitializedException = ProviderNotInitializedException;\nfunction foldSubscriptions(subscriptions, except) {\n    const total = { state: false, transactions: false };\n    const withoutExcluded = Object.assign({}, total);\n    for (const item of subscriptions) {\n        if (withoutExcluded.transactions && withoutExcluded.state) {\n            break;\n        }\n        total.state || (total.state = item.state);\n        total.transactions || (total.transactions = item.transactions);\n        if (item !== except) {\n            withoutExcluded.state || (withoutExcluded.state = item.state);\n            withoutExcluded.transactions || (withoutExcluded.transactions = item.transactions);\n        }\n    }\n    return { total, withoutExcluded };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLWlucGFnZS1wcm92aWRlci9kaXN0L2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2V2ZXJzY2FsZS1pbnBhZ2UtcHJvdmlkZXIvZGlzdC9pbmRleC5qcz83MTM1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Qcm92aWRlck5vdEluaXRpYWxpemVkRXhjZXB0aW9uID0gZXhwb3J0cy5Qcm92aWRlck5vdEZvdW5kRXhjZXB0aW9uID0gZXhwb3J0cy5Qcm92aWRlclJwY0NsaWVudCA9IGV4cG9ydHMuaGFzRXZlcnNjYWxlUHJvdmlkZXIgPSBleHBvcnRzLkxUX0NPTExBVE9SID0gZXhwb3J0cy5tZXJnZVRyYW5zYWN0aW9ucyA9IGV4cG9ydHMuTWVzc2FnZUV4cGlyZWRFeGNlcHRpb24gPSBleHBvcnRzLkFkZHJlc3NMaXRlcmFsID0gZXhwb3J0cy5BZGRyZXNzID0gZXhwb3J0cy5TdWJzY3JpYmVyID0gdm9pZCAwO1xuY29uc3QgbW9kZWxzXzEgPSByZXF1aXJlKFwiLi9tb2RlbHNcIik7XG5jb25zdCB1dGlsc18xID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBzdWJzY3JpYmVyID0gX19pbXBvcnRTdGFyKHJlcXVpcmUoXCIuL3N0cmVhbVwiKSk7XG5jb25zdCBjb250cmFjdCA9IF9faW1wb3J0U3RhcihyZXF1aXJlKFwiLi9jb250cmFjdFwiKSk7XG5fX2V4cG9ydFN0YXIocmVxdWlyZShcIi4vYXBpXCIpLCBleHBvcnRzKTtcbl9fZXhwb3J0U3RhcihyZXF1aXJlKFwiLi9tb2RlbHNcIiksIGV4cG9ydHMpO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NvbnRyYWN0XCIpLCBleHBvcnRzKTtcbnZhciBzdHJlYW1fMSA9IHJlcXVpcmUoXCIuL3N0cmVhbVwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIlN1YnNjcmliZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHN0cmVhbV8xLlN1YnNjcmliZXI7IH0gfSk7XG52YXIgdXRpbHNfMiA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQWRkcmVzc1wiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMi5BZGRyZXNzOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQWRkcmVzc0xpdGVyYWxcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzIuQWRkcmVzc0xpdGVyYWw7IH0gfSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJNZXNzYWdlRXhwaXJlZEV4Y2VwdGlvblwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbHNfMi5NZXNzYWdlRXhwaXJlZEV4Y2VwdGlvbjsgfSB9KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIm1lcmdlVHJhbnNhY3Rpb25zXCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1dGlsc18yLm1lcmdlVHJhbnNhY3Rpb25zOyB9IH0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiTFRfQ09MTEFUT1JcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWxzXzIuTFRfQ09MTEFUT1I7IH0gfSk7XG5jb25zdCBpc0Jyb3dzZXIgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJztcbmxldCBlbnN1cmVQYWdlTG9hZGVkO1xuaWYgKCFpc0Jyb3dzZXIgfHwgZG9jdW1lbnQucmVhZHlTdGF0ZSA9PT0gJ2NvbXBsZXRlJykge1xuICAgIGVuc3VyZVBhZ2VMb2FkZWQgPSBQcm9taXNlLnJlc29sdmUoKTtcbn1cbmVsc2Uge1xuICAgIGVuc3VyZVBhZ2VMb2FkZWQgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbG9hZCcsICgpID0+IHtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgfSk7XG4gICAgfSk7XG59XG5jb25zdCBnZXRQcm92aWRlciA9ICgpID0+IGlzQnJvd3NlciA/IHdpbmRvdy5fX2V2ZXIgfHwgd2luZG93LnRvbiA6IHVuZGVmaW5lZDtcbi8qKlxuICogQGNhdGVnb3J5IFByb3ZpZGVyXG4gKi9cbmFzeW5jIGZ1bmN0aW9uIGhhc0V2ZXJzY2FsZVByb3ZpZGVyKCkge1xuICAgIGlmICghaXNCcm93c2VyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgYXdhaXQgZW5zdXJlUGFnZUxvYWRlZDtcbiAgICByZXR1cm4gd2luZG93Ll9faGFzRXZlcnNjYWxlUHJvdmlkZXIgPT09IHRydWUgfHwgd2luZG93Lmhhc1RvblByb3ZpZGVyID09PSB0cnVlO1xufVxuZXhwb3J0cy5oYXNFdmVyc2NhbGVQcm92aWRlciA9IGhhc0V2ZXJzY2FsZVByb3ZpZGVyO1xuLyoqXG4gKiBAY2F0ZWdvcnkgUHJvdmlkZXJcbiAqL1xuY2xhc3MgUHJvdmlkZXJScGNDbGllbnQge1xuICAgIGNvbnN0cnVjdG9yKHByb3BlcnRpZXMgPSB7fSkge1xuICAgICAgICB0aGlzLl9zdWJzY3JpcHRpb25zID0ge1xuICAgICAgICAgICAgY29ubmVjdGVkOiBuZXcgTWFwKCksXG4gICAgICAgICAgICBkaXNjb25uZWN0ZWQ6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIHRyYW5zYWN0aW9uc0ZvdW5kOiBuZXcgTWFwKCksXG4gICAgICAgICAgICBjb250cmFjdFN0YXRlQ2hhbmdlZDogbmV3IE1hcCgpLFxuICAgICAgICAgICAgbWVzc2FnZVN0YXR1c1VwZGF0ZWQ6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIG5ldHdvcmtDaGFuZ2VkOiBuZXcgTWFwKCksXG4gICAgICAgICAgICBwZXJtaXNzaW9uc0NoYW5nZWQ6IG5ldyBNYXAoKSxcbiAgICAgICAgICAgIGxvZ2dlZE91dDogbmV3IE1hcCgpLFxuICAgICAgICB9O1xuICAgICAgICB0aGlzLl9jb250cmFjdFN1YnNjcmlwdGlvbnMgPSBuZXcgTWFwKCk7XG4gICAgICAgIHRoaXMuX3Byb3BlcnRpZXMgPSBwcm9wZXJ0aWVzO1xuICAgICAgICBjb25zdCBzZWxmID0gdGhpcztcbiAgICAgICAgLy8gQ3JlYXRlIGNvbnRyYWN0IHByb3h5IHR5cGVcbiAgICAgICAgY2xhc3MgUHJvdmlkZXJDb250cmFjdCBleHRlbmRzIGNvbnRyYWN0LkNvbnRyYWN0IHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKGFiaSwgYWRkcmVzcykge1xuICAgICAgICAgICAgICAgIHN1cGVyKHNlbGYsIGFiaSwgYWRkcmVzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5Db250cmFjdCA9IFByb3ZpZGVyQ29udHJhY3Q7XG4gICAgICAgIC8vIENyZWF0ZSBzdWJzY3JpYmVyIHByb3h5IHR5cGVcbiAgICAgICAgY2xhc3MgUHJvdmlkZXJTdWJzY3JpYmVyIGV4dGVuZHMgc3Vic2NyaWJlci5TdWJzY3JpYmVyIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICAgICAgICAgIHN1cGVyKHNlbGYpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuU3Vic2NyaWJlciA9IFByb3ZpZGVyU3Vic2NyaWJlcjtcbiAgICAgICAgLy8gV3JhcCBwcm92aWRlciByZXF1ZXN0c1xuICAgICAgICB0aGlzLl9hcGkgPSBuZXcgUHJveHkoe30sIHtcbiAgICAgICAgICAgIGdldDogKF9vYmplY3QsIG1ldGhvZCkgPT4gKHBhcmFtcykgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcm92aWRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm92aWRlci5yZXF1ZXN0KHsgbWV0aG9kLCBwYXJhbXMgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgUHJvdmlkZXJOb3RJbml0aWFsaXplZEV4Y2VwdGlvbigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgICBpZiAocHJvcGVydGllcy5mb3JjZVVzZUZhbGxiYWNrID09PSB0cnVlKSB7XG4gICAgICAgICAgICB0aGlzLl9pbml0aWFsaXphdGlvblByb21pc2UgPSBwcm9wZXJ0aWVzLmZhbGxiYWNrICE9IG51bGxcbiAgICAgICAgICAgICAgICA/IHByb3BlcnRpZXMuZmFsbGJhY2soKVxuICAgICAgICAgICAgICAgICAgICAudGhlbigocHJvdmlkZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvdmlkZXIgPSBwcm92aWRlcjtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHByb3ZpZGVyIHdpdGggaW5qZWN0ZWQgb2JqZWN0IGJ5IGRlZmF1bHRcbiAgICAgICAgICAgIHRoaXMuX3Byb3ZpZGVyID0gZ2V0UHJvdmlkZXIoKTtcbiAgICAgICAgICAgIGlmICh0aGlzLl9wcm92aWRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgLy8gUHJvdmlkZXIgYXMgYWxyZWFkeSBpbmplY3RlZFxuICAgICAgICAgICAgICAgIHRoaXMuX2luaXRpYWxpemF0aW9uUHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gV2FpdCB1bnRpbCBwYWdlIGlzIGxvYWRlZCBhbmQgaW5pdGlhbGl6YXRpb24gY29tcGxldGVcbiAgICAgICAgICAgICAgICB0aGlzLl9pbml0aWFsaXphdGlvblByb21pc2UgPSBoYXNFdmVyc2NhbGVQcm92aWRlcigpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKChoYXNQcm92aWRlcikgPT4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFoYXNQcm92aWRlcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gRnVsbHkgbG9hZGVkIHBhZ2UgZG9lc24ndCBldmVuIGNvbnRhaW4gcHJvdmlkZXIgZmxhZ1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAvLyBXYWl0IGluamVjdGVkIHByb3ZpZGVyIGluaXRpYWxpemF0aW9uIG90aGVyd2lzZVxuICAgICAgICAgICAgICAgICAgICB0aGlzLl9wcm92aWRlciA9IGdldFByb3ZpZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcm92aWRlciAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudE5hbWUgPSB3aW5kb3cuX19oYXNFdmVyc2NhbGVQcm92aWRlciA9PT0gdHJ1ZSA/ICdldmVyI2luaXRpYWxpemVkJyA6ICd0b24jaW5pdGlhbGl6ZWQnO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCAoXykgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX3Byb3ZpZGVyID0gZ2V0UHJvdmlkZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0pKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9wcm92aWRlciA9PSBudWxsICYmIHByb3BlcnRpZXMuZmFsbGJhY2sgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fcHJvdmlkZXIgPSBhd2FpdCBwcm9wZXJ0aWVzLmZhbGxiYWNrKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBXaWxsIG9ubHkgcmVnaXN0ZXIgaGFuZGxlcnMgZm9yIHN1Y2Nlc3NmdWxseSBsb2FkZWQgaW5qZWN0ZWQgcHJvdmlkZXJcbiAgICAgICAgdGhpcy5faW5pdGlhbGl6YXRpb25Qcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuX3Byb3ZpZGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9yZWdpc3RlckV2ZW50SGFuZGxlcnModGhpcy5fcHJvdmlkZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2hlY2tzIHdoZXRoZXIgdGhpcyBwYWdlIGhhcyBpbmplY3RlZCBFdmVyc2NhbGUgcHJvdmlkZXIgb3JcbiAgICAgKiB0aGVyZSBpcyBhIGZhbGxiYWNrIHByb3ZpZGVyLlxuICAgICAqL1xuICAgIGFzeW5jIGhhc1Byb3ZpZGVyKCkge1xuICAgICAgICBpZiAodGhpcy5fcHJvcGVydGllcy5mYWxsYmFjayAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaGFzRXZlcnNjYWxlUHJvdmlkZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogV2FpdHMgdW50aWwgcHJvdmlkZXIgYXBpIHdpbGwgYmUgYXZhaWxhYmxlLiBDYWxscyBgZmFsbGJhY2tgIGlmIG5vIHByb3ZpZGVyIHdhcyBmb3VuZFxuICAgICAqXG4gICAgICogQHRocm93cyBQcm92aWRlck5vdEZvdW5kRXhjZXB0aW9uIHdoZW4gbm8gcHJvdmlkZXIgZm91bmRcbiAgICAgKi9cbiAgICBhc3luYyBlbnN1cmVJbml0aWFsaXplZCgpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5faW5pdGlhbGl6YXRpb25Qcm9taXNlO1xuICAgICAgICBpZiAodGhpcy5fcHJvdmlkZXIgPT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFByb3ZpZGVyTm90Rm91bmRFeGNlcHRpb24oKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBXaGV0aGVyIHByb3ZpZGVyIGFwaSBpcyByZWFkeVxuICAgICAqL1xuICAgIGdldCBpc0luaXRpYWxpemVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fcHJvdmlkZXIgIT0gbnVsbDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmF3IHByb3ZpZGVyXG4gICAgICovXG4gICAgZ2V0IHJhdygpIHtcbiAgICAgICAgaWYgKHRoaXMuX3Byb3ZpZGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9wcm92aWRlcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBQcm92aWRlck5vdEluaXRpYWxpemVkRXhjZXB0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmF3IHByb3ZpZGVyIGFwaVxuICAgICAqL1xuICAgIGdldCByYXdBcGkoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9hcGk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgdHlwZWQgY29udHJhY3Qgd3JhcHBlci5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBhYmkgUmVhZG9ubHkgb2JqZWN0IChtdXN0IGJlIGRlY2xhcmVkIHdpdGggYGFzIGNvbnN0YClcbiAgICAgKiBAcGFyYW0gYWRkcmVzcyBEZWZhdWx0IGNvbnRyYWN0IGFkZHJlc3NcbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIGBuZXcgZXZlci5Db250cmFjdChhYmksIGFkZHJlc3MpYCBzaG91bGQgYmUgdXNlZCBpbnN0ZWFkXG4gICAgICovXG4gICAgY3JlYXRlQ29udHJhY3QoYWJpLCBhZGRyZXNzKSB7XG4gICAgICAgIHJldHVybiBuZXcgdGhpcy5Db250cmFjdChhYmksIGFkZHJlc3MpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIHN1YnNjcmlwdGlvbnMgZ3JvdXBcbiAgICAgKlxuICAgICAqIEBkZXByZWNhdGVkIGBuZXcgZXZlci5TdWJzY3JpYmVyKClgIHNob3VsZCBiZSB1c2VkIGluc3RlYWRcbiAgICAgKi9cbiAgICBjcmVhdGVTdWJzY3JpYmVyKCkge1xuICAgICAgICByZXR1cm4gbmV3IHRoaXMuU3Vic2NyaWJlcigpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0cyBuZXcgcGVybWlzc2lvbnMgZm9yIGN1cnJlbnQgb3JpZ2luLlxuICAgICAqIFNob3dzIGFuIGFwcHJvdmFsIHdpbmRvdyB0byB0aGUgdXNlci5cbiAgICAgKiBXaWxsIG92ZXJ3cml0ZSBhbHJlYWR5IGV4aXN0aW5nIHBlcm1pc3Npb25zXG4gICAgICpcbiAgICAgKiAtLS1cbiAgICAgKiBSZXF1aXJlZCBwZXJtaXNzaW9uczogbm9uZVxuICAgICAqL1xuICAgIGFzeW5jIHJlcXVlc3RQZXJtaXNzaW9ucyhhcmdzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgdGhpcy5fYXBpLnJlcXVlc3RQZXJtaXNzaW9ucyh7XG4gICAgICAgICAgICBwZXJtaXNzaW9uczogYXJncy5wZXJtaXNzaW9ucyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiAoMCwgbW9kZWxzXzEucGFyc2VQZXJtaXNzaW9ucykocmVzdWx0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBgYWNjb3VudEludGVyYWN0aW9uYCBwZXJtaXNzaW9uIHZhbHVlXG4gICAgICpcbiAgICAgKiAtLS1cbiAgICAgKiBSZXF1aXJlcyBwZXJtaXNzaW9uczogYGFjY291bnRJbnRlcmFjdGlvbmBcbiAgICAgKi9cbiAgICBhc3luYyBjaGFuZ2VBY2NvdW50KCkge1xuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRpYWxpemVkKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuX2FwaS5jaGFuZ2VBY2NvdW50KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgYWxsIHBlcm1pc3Npb25zIGZvciBjdXJyZW50IG9yaWdpbiBhbmQgc3RvcHMgYWxsIHN1YnNjcmlwdGlvbnNcbiAgICAgKi9cbiAgICBhc3luYyBkaXNjb25uZWN0KCkge1xuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRpYWxpemVkKCk7XG4gICAgICAgIGF3YWl0IHRoaXMuX2FwaS5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIGFzeW5jIHN1YnNjcmliZShldmVudE5hbWUsIHBhcmFtcykge1xuICAgICAgICBjbGFzcyBTdWJzY3JpcHRpb25JbXBsIHtcbiAgICAgICAgICAgIGNvbnN0cnVjdG9yKF9zdWJzY3JpYmUsIF91bnN1YnNjcmliZSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZSA9IF9zdWJzY3JpYmU7XG4gICAgICAgICAgICAgICAgdGhpcy5fdW5zdWJzY3JpYmUgPSBfdW5zdWJzY3JpYmU7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge1xuICAgICAgICAgICAgICAgICAgICBkYXRhOiBbXSxcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlZDogW10sXG4gICAgICAgICAgICAgICAgICAgIHVuc3Vic2NyaWJlZDogW10sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmVkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmUgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zdWJzY3JpYmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fc3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMuX3N1YnNjcmliZSh0aGlzKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuX2xpc3RlbmVyc1snc3Vic2NyaWJlZCddKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBoYW5kbGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSBhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghdGhpcy5fc3Vic2NyaWJlZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5fdW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIHRoaXMuX2xpc3RlbmVyc1sndW5zdWJzY3JpYmVkJ10pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIoKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvbihldmVudE5hbWUsIGxpc3RlbmVyKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2ZW50TmFtZV0ucHVzaChsaXN0ZW5lcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBub3RpZnkoZGF0YSkge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgaGFuZGxlciBvZiB0aGlzLl9saXN0ZW5lcnNbJ2RhdGEnXSkge1xuICAgICAgICAgICAgICAgICAgICBoYW5kbGVyKGRhdGEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBleGlzdGluZ1N1YnNjcmlwdGlvbnMgPSB0aGlzLl9zdWJzY3JpcHRpb25zW2V2ZW50TmFtZV07XG4gICAgICAgIGNvbnN0IGlkID0gKDAsIHV0aWxzXzEuZ2V0VW5pcXVlSWQpKCk7XG4gICAgICAgIHN3aXRjaCAoZXZlbnROYW1lKSB7XG4gICAgICAgICAgICBjYXNlICdjb25uZWN0ZWQnOlxuICAgICAgICAgICAgY2FzZSAnZGlzY29ubmVjdGVkJzpcbiAgICAgICAgICAgIGNhc2UgJ21lc3NhZ2VTdGF0dXNVcGRhdGVkJzpcbiAgICAgICAgICAgIGNhc2UgJ25ldHdvcmtDaGFuZ2VkJzpcbiAgICAgICAgICAgIGNhc2UgJ3Blcm1pc3Npb25zQ2hhbmdlZCc6XG4gICAgICAgICAgICBjYXNlICdsb2dnZWRPdXQnOiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbkltcGwoYXN5bmMgKHN1YnNjcmlwdGlvbikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXhpc3RpbmdTdWJzY3JpcHRpb25zLmhhcyhpZCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1N1YnNjcmlwdGlvbnMuc2V0KGlkLCAoZGF0YSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLm5vdGlmeShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1N1YnNjcmlwdGlvbnMuZGVsZXRlKGlkKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBhd2FpdCBzdWJzY3JpcHRpb24uc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhc2UgJ3RyYW5zYWN0aW9uc0ZvdW5kJzpcbiAgICAgICAgICAgIGNhc2UgJ2NvbnRyYWN0U3RhdGVDaGFuZ2VkJzoge1xuICAgICAgICAgICAgICAgIGlmIChwYXJhbXMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FkZHJlc3MgbXVzdCBiZSBzcGVjaWZpZWQgZm9yIHRoZSBzdWJzY3JpcHRpb24nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0aWFsaXplZCgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGFkZHJlc3MgPSBwYXJhbXMuYWRkcmVzcy50b1N0cmluZygpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHN1YnNjcmlwdGlvbiA9IG5ldyBTdWJzY3JpcHRpb25JbXBsKGFzeW5jIChzdWJzY3JpcHRpb24pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGV4aXN0aW5nU3Vic2NyaXB0aW9ucy5oYXMoaWQpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdTdWJzY3JpcHRpb25zLnNldChpZCwgKChkYXRhKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YS5hZGRyZXNzLnRvU3RyaW5nKCkgPT09IGFkZHJlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24ubm90aWZ5KGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgICAgIGxldCBjb250cmFjdFN1YnNjcmlwdGlvbnMgPSB0aGlzLl9jb250cmFjdFN1YnNjcmlwdGlvbnMuZ2V0KGFkZHJlc3MpO1xuICAgICAgICAgICAgICAgICAgICBpZiAoY29udHJhY3RTdWJzY3JpcHRpb25zID09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0U3Vic2NyaXB0aW9ucyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuX2NvbnRyYWN0U3Vic2NyaXB0aW9ucy5zZXQoYWRkcmVzcywgY29udHJhY3RTdWJzY3JpcHRpb25zKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdWJzY3JpcHRpb25TdGF0ZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiBldmVudE5hbWUgPT09ICdjb250cmFjdFN0YXRlQ2hhbmdlZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbnM6IGV2ZW50TmFtZSA9PT0gJ3RyYW5zYWN0aW9uc0ZvdW5kJyxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgY29udHJhY3RTdWJzY3JpcHRpb25zLnNldChpZCwgc3Vic2NyaXB0aW9uU3RhdGUpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHRvdGFsLCB3aXRob3V0RXhjbHVkZWQsIH0gPSBmb2xkU3Vic2NyaXB0aW9ucyhjb250cmFjdFN1YnNjcmlwdGlvbnMudmFsdWVzKCksIHN1YnNjcmlwdGlvblN0YXRlKTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0b3RhbC50cmFuc2FjdGlvbnMgIT09IHdpdGhvdXRFeGNsdWRlZC50cmFuc2FjdGlvbnMgfHwgdG90YWwuc3RhdGUgIT09IHdpdGhvdXRFeGNsdWRlZC5zdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmF3QXBpLnN1YnNjcmliZSh7IGFkZHJlc3MsIHN1YnNjcmlwdGlvbnM6IHRvdGFsIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZ1N1YnNjcmlwdGlvbnMuZGVsZXRlKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyYWN0U3Vic2NyaXB0aW9ucy5kZWxldGUoaWQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0sIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgZXhpc3RpbmdTdWJzY3JpcHRpb25zLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGNvbnRyYWN0U3Vic2NyaXB0aW9ucyA9IHRoaXMuX2NvbnRyYWN0U3Vic2NyaXB0aW9ucy5nZXQoYWRkcmVzcyk7XG4gICAgICAgICAgICAgICAgICAgIGlmIChjb250cmFjdFN1YnNjcmlwdGlvbnMgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZXMgPSBjb250cmFjdFN1YnNjcmlwdGlvbnMuZ2V0KGlkKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgeyB0b3RhbCwgd2l0aG91dEV4Y2x1ZGVkIH0gPSBmb2xkU3Vic2NyaXB0aW9ucyhjb250cmFjdFN1YnNjcmlwdGlvbnMudmFsdWVzKCksIHVwZGF0ZXMpO1xuICAgICAgICAgICAgICAgICAgICBjb250cmFjdFN1YnNjcmlwdGlvbnMuZGVsZXRlKGlkKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF3aXRob3V0RXhjbHVkZWQudHJhbnNhY3Rpb25zICYmICF3aXRob3V0RXhjbHVkZWQuc3RhdGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmF3QXBpLnVuc3Vic2NyaWJlKHsgYWRkcmVzcyB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh0b3RhbC50cmFuc2FjdGlvbnMgIT09IHdpdGhvdXRFeGNsdWRlZC50cmFuc2FjdGlvbnMgfHwgdG90YWwuc3RhdGUgIT09IHdpdGhvdXRFeGNsdWRlZC5zdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXdhaXQgdGhpcy5yYXdBcGkuc3Vic2NyaWJlKHsgYWRkcmVzcywgc3Vic2NyaXB0aW9uczogd2l0aG91dEV4Y2x1ZGVkIH0pO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgYXdhaXQgc3Vic2NyaXB0aW9uLnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIHJldHVybiBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGV2ZW50ICR7ZXZlbnROYW1lfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgcHJvdmlkZXIgYXBpIHN0YXRlXG4gICAgICpcbiAgICAgKiAtLS1cbiAgICAgKiBSZXF1aXJlZCBwZXJtaXNzaW9uczogbm9uZVxuICAgICAqL1xuICAgIGFzeW5jIGdldFByb3ZpZGVyU3RhdGUoKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgY29uc3Qgc3RhdGUgPSBhd2FpdCB0aGlzLl9hcGkuZ2V0UHJvdmlkZXJTdGF0ZSgpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICBwZXJtaXNzaW9uczogKDAsIG1vZGVsc18xLnBhcnNlUGVybWlzc2lvbnMpKHN0YXRlLnBlcm1pc3Npb25zKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVxdWVzdHMgY29udHJhY3QgYmFsYW5jZVxuICAgICAqXG4gICAgICogLS0tXG4gICAgICogUmVxdWlyZWQgcGVybWlzc2lvbnM6IGBiYXNpY2BcbiAgICAgKi9cbiAgICBhc3luYyBnZXRCYWxhbmNlKGFkZHJlc3MpIHtcbiAgICAgICAgY29uc3QgeyBzdGF0ZSB9ID0gYXdhaXQgdGhpcy5nZXRGdWxsQ29udHJhY3RTdGF0ZSh7XG4gICAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN0YXRlID09IG51bGwgPyAnMCcgOiBzdGF0ZSA9PT0gbnVsbCB8fCBzdGF0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc3RhdGUuYmFsYW5jZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVxdWVzdHMgY29udHJhY3QgZGF0YVxuICAgICAqXG4gICAgICogLS0tXG4gICAgICogUmVxdWlyZWQgcGVybWlzc2lvbnM6IGBiYXNpY2BcbiAgICAgKi9cbiAgICBhc3luYyBnZXRGdWxsQ29udHJhY3RTdGF0ZShhcmdzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2FwaS5nZXRGdWxsQ29udHJhY3RTdGF0ZSh7XG4gICAgICAgICAgICBhZGRyZXNzOiBhcmdzLmFkZHJlc3MudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlcXVlc3RzIGFjY291bnRzIHdpdGggc3BlY2lmaWVkIGNvZGUgaGFzaFxuICAgICAqXG4gICAgICogLS0tXG4gICAgICogUmVxdWlyZWQgcGVybWlzc2lvbnM6IGBiYXNpY2BcbiAgICAgKi9cbiAgICBhc3luYyBnZXRBY2NvdW50c0J5Q29kZUhhc2goYXJncykge1xuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRpYWxpemVkKCk7XG4gICAgICAgIGNvbnN0IHsgYWNjb3VudHMsIGNvbnRpbnVhdGlvbiB9ID0gYXdhaXQgdGhpcy5fYXBpLmdldEFjY291bnRzQnlDb2RlSGFzaCh7XG4gICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFjY291bnRzOiBhY2NvdW50cy5tYXAoKGFkZHJlc3MpID0+IG5ldyB1dGlsc18xLkFkZHJlc3MoYWRkcmVzcykpLFxuICAgICAgICAgICAgY29udGludWF0aW9uLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0cyBjb250cmFjdCB0cmFuc2FjdGlvbnNcbiAgICAgKlxuICAgICAqIC0tLVxuICAgICAqIFJlcXVpcmVkIHBlcm1pc3Npb25zOiBgYmFzaWNgXG4gICAgICovXG4gICAgYXN5bmMgZ2V0VHJhbnNhY3Rpb25zKGFyZ3MpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0aWFsaXplZCgpO1xuICAgICAgICBjb25zdCB7IHRyYW5zYWN0aW9ucywgY29udGludWF0aW9uLCBpbmZvIH0gPSBhd2FpdCB0aGlzLl9hcGkuZ2V0VHJhbnNhY3Rpb25zKHtcbiAgICAgICAgICAgIC4uLmFyZ3MsXG4gICAgICAgICAgICBhZGRyZXNzOiBhcmdzLmFkZHJlc3MudG9TdHJpbmcoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbnM6IHRyYW5zYWN0aW9ucy5tYXAobW9kZWxzXzEucGFyc2VUcmFuc2FjdGlvbiksXG4gICAgICAgICAgICBjb250aW51YXRpb24sXG4gICAgICAgICAgICBpbmZvLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZWFyY2hlcyB0cmFuc2FjdGlvbiBieSBoYXNoXG4gICAgICpcbiAgICAgKiAtLS1cbiAgICAgKiBSZXF1aXJlZCBwZXJtaXNzaW9uczogYGJhc2ljYFxuICAgICAqL1xuICAgIGFzeW5jIGdldFRyYW5zYWN0aW9uKGFyZ3MpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0aWFsaXplZCgpO1xuICAgICAgICBjb25zdCB7IHRyYW5zYWN0aW9uIH0gPSBhd2FpdCB0aGlzLl9hcGkuZ2V0VHJhbnNhY3Rpb24oe1xuICAgICAgICAgICAgLi4uYXJncyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbjogdHJhbnNhY3Rpb24gPyAoMCwgbW9kZWxzXzEucGFyc2VUcmFuc2FjdGlvbikodHJhbnNhY3Rpb24pIDogdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBjb250cmFjdCBhZGRyZXNzIGZyb20gY29kZSBhbmQgaW5pdCBwYXJhbXNcbiAgICAgKlxuICAgICAqIC0tLVxuICAgICAqIFJlcXVpcmVkIHBlcm1pc3Npb25zOiBgYmFzaWNgXG4gICAgICovXG4gICAgYXN5bmMgZ2V0RXhwZWN0ZWRBZGRyZXNzKGFiaSwgYXJncykge1xuICAgICAgICBjb25zdCB7IGFkZHJlc3MgfSA9IGF3YWl0IHRoaXMuZ2V0U3RhdGVJbml0KGFiaSwgYXJncyk7XG4gICAgICAgIHJldHVybiBhZGRyZXNzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBjb250cmFjdCBhZGRyZXNzIGFuZCBzdGF0ZSBmcm9tIGNvZGUgYW5kIGluaXQgcGFyYW1zXG4gICAgICpcbiAgICAgKiAtLS1cbiAgICAgKiBSZXF1aXJlZCBwZXJtaXNzaW9uczogYGJhc2ljYFxuICAgICAqL1xuICAgIGFzeW5jIGdldFN0YXRlSW5pdChhYmksIGFyZ3MpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0aWFsaXplZCgpO1xuICAgICAgICBjb25zdCB7IGFkZHJlc3MsIHN0YXRlSW5pdCB9ID0gYXdhaXQgdGhpcy5fYXBpLmdldEV4cGVjdGVkQWRkcmVzcyh7XG4gICAgICAgICAgICBhYmk6IEpTT04uc3RyaW5naWZ5KGFiaSksXG4gICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgaW5pdFBhcmFtczogKDAsIG1vZGVsc18xLnNlcmlhbGl6ZVRva2Vuc09iamVjdCkoYXJncy5pbml0UGFyYW1zKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZGRyZXNzOiBuZXcgdXRpbHNfMS5BZGRyZXNzKGFkZHJlc3MpLFxuICAgICAgICAgICAgc3RhdGVJbml0LFxuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDb21wdXRlcyBoYXNoIG9mIGJhc2U2NCBlbmNvZGVkIEJPQ1xuICAgICAqXG4gICAgICogLS0tXG4gICAgICogUmVxdWlyZWQgcGVybWlzc2lvbnM6IGBiYXNpY2BcbiAgICAgKi9cbiAgICBhc3luYyBnZXRCb2NIYXNoKGJvYykge1xuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRpYWxpemVkKCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9hcGkuZ2V0Qm9jSGFzaCh7XG4gICAgICAgICAgICBib2MsXG4gICAgICAgIH0pLnRoZW4oKHsgaGFzaCB9KSA9PiBoYXNoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ3JlYXRlcyBiYXNlNjQgZW5jb2RlZCBCT0NcbiAgICAgKlxuICAgICAqIC0tLVxuICAgICAqIFJlcXVpcmVkIHBlcm1pc3Npb25zOiBgYmFzaWNgXG4gICAgICovXG4gICAgYXN5bmMgcGFja0ludG9DZWxsKGFyZ3MpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0aWFsaXplZCgpO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fYXBpLnBhY2tJbnRvQ2VsbCh7XG4gICAgICAgICAgICBhYmlWZXJzaW9uOiBhcmdzLmFiaVZlcnNpb24sXG4gICAgICAgICAgICBzdHJ1Y3R1cmU6IGFyZ3Muc3RydWN0dXJlLFxuICAgICAgICAgICAgZGF0YTogKDAsIG1vZGVsc18xLnNlcmlhbGl6ZVRva2Vuc09iamVjdCkoYXJncy5kYXRhKSxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZXMgYmFzZTY0IGVuY29kZWQgQk9DXG4gICAgICpcbiAgICAgKiAtLS1cbiAgICAgKiBSZXF1aXJlZCBwZXJtaXNzaW9uczogYGJhc2ljYFxuICAgICAqL1xuICAgIGFzeW5jIHVucGFja0Zyb21DZWxsKGFyZ3MpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0aWFsaXplZCgpO1xuICAgICAgICBjb25zdCB7IGRhdGEgfSA9IGF3YWl0IHRoaXMuX2FwaS51bnBhY2tGcm9tQ2VsbCh7XG4gICAgICAgICAgICAuLi5hcmdzLFxuICAgICAgICAgICAgc3RydWN0dXJlOiBhcmdzLnN0cnVjdHVyZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBkYXRhOiAoMCwgbW9kZWxzXzEucGFyc2VUb2tlbnNPYmplY3QpKGFyZ3Muc3RydWN0dXJlLCBkYXRhKSxcbiAgICAgICAgfTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRXh0cmFjdHMgcHVibGljIGtleSBmcm9tIHJhdyBhY2NvdW50IHN0YXRlXG4gICAgICpcbiAgICAgKiAqKk5PVEU6KiogY2FuIG9ubHkgYmUgdXNlZCBvbiBjb250cmFjdHMgd2hpY2ggYXJlIGRlcGxveWVkIGFuZCBoYXMgYHB1YmtleWAgaGVhZGVyXG4gICAgICpcbiAgICAgKiAtLS1cbiAgICAgKiBSZXF1aXJlZCBwZXJtaXNzaW9uczogYGJhc2ljYFxuICAgICAqL1xuICAgIGFzeW5jIGV4dHJhY3RQdWJsaWNLZXkoYm9jKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgY29uc3QgeyBwdWJsaWNLZXkgfSA9IGF3YWl0IHRoaXMuX2FwaS5leHRyYWN0UHVibGljS2V5KHtcbiAgICAgICAgICAgIGJvYyxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBwdWJsaWNLZXk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIGJhc2U2NCBlbmNvZGVkIGNvbnRyYWN0IGNvZGUgaW50byB0dmMgd2l0aCBkZWZhdWx0IGluaXQgZGF0YVxuICAgICAqXG4gICAgICogLS0tXG4gICAgICogUmVxdWlyZWQgcGVybWlzc2lvbnM6IGBiYXNpY2BcbiAgICAgKi9cbiAgICBhc3luYyBjb2RlVG9UdmMoY29kZSkge1xuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRpYWxpemVkKCk7XG4gICAgICAgIGNvbnN0IHsgdHZjIH0gPSBhd2FpdCB0aGlzLl9hcGkuY29kZVRvVHZjKHtcbiAgICAgICAgICAgIGNvZGUsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHZjO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgY29kZSBhbmQgZGF0YSBpbnRvIHN0YXRlIGluaXRcbiAgICAgKlxuICAgICAqIC0tLVxuICAgICAqIFJlcXVpcmVkIHBlcm1pc3Npb25zOiBgYmFzaWNgXG4gICAgICovXG4gICAgYXN5bmMgbWVyZ2VUdmMoYXJncykge1xuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRpYWxpemVkKCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9hcGkubWVyZ2VUdmMoYXJncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNwbGl0cyBiYXNlNjQgZW5jb2RlZCBzdGF0ZSBpbml0IGludG8gY29kZSBhbmQgZGF0YVxuICAgICAqXG4gICAgICogLS0tXG4gICAgICogUmVxdWlyZWQgcGVybWlzc2lvbnM6IGBiYXNpY2BcbiAgICAgKi9cbiAgICBhc3luYyBzcGxpdFR2Yyh0dmMpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0aWFsaXplZCgpO1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5fYXBpLnNwbGl0VHZjKHtcbiAgICAgICAgICAgIHR2YyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE1lcmdlcyBjb2RlIGFuZCBkYXRhIGludG8gc3RhdGUgaW5pdFxuICAgICAqXG4gICAgICogLS0tXG4gICAgICogUmVxdWlyZWQgcGVybWlzc2lvbnM6IGBiYXNpY2BcbiAgICAgKi9cbiAgICBhc3luYyBzZXRDb2RlU2FsdChhcmdzKSB7XG4gICAgICAgIGxldCBzYWx0O1xuICAgICAgICBpZiAodHlwZW9mIGFyZ3Muc2FsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgICAgIHNhbHQgPSBhcmdzLnNhbHQ7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCB7IGJvYyB9ID0gYXdhaXQgdGhpcy5wYWNrSW50b0NlbGwoYXJncy5zYWx0KTtcbiAgICAgICAgICAgIHNhbHQgPSBib2M7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2FwaS5zZXRDb2RlU2FsdCh7IGNvZGU6IGFyZ3MuY29kZSwgc2FsdCB9KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0cmlldmVzIHNhbHQgZnJvbSBjb2RlLiBSZXR1cm5zIHVuZGVmaW5lZCBpZiBjb2RlIGRvZXNuJ3QgY29udGFpbiBzYWx0XG4gICAgICpcbiAgICAgKiAtLS1cbiAgICAgKiBSZXF1aXJlZCBwZXJtaXNzaW9uczogYGJhc2ljYFxuICAgICAqL1xuICAgIGFzeW5jIGdldENvZGVTYWx0KGFyZ3MpIHtcbiAgICAgICAgYXdhaXQgdGhpcy5lbnN1cmVJbml0aWFsaXplZCgpO1xuICAgICAgICBjb25zdCB7IHNhbHQgfSA9IGF3YWl0IHRoaXMucmF3QXBpLmdldENvZGVTYWx0KHtcbiAgICAgICAgICAgIGNvZGU6IGFyZ3MuY29kZSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBzYWx0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGFzc2V0IHRvIHRoZSBzZWxlY3RlZCBhY2NvdW50XG4gICAgICpcbiAgICAgKiAtLS1cbiAgICAgKiBSZXF1aXJlcyBwZXJtaXNzaW9uczogYGFjY291bnRJbnRlcmFjdGlvbmBcbiAgICAgKi9cbiAgICBhc3luYyBhZGRBc3NldChhcmdzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgbGV0IHBhcmFtcztcbiAgICAgICAgc3dpdGNoIChhcmdzLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3RpcDNfdG9rZW4nOiB7XG4gICAgICAgICAgICAgICAgcGFyYW1zID0ge1xuICAgICAgICAgICAgICAgICAgICByb290Q29udHJhY3Q6IGFyZ3MucGFyYW1zLnJvb3RDb250cmFjdC50b1N0cmluZygpLFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBhc3NldCB0eXBlJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2FwaS5hZGRBc3NldCh7XG4gICAgICAgICAgICBhY2NvdW50OiBhcmdzLmFjY291bnQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHR5cGU6IGFyZ3MudHlwZSxcbiAgICAgICAgICAgIHBhcmFtcyxcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIHZlcmlmeVNpZ25hdHVyZShhcmdzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuX2FwaS52ZXJpZnlTaWduYXR1cmUoYXJncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ25zIGFyYml0cmFyeSBkYXRhLlxuICAgICAqXG4gICAgICogTk9URTogaGFzaGVzIGRhdGEgYmVmb3JlIHNpZ25pbmcuIFVzZSBgc2lnbkRhdGFSYXdgIHRvIHNpZ24gd2l0aG91dCBoYXNoLlxuICAgICAqXG4gICAgICogLS0tXG4gICAgICogUmVxdWlyZXMgcGVybWlzc2lvbnM6IGBhY2NvdW50SW50ZXJhY3Rpb25gXG4gICAgICovXG4gICAgYXN5bmMgc2lnbkRhdGEoYXJncykge1xuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRpYWxpemVkKCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9hcGkuc2lnbkRhdGEoYXJncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNpZ25zIGFyYml0cmFyeSBkYXRhIHdpdGhvdXQgaGFzaGluZyBpdFxuICAgICAqXG4gICAgICogLS0tXG4gICAgICogUmVxdWlyZXMgcGVybWlzc2lvbnM6IGBhY2NvdW50SW50ZXJhY3Rpb25gXG4gICAgICovXG4gICAgYXN5bmMgc2lnbkRhdGFSYXcoYXJncykge1xuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRpYWxpemVkKCk7XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLl9hcGkuc2lnbkRhdGFSYXcoYXJncyk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY3J5cHRzIGFyYml0cmFyeSBkYXRhIHdpdGggc3BlY2lmaWVkIGFsZ29yaXRobSBmb3IgZWFjaCBzcGVjaWZpZWQgcmVjaXBpZW50XG4gICAgICpcbiAgICAgKiAtLS1cbiAgICAgKiBSZXF1aXJlcyBwZXJtaXNzaW9uczogYGFjY291bnRJbnRlcmFjdGlvbmBcbiAgICAgKi9cbiAgICBhc3luYyBlbmNyeXB0RGF0YShhcmdzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgY29uc3QgeyBlbmNyeXB0ZWREYXRhIH0gPSBhd2FpdCB0aGlzLl9hcGkuZW5jcnlwdERhdGEoYXJncyk7XG4gICAgICAgIHJldHVybiBlbmNyeXB0ZWREYXRhO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWNyeXB0cyBlbmNyeXB0ZWQgZGF0YS4gUmV0dXJucyBiYXNlNjQgZW5jb2RlZCBkYXRhXG4gICAgICpcbiAgICAgKiAtLS1cbiAgICAgKiBSZXF1aXJlcyBwZXJtaXNzaW9uczogYGFjY291bnRJbnRlcmFjdGlvbmBcbiAgICAgKi9cbiAgICBhc3luYyBkZWNyeXB0RGF0YShlbmNyeXB0ZWREYXRhKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBhd2FpdCB0aGlzLl9hcGkuZGVjcnlwdERhdGEoeyBlbmNyeXB0ZWREYXRhIH0pO1xuICAgICAgICByZXR1cm4gZGF0YTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYW4gaW50ZXJuYWwgbWVzc2FnZSBmcm9tIHRoZSB1c2VyIGFjY291bnQuXG4gICAgICogU2hvd3MgYW4gYXBwcm92YWwgd2luZG93IHRvIHRoZSB1c2VyLlxuICAgICAqXG4gICAgICogLS0tXG4gICAgICogUmVxdWlyZWQgcGVybWlzc2lvbnM6IGBhY2NvdW50SW50ZXJhY3Rpb25gXG4gICAgICovXG4gICAgYXN5bmMgc2VuZE1lc3NhZ2UoYXJncykge1xuICAgICAgICBhd2FpdCB0aGlzLmVuc3VyZUluaXRpYWxpemVkKCk7XG4gICAgICAgIGNvbnN0IHsgdHJhbnNhY3Rpb24gfSA9IGF3YWl0IHRoaXMuX2FwaS5zZW5kTWVzc2FnZSh7XG4gICAgICAgICAgICBzZW5kZXI6IGFyZ3Muc2VuZGVyLnRvU3RyaW5nKCksXG4gICAgICAgICAgICByZWNpcGllbnQ6IGFyZ3MucmVjaXBpZW50LnRvU3RyaW5nKCksXG4gICAgICAgICAgICBhbW91bnQ6IGFyZ3MuYW1vdW50LFxuICAgICAgICAgICAgYm91bmNlOiBhcmdzLmJvdW5jZSxcbiAgICAgICAgICAgIHBheWxvYWQ6IGFyZ3MucGF5bG9hZCA/ICh7XG4gICAgICAgICAgICAgICAgYWJpOiBhcmdzLnBheWxvYWQuYWJpLFxuICAgICAgICAgICAgICAgIG1ldGhvZDogYXJncy5wYXlsb2FkLm1ldGhvZCxcbiAgICAgICAgICAgICAgICBwYXJhbXM6ICgwLCBtb2RlbHNfMS5zZXJpYWxpemVUb2tlbnNPYmplY3QpKGFyZ3MucGF5bG9hZC5wYXJhbXMpLFxuICAgICAgICAgICAgfSkgOiB1bmRlZmluZWQsXG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdHJhbnNhY3Rpb246ICgwLCBtb2RlbHNfMS5wYXJzZVRyYW5zYWN0aW9uKSh0cmFuc2FjdGlvbiksXG4gICAgICAgIH07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNlbmRzIGFuIGludGVybmFsIG1lc3NhZ2UgZnJvbSB0aGUgdXNlciBhY2NvdW50IHdpdGhvdXQgd2FpdGluZyBmb3IgdGhlIHRyYW5zYWN0aW9uLlxuICAgICAqIFNob3dzIGFuIGFwcHJvdmFsIHdpbmRvdyB0byB0aGUgdXNlci5cbiAgICAgKlxuICAgICAqIEBzZWUgbWVzc2FnZVN0YXR1c1VwZGF0ZWRcbiAgICAgKlxuICAgICAqIC0tLVxuICAgICAqIFJlcXVpcmVkIHBlcm1pc3Npb25zOiBgYWNjb3VudEludGVyYWN0aW9uYFxuICAgICAqL1xuICAgIGFzeW5jIHNlbmRNZXNzYWdlRGVsYXllZChhcmdzKSB7XG4gICAgICAgIGF3YWl0IHRoaXMuZW5zdXJlSW5pdGlhbGl6ZWQoKTtcbiAgICAgICAgY29uc3QgdHJhbnNhY3Rpb25zID0gbmV3IHV0aWxzXzEuRGVsYXllZFRyYW5zYWN0aW9ucztcbiAgICAgICAgY29uc3Qgc3Vic2NyaXB0aW9uID0gYXdhaXQgdGhpcy5zdWJzY3JpYmUoJ21lc3NhZ2VTdGF0dXNVcGRhdGVkJyk7XG4gICAgICAgIHN1YnNjcmlwdGlvbi5vbignZGF0YScsIChkYXRhKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWRhdGEuYWRkcmVzcy5lcXVhbHMoYXJncy5zZW5kZXIpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdHJhbnNhY3Rpb25zLmZpbGxUcmFuc2FjdGlvbihkYXRhLmhhc2gsIGRhdGEudHJhbnNhY3Rpb24pO1xuICAgICAgICB9KTtcbiAgICAgICAgY29uc3QgeyBtZXNzYWdlIH0gPSBhd2FpdCB0aGlzLl9hcGkuc2VuZE1lc3NhZ2VEZWxheWVkKHtcbiAgICAgICAgICAgIHNlbmRlcjogYXJncy5zZW5kZXIudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIHJlY2lwaWVudDogYXJncy5yZWNpcGllbnQudG9TdHJpbmcoKSxcbiAgICAgICAgICAgIGFtb3VudDogYXJncy5hbW91bnQsXG4gICAgICAgICAgICBib3VuY2U6IGFyZ3MuYm91bmNlLFxuICAgICAgICAgICAgcGF5bG9hZDogYXJncy5wYXlsb2FkID8gKHtcbiAgICAgICAgICAgICAgICBhYmk6IGFyZ3MucGF5bG9hZC5hYmksXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBhcmdzLnBheWxvYWQubWV0aG9kLFxuICAgICAgICAgICAgICAgIHBhcmFtczogKDAsIG1vZGVsc18xLnNlcmlhbGl6ZVRva2Vuc09iamVjdCkoYXJncy5wYXlsb2FkLnBhcmFtcyksXG4gICAgICAgICAgICB9KSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSkuY2F0Y2goZSA9PiB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKS5jYXRjaChjb25zb2xlLmVycm9yKTtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH0pO1xuICAgICAgICBjb25zdCB0cmFuc2FjdGlvbiA9IHRyYW5zYWN0aW9uc1xuICAgICAgICAgICAgLndhaXRUcmFuc2FjdGlvbihhcmdzLnNlbmRlciwgbWVzc2FnZS5oYXNoKVxuICAgICAgICAgICAgLmZpbmFsbHkoKCkgPT4gc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCkuY2F0Y2goY29uc29sZS5lcnJvcikpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbWVzc2FnZUhhc2g6IG1lc3NhZ2UuaGFzaCxcbiAgICAgICAgICAgIGV4cGlyZUF0OiBtZXNzYWdlLmV4cGlyZUF0LFxuICAgICAgICAgICAgdHJhbnNhY3Rpb24sXG4gICAgICAgIH07XG4gICAgfVxuICAgIF9yZWdpc3RlckV2ZW50SGFuZGxlcnMocHJvdmlkZXIpIHtcbiAgICAgICAgY29uc3Qga25vd25FdmVudHMgPSB7XG4gICAgICAgICAgICAnY29ubmVjdGVkJzogKGRhdGEpID0+IGRhdGEsXG4gICAgICAgICAgICAnZGlzY29ubmVjdGVkJzogKGRhdGEpID0+IGRhdGEsXG4gICAgICAgICAgICAndHJhbnNhY3Rpb25zRm91bmQnOiAoZGF0YSkgPT4gKHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiBuZXcgdXRpbHNfMS5BZGRyZXNzKGRhdGEuYWRkcmVzcyksXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb25zOiBkYXRhLnRyYW5zYWN0aW9ucy5tYXAobW9kZWxzXzEucGFyc2VUcmFuc2FjdGlvbiksXG4gICAgICAgICAgICAgICAgaW5mbzogZGF0YS5pbmZvLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAnY29udHJhY3RTdGF0ZUNoYW5nZWQnOiAoZGF0YSkgPT4gKHtcbiAgICAgICAgICAgICAgICBhZGRyZXNzOiBuZXcgdXRpbHNfMS5BZGRyZXNzKGRhdGEuYWRkcmVzcyksXG4gICAgICAgICAgICAgICAgc3RhdGU6IGRhdGEuc3RhdGUsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICdtZXNzYWdlU3RhdHVzVXBkYXRlZCc6IChkYXRhKSA9PiAoe1xuICAgICAgICAgICAgICAgIGFkZHJlc3M6IG5ldyB1dGlsc18xLkFkZHJlc3MoZGF0YS5hZGRyZXNzKSxcbiAgICAgICAgICAgICAgICBoYXNoOiBkYXRhLmhhc2gsXG4gICAgICAgICAgICAgICAgdHJhbnNhY3Rpb246IGRhdGEudHJhbnNhY3Rpb24gIT0gbnVsbCA/ICgwLCBtb2RlbHNfMS5wYXJzZVRyYW5zYWN0aW9uKShkYXRhLnRyYW5zYWN0aW9uKSA6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgJ25ldHdvcmtDaGFuZ2VkJzogZGF0YSA9PiBkYXRhLFxuICAgICAgICAgICAgJ3Blcm1pc3Npb25zQ2hhbmdlZCc6IChkYXRhKSA9PiAoe1xuICAgICAgICAgICAgICAgIHBlcm1pc3Npb25zOiAoMCwgbW9kZWxzXzEucGFyc2VQZXJtaXNzaW9ucykoZGF0YS5wZXJtaXNzaW9ucyksXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICdsb2dnZWRPdXQnOiBkYXRhID0+IGRhdGEsXG4gICAgICAgIH07XG4gICAgICAgIGZvciAoY29uc3QgW2V2ZW50TmFtZSwgZXh0cmFjdG9yXSBvZiBPYmplY3QuZW50cmllcyhrbm93bkV2ZW50cykpIHtcbiAgICAgICAgICAgIHByb3ZpZGVyLmFkZExpc3RlbmVyKGV2ZW50TmFtZSwgKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBoYW5kbGVycyA9IHRoaXMuX3N1YnNjcmlwdGlvbnNbZXZlbnROYW1lXTtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXJzZWQgPSBleHRyYWN0b3IoZGF0YSk7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBoYW5kbGVyIG9mIGhhbmRsZXJzLnZhbHVlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIGhhbmRsZXIocGFyc2VkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydHMuUHJvdmlkZXJScGNDbGllbnQgPSBQcm92aWRlclJwY0NsaWVudDtcbi8qKlxuICogQGNhdGVnb3J5IFByb3ZpZGVyXG4gKi9cbmNsYXNzIFByb3ZpZGVyTm90Rm91bmRFeGNlcHRpb24gZXh0ZW5kcyBFcnJvciB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHN1cGVyKCdFdmVyc2NhbGUgcHJvdmlkZXIgd2FzIG5vdCBmb3VuZCcpO1xuICAgIH1cbn1cbmV4cG9ydHMuUHJvdmlkZXJOb3RGb3VuZEV4Y2VwdGlvbiA9IFByb3ZpZGVyTm90Rm91bmRFeGNlcHRpb247XG4vKipcbiAqIEBjYXRlZ29yeSBQcm92aWRlclxuICovXG5jbGFzcyBQcm92aWRlck5vdEluaXRpYWxpemVkRXhjZXB0aW9uIGV4dGVuZHMgRXJyb3Ige1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcignRXZlcnNjYWxlIHByb3ZpZGVyIHdhcyBub3QgaW5pdGlhbGl6ZWQgeWV0Jyk7XG4gICAgfVxufVxuZXhwb3J0cy5Qcm92aWRlck5vdEluaXRpYWxpemVkRXhjZXB0aW9uID0gUHJvdmlkZXJOb3RJbml0aWFsaXplZEV4Y2VwdGlvbjtcbmZ1bmN0aW9uIGZvbGRTdWJzY3JpcHRpb25zKHN1YnNjcmlwdGlvbnMsIGV4Y2VwdCkge1xuICAgIGNvbnN0IHRvdGFsID0geyBzdGF0ZTogZmFsc2UsIHRyYW5zYWN0aW9uczogZmFsc2UgfTtcbiAgICBjb25zdCB3aXRob3V0RXhjbHVkZWQgPSBPYmplY3QuYXNzaWduKHt9LCB0b3RhbCk7XG4gICAgZm9yIChjb25zdCBpdGVtIG9mIHN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgaWYgKHdpdGhvdXRFeGNsdWRlZC50cmFuc2FjdGlvbnMgJiYgd2l0aG91dEV4Y2x1ZGVkLnN0YXRlKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICB0b3RhbC5zdGF0ZSB8fCAodG90YWwuc3RhdGUgPSBpdGVtLnN0YXRlKTtcbiAgICAgICAgdG90YWwudHJhbnNhY3Rpb25zIHx8ICh0b3RhbC50cmFuc2FjdGlvbnMgPSBpdGVtLnRyYW5zYWN0aW9ucyk7XG4gICAgICAgIGlmIChpdGVtICE9PSBleGNlcHQpIHtcbiAgICAgICAgICAgIHdpdGhvdXRFeGNsdWRlZC5zdGF0ZSB8fCAod2l0aG91dEV4Y2x1ZGVkLnN0YXRlID0gaXRlbS5zdGF0ZSk7XG4gICAgICAgICAgICB3aXRob3V0RXhjbHVkZWQudHJhbnNhY3Rpb25zIHx8ICh3aXRob3V0RXhjbHVkZWQudHJhbnNhY3Rpb25zID0gaXRlbS50cmFuc2FjdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB7IHRvdGFsLCB3aXRob3V0RXhjbHVkZWQgfTtcbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/everscale-inpage-provider/dist/index.js\n");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/models.js":
/*!***************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/models.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.parseTokensObject = exports.serializeTokensObject = exports.parseAccountInteraction = exports.parsePermissions = exports.parseMessage = exports.serializeMessage = exports.parseTransaction = exports.serializeTransaction = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/everscale-inpage-provider/dist/utils.js\");\n/**\n * @category Models\n */\nfunction serializeTransaction(transaction) {\n    return {\n        ...transaction,\n        inMessage: serializeMessage(transaction.inMessage),\n        outMessages: transaction.outMessages.map(serializeMessage),\n    };\n}\nexports.serializeTransaction = serializeTransaction;\n/**\n * @category Models\n */\nfunction parseTransaction(transaction) {\n    return {\n        ...transaction,\n        inMessage: parseMessage(transaction.inMessage),\n        outMessages: transaction.outMessages.map(parseMessage),\n    };\n}\nexports.parseTransaction = parseTransaction;\n/**\n * @category Models\n */\nfunction serializeMessage(message) {\n    return {\n        ...message,\n        src: message.src ? message.src.toString() : undefined,\n        dst: message.dst ? message.dst.toString() : undefined,\n    };\n}\nexports.serializeMessage = serializeMessage;\n/**\n * @category Models\n */\nfunction parseMessage(message) {\n    return {\n        ...message,\n        src: message.src ? new utils_1.Address(message.src) : undefined,\n        dst: message.dst ? new utils_1.Address(message.dst) : undefined,\n    };\n}\nexports.parseMessage = parseMessage;\n/**\n * @category Models\n */\nfunction parsePermissions(permissions) {\n    return {\n        ...permissions,\n        accountInteraction: permissions.accountInteraction ? parseAccountInteraction(permissions.accountInteraction) : undefined,\n    };\n}\nexports.parsePermissions = parsePermissions;\n/**\n * @category Models\n */\nfunction parseAccountInteraction(accountInteraction) {\n    return {\n        ...accountInteraction,\n        address: new utils_1.Address(accountInteraction.address),\n    };\n}\nexports.parseAccountInteraction = parseAccountInteraction;\n/**\n * @category Models\n */\nfunction serializeTokensObject(object) {\n    return serializeTokenValue(object);\n}\nexports.serializeTokensObject = serializeTokensObject;\nfunction serializeTokenValue(token) {\n    if (token instanceof utils_1.Address) {\n        return token.toString();\n    }\n    if (Array.isArray(token)) {\n        const result = [];\n        for (const item of token) {\n            result.push(serializeTokenValue(item));\n        }\n        return result;\n    }\n    else if (token != null && typeof token === 'object') {\n        const result = {};\n        for (const [key, value] of Object.entries(token)) {\n            result[key] = serializeTokenValue(value);\n        }\n        return result;\n    }\n    else {\n        return token;\n    }\n}\n/**\n * @category Models\n */\nfunction parseTokensObject(params, object) {\n    const result = {};\n    for (const param of params) {\n        result[param.name] = parseTokenValue(param, object[param.name]);\n    }\n    return result;\n}\nexports.parseTokensObject = parseTokensObject;\nfunction parseTokenValue(param, token) {\n    if (!param.type.startsWith('map')) {\n        const isArray = param.type.endsWith('[]');\n        const isOptional = !isArray && param.type.startsWith('optional');\n        const rawType = (isArray ?\n            param.type.slice(0, -2) :\n            isOptional ?\n                param.type.slice(9, -1) :\n                param.type);\n        if (isArray) {\n            const rawParam = { name: param.name, type: rawType, components: param.components };\n            const result = [];\n            for (const item of token) {\n                result.push(parseTokenValue(rawParam, item));\n            }\n            return result;\n        }\n        else if (isOptional) {\n            if (token == null) {\n                return null;\n            }\n            else {\n                const rawParam = { name: param.name, type: rawType, components: param.components };\n                return parseTokenValue(rawParam, token);\n            }\n        }\n        else if (rawType === 'tuple') {\n            const result = {};\n            if (param.components != null) {\n                for (const component of param.components) {\n                    result[component.name] = parseTokenValue(component, token[component.name]);\n                }\n            }\n            return result;\n        }\n        else if (rawType === 'address') {\n            return new utils_1.Address(token);\n        }\n        else {\n            return token;\n        }\n    }\n    else {\n        let [keyType, valueType] = param.type.split(',');\n        keyType = keyType.slice(4);\n        valueType = valueType.slice(0, -1);\n        const result = [];\n        for (const [key, value] of token) {\n            result.push([parseTokenValue({\n                    name: '',\n                    type: keyType,\n                }, key), parseTokenValue({\n                    name: '',\n                    type: valueType,\n                    components: param.components,\n                }, value)]);\n        }\n        return result;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-inpage-provider/dist/models.js\n");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/stream.js":
/*!***************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/stream.js ***!
  \***************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Subscriber = void 0;\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/everscale-inpage-provider/dist/utils.js\");\nconst models_1 = __webpack_require__(/*! ./models */ \"./node_modules/everscale-inpage-provider/dist/models.js\");\n/**\n * @category Stream\n */\nclass Subscriber {\n    constructor(provider) {\n        this.provider = provider;\n        this.subscriptions = new Map();\n        this.scanners = new Map();\n        this.unsubscribe = async () => this._unsubscribe();\n    }\n    /**\n     * Returns a stream of new transactions\n     */\n    transactions(address) {\n        return this._addSubscription('transactionsFound', address, false);\n    }\n    /**\n     * Returns a finite stream of child transactions\n     * @param transaction - root transaction\n     */\n    trace(transaction) {\n        const id = (0, utils_1.getUniqueId)();\n        return new StreamImpl((onData, onEnd) => {\n            const scanner = new TraceTransactionsScanner(this.provider, {\n                origin: transaction,\n                onData,\n                onEnd: (eof) => {\n                    this.scanners.delete(id);\n                    onEnd(eof);\n                },\n            });\n            this.scanners.set(id, scanner);\n            scanner.start();\n            // Subscription is not required\n            return Promise.resolve();\n        }, async () => {\n            const scanner = this.scanners.get(id);\n            if (scanner != null) {\n                this.scanners.delete(id);\n                await scanner.stop();\n            }\n        }, identity, true);\n    }\n    /**\n     * Returns a stream of old transactions\n     */\n    oldTransactions(address, filter) {\n        const id = (0, utils_1.getUniqueId)();\n        return new StreamImpl((onData, onEnd) => {\n            const scanner = new UnorderedTransactionsScanner(this.provider, {\n                address,\n                onData,\n                onEnd: (eof) => {\n                    this.scanners.delete(id);\n                    onEnd(eof);\n                },\n                ...filter,\n            });\n            this.scanners.set(id, scanner);\n            scanner.start();\n            // Subscription is not required\n            return Promise.resolve();\n        }, async () => {\n            const scanner = this.scanners.get(id);\n            if (scanner != null) {\n                this.scanners.delete(id);\n                await scanner.stop();\n            }\n        }, identity, true);\n    }\n    states(address) {\n        return this._addSubscription('contractStateChanged', address, false);\n    }\n    async _unsubscribe() {\n        const tasks = [];\n        for (const item of this.subscriptions.values()) {\n            for (const [event, eventData] of Object.entries(item)) {\n                delete item[event];\n                if (eventData != null) {\n                    tasks.push(eventData.subscription\n                        .then(item => item.unsubscribe())\n                        .catch(() => {\n                    }));\n                }\n            }\n        }\n        this.subscriptions.clear();\n        for (const scanner of this.scanners.values()) {\n            tasks.push(scanner.stop());\n        }\n        this.scanners.clear();\n        await Promise.all(tasks);\n    }\n    _addSubscription(event, address, isFinite) {\n        const rawAddress = address.toString();\n        const stopProducer = (id) => {\n            const subscriptions = this.subscriptions.get(rawAddress);\n            if (subscriptions == null) {\n                // No subscriptions for the address\n                return;\n            }\n            const eventData = subscriptions[event];\n            if (eventData != null) {\n                const handler = eventData.handlers.get(id);\n                if (handler != null) {\n                    // Remove event handler with the id\n                    eventData.handlers.delete(id);\n                    const { queue, onEnd, state } = handler;\n                    if (!state.finished) {\n                        state.finished = true;\n                        queue.clear();\n                        queue.enqueue(async () => onEnd(state.eof));\n                    }\n                }\n                // Remove event data subscription if there are none of them\n                if (eventData.handlers.size === 0) {\n                    const subscription = eventData.subscription;\n                    delete subscriptions[event];\n                    subscription\n                        .then((subscription) => subscription.unsubscribe())\n                        .catch(console.debug);\n                }\n            }\n            // Remove address subscriptions object if it is empty\n            if (subscriptions.contractStateChanged == null && subscriptions.transactionsFound == null) {\n                this.subscriptions.delete(rawAddress);\n            }\n        };\n        const id = (0, utils_1.getUniqueId)();\n        return new StreamImpl((onData, onEnd) => {\n            const subscriptions = this.subscriptions.get(rawAddress);\n            let eventData = subscriptions === null || subscriptions === void 0 ? void 0 : subscriptions[event];\n            const state = { eof: false, finished: false };\n            // Create handler object\n            const handler = {\n                onData,\n                onEnd,\n                queue: new PromiseQueue(),\n                state,\n            };\n            if (eventData != null) {\n                // Add handler if there is already a handler group\n                eventData.handlers.set(id, handler);\n                return Promise.resolve();\n            }\n            // Create handlers group\n            const handlers = new Map();\n            handlers.set(id, handler);\n            // Create subscription\n            const subscription = this.provider.subscribe(event, { address })\n                .then((subscription) => {\n                subscription.on('data', (data) => {\n                    for (const { onData, queue, state } of handlers.values()) {\n                        // Skip closed streams\n                        if (state.eof || state.finished) {\n                            continue;\n                        }\n                        queue.enqueue(async () => {\n                            if (!(await onData(data))) {\n                                state.eof = true;\n                                stopProducer(id);\n                            }\n                        });\n                    }\n                });\n                subscription.on('unsubscribed', () => {\n                    for (const id of handlers.keys()) {\n                        stopProducer(id);\n                    }\n                });\n                return subscription;\n            }).catch((e) => {\n                console.error(e);\n                for (const id of handlers.keys()) {\n                    stopProducer(id);\n                }\n                throw e;\n            });\n            // Add event data to subscriptions\n            eventData = { subscription, handlers };\n            if (subscriptions == null) {\n                this.subscriptions.set(rawAddress, { [event]: eventData });\n            }\n            else {\n                subscriptions[event] = eventData;\n            }\n            // Wait until subscribed\n            return subscription.then(() => {\n            });\n        }, () => stopProducer(id), identity, isFinite);\n    }\n}\nexports.Subscriber = Subscriber;\nasync function identity(item, handler) {\n    return handler(item);\n}\nclass StreamImpl {\n    constructor(makeProducer, stopProducer, extractor, isFinite) {\n        this.makeProducer = makeProducer;\n        this.stopProducer = stopProducer;\n        this.extractor = extractor;\n        this.isFinite = isFinite;\n        /**\n         * Folds every element into an accumulator by applying an operation, returning the final result\n         */\n        this.fold = this.onlyFinite((init, f, ctx) => {\n            let state = init;\n            return new Promise((resolve, reject) => {\n                const subscribed = this.makeProducer(\n                // onData\n                (data) => this.extractor(data, async (item) => {\n                    state = await f(state, item);\n                    return true;\n                }), \n                // onEnd\n                (eof) => {\n                    if (eof) {\n                        resolve(state);\n                    }\n                    else {\n                        reject(new Error('Subscription closed'));\n                    }\n                });\n                if (ctx != null) {\n                    ctx.subscribed = subscribed;\n                }\n            });\n        });\n        /**\n         * Waits until the end of the stream\n         */\n        this.finished = this.onlyFinite((ctx) => {\n            return new Promise((resolve, reject) => {\n                const subscribed = this.makeProducer(\n                // onData\n                (data) => this.extractor(data, (_item) => true), \n                // onEnd\n                (eof) => {\n                    if (eof) {\n                        resolve(undefined);\n                    }\n                    else {\n                        reject(new Error('Subscription closed'));\n                    }\n                });\n                if (ctx != null) {\n                    ctx.subscribed = subscribed;\n                }\n            });\n        });\n    }\n    async delayed(f) {\n        const { subscribed, result } = f({\n            first: (() => {\n                const ctx = {};\n                const result = this.first(ctx);\n                return { subscribed: ctx.subscribed, result };\n            }),\n            on: (handler) => {\n                const ctx = {};\n                this.on(handler, ctx);\n                return { subscribed: ctx.subscribed, result: undefined };\n            },\n            fold: this.fold != null ? (init, f) => {\n                const ctx = {};\n                const result = this.fold(init, f, ctx);\n                return { subscribed: ctx.subscribed, result };\n            } : undefined,\n            finished: this.finished != null ? () => {\n                const ctx = {};\n                const result = this.finished(ctx);\n                return { subscribed: ctx.subscribed, result };\n            } : undefined,\n        });\n        await subscribed;\n        return () => result;\n    }\n    first(ctx) {\n        const state = { found: false };\n        return new Promise((resolve, reject) => {\n            const subscribed = this.makeProducer(\n            // onData\n            (data) => this.extractor(data, (item) => {\n                Object.assign(state, { found: true, result: item });\n                return false;\n            }), \n            // onEnd\n            (eof) => {\n                if (eof) {\n                    if (this.isFinite) {\n                        resolve((state.found ? state.result : undefined));\n                    }\n                    else if (state.found) {\n                        resolve(state.result);\n                    }\n                    else {\n                        reject(new Error('Unexpected end of stream'));\n                    }\n                }\n                else {\n                    reject(new Error('Subscription closed'));\n                }\n            });\n            if (ctx != null) {\n                ctx.subscribed = subscribed;\n            }\n        });\n    }\n    on(handler, ctx) {\n        const subscribed = this.makeProducer((event) => this.extractor(event, async (item) => {\n            await handler(item);\n            return true;\n        }), (_eof) => {\n        });\n        if (ctx != null) {\n            ctx.subscribed = subscribed;\n        }\n    }\n    merge(other) {\n        return new StreamImpl((onData, onEnd) => {\n            const state = {\n                stopped: false,\n                counter: 0,\n            };\n            const checkEnd = (eof) => {\n                if (state.stopped) {\n                    return;\n                }\n                if (++state.counter == 2 || !eof) {\n                    state.stopped = true;\n                    onEnd(eof);\n                }\n            };\n            return Promise.all([\n                this.makeProducer(onData, checkEnd),\n                other.makeProducer(onData, checkEnd),\n            ]).then(() => {\n            });\n        }, () => {\n            this.stopProducer();\n            other.stopProducer();\n        }, this.extractor, (this.isFinite && other.isFinite));\n    }\n    enumerate() {\n        const state = {\n            index: 0,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            return handler({\n                index: state.index++,\n                item,\n            });\n        }), this.isFinite);\n    }\n    tap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            await f(item);\n            return handler(item);\n        }), this.isFinite);\n    }\n    filter(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (await f(item)) {\n                return handler(item);\n            }\n            else {\n                return true;\n            }\n        }), this.isFinite);\n    }\n    filterMap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const newItem = await f(item);\n            if (newItem !== undefined) {\n                return handler(newItem);\n            }\n            else {\n                return true;\n            }\n        }), this.isFinite);\n    }\n    map(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const newItem = await f(item);\n            return handler(newItem);\n        }), this.isFinite);\n    }\n    flatMap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const items = await f(item);\n            for (const newItem of items) {\n                if (!(await handler(newItem))) {\n                    return false;\n                }\n            }\n            return true;\n        }), this.isFinite);\n    }\n    skip(n) {\n        const state = {\n            index: 0,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, (item) => {\n            if (state.index >= n) {\n                return handler(item);\n            }\n            else {\n                ++state.index;\n                return true;\n            }\n        }), this.isFinite);\n    }\n    skipWhile(f) {\n        const state = {\n            shouldSkip: true,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (!state.shouldSkip || !(await f(item))) {\n                state.shouldSkip = false;\n                return handler(item);\n            }\n            else {\n                return true;\n            }\n        }), this.isFinite);\n    }\n    take(n) {\n        const state = {\n            index: 0,\n        };\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, (item) => {\n            if (state.index < n) {\n                ++state.index;\n                return handler(item);\n            }\n            else {\n                return false;\n            }\n        }), true);\n    }\n    takeWhile(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            if (await f(item)) {\n                return handler(item);\n            }\n            else {\n                return false;\n            }\n        }), true);\n    }\n    takeWhileMap(f) {\n        return new StreamImpl(this.makeProducer, this.stopProducer, (event, handler) => this.extractor(event, async (item) => {\n            const newItem = await f(item);\n            if (newItem !== undefined) {\n                return handler(newItem);\n            }\n            else {\n                return false;\n            }\n        }), true);\n    }\n    onlyFinite(f) {\n        if (this.isFinite) {\n            return f;\n        }\n        else {\n            return undefined;\n        }\n    }\n}\nclass UnorderedTransactionsScanner {\n    constructor(provider, params) {\n        this.provider = provider;\n        this.params = params;\n        this.queue = new PromiseQueue();\n        this.isRunning = false;\n    }\n    start() {\n        if (this.isRunning || this.promise != null) {\n            return;\n        }\n        this.isRunning = true;\n        this.promise = (async () => {\n            const params = this.params;\n            const state = {\n                complete: false,\n            };\n            while (this.isRunning && !state.complete) {\n                try {\n                    const { transactions, continuation } = await this.provider.getTransactions({\n                        address: this.params.address,\n                        continuation: this.continuation,\n                    });\n                    state.complete = !state.complete && transactions.length == null;\n                    if (!this.isRunning || state.complete) {\n                        break;\n                    }\n                    const filteredTransactions = transactions.filter((item) => ((params.fromLt == null || utils_1.LT_COLLATOR.compare(item.id.lt, params.fromLt) > 0) &&\n                        (params.fromUtime == null || item.createdAt > params.fromUtime)));\n                    if (filteredTransactions.length == 0) {\n                        state.complete = true;\n                        break;\n                    }\n                    const info = {\n                        maxLt: filteredTransactions[0].id.lt,\n                        minLt: filteredTransactions[filteredTransactions.length - 1].id.lt,\n                        batchType: 'old',\n                    };\n                    this.queue.enqueue(async () => {\n                        const isRunning = this.params.onData({\n                            address: this.params.address,\n                            transactions: filteredTransactions,\n                            info,\n                        });\n                        if (!isRunning) {\n                            state.complete = true;\n                            this.isRunning = false;\n                        }\n                    });\n                    if (continuation != null) {\n                        this.continuation = continuation;\n                    }\n                    else {\n                        state.complete = true;\n                        break;\n                    }\n                }\n                catch (e) {\n                    console.error(e);\n                }\n            }\n            this.queue.enqueue(async () => this.params.onEnd(state.complete));\n            this.isRunning = false;\n            this.continuation = undefined;\n        })();\n    }\n    async stop() {\n        this.isRunning = false;\n        this.queue.clear();\n        if (this.promise != null) {\n            await this.promise;\n        }\n        else {\n            this.params.onEnd(false);\n        }\n    }\n}\nclass TraceTransactionsScanner {\n    constructor(provider, params) {\n        this.provider = provider;\n        this.params = params;\n        this.queue = new PromiseQueue();\n        this.isRunning = false;\n        this.semaphore = new utils_1.Semaphore(10);\n    }\n    start() {\n        if (this.isRunning || this.promise != null) {\n            return;\n        }\n        const provider = this.provider;\n        this.isRunning = true;\n        this.promise = (async () => {\n            const state = {\n                complete: false,\n            };\n            const makePendingTransaction = (messageHash) => {\n                const state = { stopped: false };\n                const promise = (async () => {\n                    let timeout = 500;\n                    while (true) {\n                        const release = await this.semaphore.acquire();\n                        if (state.stopped) {\n                            release();\n                            return;\n                        }\n                        const result = await provider.rawApi.findTransaction({\n                            inMessageHash: messageHash,\n                        }).catch(() => ({ transaction: undefined })).finally(() => release());\n                        if (state.stopped) {\n                            return;\n                        }\n                        if (result.transaction != null) {\n                            const transaction = (0, models_1.parseTransaction)(result.transaction);\n                            transaction.account = transaction.inMessage.dst;\n                            return transaction;\n                        }\n                        let resolve;\n                        const promise = new Promise((resolvePromise, rejectPromise) => {\n                            resolve = () => resolvePromise();\n                            state.reject = () => rejectPromise();\n                        });\n                        state.timeout = setTimeout(resolve, timeout);\n                        await promise;\n                        if (state.stopped) {\n                            return;\n                        }\n                        state.reject = undefined;\n                        timeout = Math.min(timeout * 2, 3000);\n                    }\n                })();\n                const reject = () => {\n                    var _a;\n                    state.stopped = true;\n                    (_a = state.reject) === null || _a === void 0 ? void 0 : _a.call(state);\n                    if (state.timeout != null) {\n                        clearTimeout(state.timeout);\n                    }\n                };\n                return { promise, reject };\n            };\n            const transactionsQueue = [this.params.origin];\n            try {\n                outer: while (this.isRunning) {\n                    const transaction = transactionsQueue.shift();\n                    if (transaction == null) {\n                        state.complete = true;\n                        break;\n                    }\n                    // Spawn promises\n                    const pendingTransactions = transaction\n                        .outMessages\n                        .filter((message) => message.dst != null)\n                        .map((message) => {\n                        const messageHash = message.hash;\n                        return makePendingTransaction(messageHash);\n                    });\n                    this.pendingTransactions = pendingTransactions;\n                    for (const { promise } of pendingTransactions) {\n                        const childTransaction = await promise;\n                        if (!this.isRunning || state.complete || childTransaction == null) {\n                            break outer;\n                        }\n                        this.queue.enqueue(async () => {\n                            const isRunning = this.params.onData(childTransaction);\n                            if (!isRunning) {\n                                state.complete = true;\n                                this.isRunning = false;\n                                this.rejectPendingTransactions();\n                            }\n                        });\n                        transactionsQueue.push(childTransaction);\n                    }\n                    this.pendingTransactions = undefined;\n                }\n            }\n            catch (e) {\n                console.error(e);\n                /* do nothing */\n            }\n            finally {\n                this.queue.enqueue(async () => this.params.onEnd(state.complete));\n                this.isRunning = false;\n                this.rejectPendingTransactions();\n            }\n        })();\n    }\n    async stop() {\n        this.isRunning = false;\n        this.queue.clear();\n        this.rejectPendingTransactions();\n        if (this.promise != null) {\n            await this.promise;\n        }\n        else {\n            this.params.onEnd(false);\n        }\n    }\n    rejectPendingTransactions() {\n        if (this.pendingTransactions != null) {\n            for (const pendingTransaction of this.pendingTransactions) {\n                pendingTransaction.reject();\n            }\n            this.pendingTransactions = undefined;\n        }\n        this.semaphore.releaseAll();\n    }\n}\nclass PromiseQueue {\n    constructor() {\n        this.queue = [];\n        this.workingOnPromise = false;\n    }\n    enqueue(promise) {\n        this.queue.push(promise);\n        this._dequeue().catch(() => {\n        });\n    }\n    clear() {\n        this.queue.length = 0;\n    }\n    async _dequeue() {\n        if (this.workingOnPromise) {\n            return;\n        }\n        const item = this.queue.shift();\n        if (!item) {\n            return;\n        }\n        this.workingOnPromise = true;\n        item()\n            .then(() => {\n            this.workingOnPromise = false;\n            this._dequeue();\n        })\n            .catch(() => {\n            this.workingOnPromise = false;\n            this._dequeue();\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-inpage-provider/dist/stream.js\n");

/***/ }),

/***/ "./node_modules/everscale-inpage-provider/dist/utils.js":
/*!**************************************************************!*\
  !*** ./node_modules/everscale-inpage-provider/dist/utils.js ***!
  \**************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getUniqueId = exports.mergeTransactions = exports.LT_COLLATOR = exports.Semaphore = exports.DelayedTransactions = exports.MessageExpiredException = exports.AddressLiteral = exports.Address = void 0;\n/**\n * @category Utils\n */\nclass Address {\n    constructor(address) {\n        this.equals = (other) => this._equals(other);\n        this._address = address;\n    }\n    toString() {\n        return this._address;\n    }\n    toJSON() {\n        return this._address;\n    }\n    _equals(other) {\n        if (other instanceof Address) {\n            return this._address === other._address;\n        }\n        else {\n            return this._address === other;\n        }\n    }\n}\nexports.Address = Address;\n/**\n * @category Utils\n */\nclass AddressLiteral extends Address {\n    constructor(address) {\n        super(address);\n    }\n}\nexports.AddressLiteral = AddressLiteral;\n/**\n * @category Utils\n */\nclass MessageExpiredException extends Error {\n    constructor(address, hash) {\n        super('Message expired');\n        this.address = address;\n        this.hash = hash;\n    }\n}\nexports.MessageExpiredException = MessageExpiredException;\nclass DelayedTransactions {\n    constructor() {\n        this.transactions = new Map();\n    }\n    async waitTransaction(address, hash) {\n        var _a;\n        let transaction = (_a = this.transactions.get(hash)) === null || _a === void 0 ? void 0 : _a.promise;\n        if (transaction == null) {\n            let resolve;\n            let reject;\n            transaction = new Promise((promiseResolve, promiseReject) => {\n                resolve = (tx) => promiseResolve(tx);\n                reject = () => promiseReject();\n            });\n            this.transactions.set(hash, {\n                promise: transaction,\n                resolve: resolve,\n                reject: reject,\n            });\n        }\n        const tx = await transaction;\n        if (tx == null) {\n            throw new MessageExpiredException(address, hash);\n        }\n        return tx;\n    }\n    fillTransaction(hash, transaction) {\n        const pendingTransaction = this.transactions.get(hash);\n        if (pendingTransaction != null) {\n            pendingTransaction.resolve(transaction);\n        }\n        else {\n            this.transactions.set(hash, {\n                promise: Promise.resolve(transaction),\n                resolve: () => {\n                },\n                reject: () => {\n                },\n            });\n        }\n    }\n}\nexports.DelayedTransactions = DelayedTransactions;\n/**\n * @category Utils\n */\nclass Semaphore {\n    constructor(count) {\n        this.tasks = [];\n        this.sched = () => {\n            var _a;\n            if (this.count > 0 && this.tasks.length > 0) {\n                this.count--;\n                (_a = this.tasks.shift()) === null || _a === void 0 ? void 0 : _a();\n            }\n        };\n        this.count = count;\n    }\n    acquire() {\n        return new Promise((res, _rej) => {\n            this.tasks.push(() => {\n                let released = false;\n                res(() => {\n                    if (!released) {\n                        released = true;\n                        this.count++;\n                        this.sched();\n                    }\n                });\n            });\n            nextTick(this.sched);\n        });\n    }\n    releaseAll() {\n        var _a;\n        while (this.tasks.length > 0) {\n            (_a = this.tasks.shift()) === null || _a === void 0 ? void 0 : _a();\n        }\n    }\n}\nexports.Semaphore = Semaphore;\nfunction byObserver(Observer) {\n    const node = document.createTextNode('');\n    let queue, currentQueue, bit = 0, i = 0;\n    new Observer(function () {\n        let callback;\n        if (!queue) {\n            if (!currentQueue)\n                return;\n            queue = currentQueue;\n        }\n        else if (currentQueue) {\n            queue = currentQueue.slice(i).concat(queue);\n        }\n        currentQueue = queue;\n        queue = null;\n        i = 0;\n        if (typeof currentQueue === 'function') {\n            callback = currentQueue;\n            currentQueue = null;\n            callback();\n            return;\n        }\n        node.data = (bit = ++bit % 2);\n        while (i < currentQueue.length) {\n            callback = currentQueue[i];\n            i++;\n            if (i === currentQueue.length)\n                currentQueue = null;\n            callback();\n        }\n    }).observe(node, { characterData: true });\n    return function (fn) {\n        if (queue) {\n            if (typeof queue === 'function')\n                queue = [queue, fn];\n            else\n                queue.push(fn);\n            return;\n        }\n        queue = fn;\n        node.data = (bit = ++bit % 2);\n    };\n}\nconst nextTick = (function () {\n    // queueMicrotask\n    if (typeof queueMicrotask === 'function') {\n        return queueMicrotask;\n    }\n    // MutationObserver\n    if ((typeof document === 'object') && document) {\n        if (typeof MutationObserver === 'function')\n            return byObserver(MutationObserver);\n        if (typeof window.WebKitMutationObserver === 'function')\n            return byObserver(window.WebKitMutationObserver);\n    }\n    /* @ts-ignore */\n    if (typeof setImmediate === 'function') {\n        /* @ts-ignore */\n        return setImmediate;\n    }\n    if ((typeof setTimeout === 'function') || (typeof setTimeout === 'object')) {\n        return function (cb) {\n            setTimeout(cb, 0);\n        };\n    }\n    throw new Error('No `nextTick` implementation found');\n}());\n/**\n * @category Utils\n */\nexports.LT_COLLATOR = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\n/**\n * Modifies knownTransactions array, merging it with new transactions.\n * All arrays are assumed to be sorted by descending logical time.\n *\n * > Note! This method does not remove duplicates.\n *\n * @param knownTransactions\n * @param newTransactions\n * @param info\n *\n * @category Utils\n */\nfunction mergeTransactions(knownTransactions, newTransactions, info) {\n    if (info.batchType === 'old') {\n        knownTransactions.push(...newTransactions);\n        return knownTransactions;\n    }\n    if (knownTransactions.length === 0) {\n        knownTransactions.push(...newTransactions);\n        return knownTransactions;\n    }\n    // Example:\n    // known lts: [N, N-1, N-2, N-3, (!) N-10,...]\n    // new lts: [N-4, N-5]\n    // batch info: { minLt: N-5, maxLt: N-4, batchType: 'new' }\n    // 1. Skip indices until known transaction lt is greater than the biggest in the batch\n    let i = 0;\n    while (i < knownTransactions.length &&\n        exports.LT_COLLATOR.compare(knownTransactions[i].id.lt, info.maxLt) >= 0) {\n        ++i;\n    }\n    // 2. Insert new transactions\n    knownTransactions.splice(i, 0, ...newTransactions);\n    return knownTransactions;\n}\nexports.mergeTransactions = mergeTransactions;\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\nfunction getUniqueId() {\n    idCounter = (idCounter + 1) % MAX;\n    return idCounter;\n}\nexports.getUniqueId = getUniqueId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-inpage-provider/dist/utils.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/AccountsStorage/Generic.js":
/*!************************************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/AccountsStorage/Generic.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.MsigAccount = exports.GenericAccount = void 0;\nconst everscale_inpage_provider_1 = __webpack_require__(/*! everscale-inpage-provider */ \"./node_modules/everscale-inpage-provider/dist/index.js\");\n/**\n * @category AccountsStorage\n */\nclass GenericAccount {\n    constructor(args) {\n        this.address = args.address instanceof everscale_inpage_provider_1.Address ? args.address : new everscale_inpage_provider_1.Address(args.address);\n        this.abi = typeof args.abi === 'string' ? args.abi : JSON.stringify(args.abi);\n        this.prepareMessageImpl = args.prepareMessage;\n        this.publicKey = args.publicKey;\n    }\n    async fetchPublicKey(ctx) {\n        if (this.publicKey != null) {\n            return this.publicKey;\n        }\n        this.publicKey = await ctx.fetchPublicKey(this.address);\n        return this.publicKey;\n    }\n    async prepareMessage(args, ctx) {\n        const publicKey = await this.fetchPublicKey(ctx);\n        const signer = await ctx.getSigner(publicKey);\n        const { method, params, stateInit } = await this.prepareMessageImpl(args, ctx);\n        return await ctx.createExternalMessage({\n            address: this.address,\n            signer,\n            timeout: args.timeout,\n            abi: this.abi,\n            method,\n            params,\n            stateInit,\n        });\n    }\n}\nexports.GenericAccount = GenericAccount;\n/**\n * @category AccountsStorage\n */\nclass MsigAccount extends GenericAccount {\n    constructor(args) {\n        super({\n            address: args.address,\n            publicKey: args.publicKey,\n            abi: MSIG_ABI,\n            prepareMessage: async (args, ctx) => {\n                const payload = args.payload\n                    ? ctx.encodeInternalInput(args.payload)\n                    : '';\n                return {\n                    method: 'sendTransaction',\n                    params: {\n                        dest: args.recipient,\n                        value: args.amount,\n                        bounce: args.bounce,\n                        flags: 3,\n                        payload,\n                    },\n                };\n            },\n        });\n    }\n}\nexports.MsigAccount = MsigAccount;\nconst MSIG_ABI = `{\n  \"ABI version\": 2,\n  \"header\": [\"pubkey\", \"time\", \"expire\"],\n  \"functions\": [{\n    \"name\": \"sendTransaction\",\n    \"inputs\": [\n      {\"name\":\"dest\",\"type\":\"address\"},\n      {\"name\":\"value\",\"type\":\"uint128\"},\n      {\"name\":\"bounce\",\"type\":\"bool\"},\n      {\"name\":\"flags\",\"type\":\"uint8\"},\n      {\"name\":\"payload\",\"type\":\"cell\"}\n    ],\n    \"outputs\": []\n  }],\n  \"events\": []\n}`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLXN0YW5kYWxvbmUtY2xpZW50L2NsaWVudC9BY2NvdW50c1N0b3JhZ2UvR2VuZXJpYy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2hleC1iYXR0bGUtZ2FtZS8uL25vZGVfbW9kdWxlcy9ldmVyc2NhbGUtc3RhbmRhbG9uZS1jbGllbnQvY2xpZW50L0FjY291bnRzU3RvcmFnZS9HZW5lcmljLmpzP2MyYmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLk1zaWdBY2NvdW50ID0gZXhwb3J0cy5HZW5lcmljQWNjb3VudCA9IHZvaWQgMDtcbmNvbnN0IGV2ZXJzY2FsZV9pbnBhZ2VfcHJvdmlkZXJfMSA9IHJlcXVpcmUoXCJldmVyc2NhbGUtaW5wYWdlLXByb3ZpZGVyXCIpO1xuLyoqXG4gKiBAY2F0ZWdvcnkgQWNjb3VudHNTdG9yYWdlXG4gKi9cbmNsYXNzIEdlbmVyaWNBY2NvdW50IHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgICAgIHRoaXMuYWRkcmVzcyA9IGFyZ3MuYWRkcmVzcyBpbnN0YW5jZW9mIGV2ZXJzY2FsZV9pbnBhZ2VfcHJvdmlkZXJfMS5BZGRyZXNzID8gYXJncy5hZGRyZXNzIDogbmV3IGV2ZXJzY2FsZV9pbnBhZ2VfcHJvdmlkZXJfMS5BZGRyZXNzKGFyZ3MuYWRkcmVzcyk7XG4gICAgICAgIHRoaXMuYWJpID0gdHlwZW9mIGFyZ3MuYWJpID09PSAnc3RyaW5nJyA/IGFyZ3MuYWJpIDogSlNPTi5zdHJpbmdpZnkoYXJncy5hYmkpO1xuICAgICAgICB0aGlzLnByZXBhcmVNZXNzYWdlSW1wbCA9IGFyZ3MucHJlcGFyZU1lc3NhZ2U7XG4gICAgICAgIHRoaXMucHVibGljS2V5ID0gYXJncy5wdWJsaWNLZXk7XG4gICAgfVxuICAgIGFzeW5jIGZldGNoUHVibGljS2V5KGN0eCkge1xuICAgICAgICBpZiAodGhpcy5wdWJsaWNLZXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHVibGljS2V5O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucHVibGljS2V5ID0gYXdhaXQgY3R4LmZldGNoUHVibGljS2V5KHRoaXMuYWRkcmVzcyk7XG4gICAgICAgIHJldHVybiB0aGlzLnB1YmxpY0tleTtcbiAgICB9XG4gICAgYXN5bmMgcHJlcGFyZU1lc3NhZ2UoYXJncywgY3R4KSB7XG4gICAgICAgIGNvbnN0IHB1YmxpY0tleSA9IGF3YWl0IHRoaXMuZmV0Y2hQdWJsaWNLZXkoY3R4KTtcbiAgICAgICAgY29uc3Qgc2lnbmVyID0gYXdhaXQgY3R4LmdldFNpZ25lcihwdWJsaWNLZXkpO1xuICAgICAgICBjb25zdCB7IG1ldGhvZCwgcGFyYW1zLCBzdGF0ZUluaXQgfSA9IGF3YWl0IHRoaXMucHJlcGFyZU1lc3NhZ2VJbXBsKGFyZ3MsIGN0eCk7XG4gICAgICAgIHJldHVybiBhd2FpdCBjdHguY3JlYXRlRXh0ZXJuYWxNZXNzYWdlKHtcbiAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuYWRkcmVzcyxcbiAgICAgICAgICAgIHNpZ25lcixcbiAgICAgICAgICAgIHRpbWVvdXQ6IGFyZ3MudGltZW91dCxcbiAgICAgICAgICAgIGFiaTogdGhpcy5hYmksXG4gICAgICAgICAgICBtZXRob2QsXG4gICAgICAgICAgICBwYXJhbXMsXG4gICAgICAgICAgICBzdGF0ZUluaXQsXG4gICAgICAgIH0pO1xuICAgIH1cbn1cbmV4cG9ydHMuR2VuZXJpY0FjY291bnQgPSBHZW5lcmljQWNjb3VudDtcbi8qKlxuICogQGNhdGVnb3J5IEFjY291bnRzU3RvcmFnZVxuICovXG5jbGFzcyBNc2lnQWNjb3VudCBleHRlbmRzIEdlbmVyaWNBY2NvdW50IHtcbiAgICBjb25zdHJ1Y3RvcihhcmdzKSB7XG4gICAgICAgIHN1cGVyKHtcbiAgICAgICAgICAgIGFkZHJlc3M6IGFyZ3MuYWRkcmVzcyxcbiAgICAgICAgICAgIHB1YmxpY0tleTogYXJncy5wdWJsaWNLZXksXG4gICAgICAgICAgICBhYmk6IE1TSUdfQUJJLFxuICAgICAgICAgICAgcHJlcGFyZU1lc3NhZ2U6IGFzeW5jIChhcmdzLCBjdHgpID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYXlsb2FkID0gYXJncy5wYXlsb2FkXG4gICAgICAgICAgICAgICAgICAgID8gY3R4LmVuY29kZUludGVybmFsSW5wdXQoYXJncy5wYXlsb2FkKVxuICAgICAgICAgICAgICAgICAgICA6ICcnO1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIG1ldGhvZDogJ3NlbmRUcmFuc2FjdGlvbicsXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgICAgICAgICAgZGVzdDogYXJncy5yZWNpcGllbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogYXJncy5hbW91bnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBib3VuY2U6IGFyZ3MuYm91bmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgZmxhZ3M6IDMsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkLFxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICB9XG59XG5leHBvcnRzLk1zaWdBY2NvdW50ID0gTXNpZ0FjY291bnQ7XG5jb25zdCBNU0lHX0FCSSA9IGB7XG4gIFwiQUJJIHZlcnNpb25cIjogMixcbiAgXCJoZWFkZXJcIjogW1wicHVia2V5XCIsIFwidGltZVwiLCBcImV4cGlyZVwiXSxcbiAgXCJmdW5jdGlvbnNcIjogW3tcbiAgICBcIm5hbWVcIjogXCJzZW5kVHJhbnNhY3Rpb25cIixcbiAgICBcImlucHV0c1wiOiBbXG4gICAgICB7XCJuYW1lXCI6XCJkZXN0XCIsXCJ0eXBlXCI6XCJhZGRyZXNzXCJ9LFxuICAgICAge1wibmFtZVwiOlwidmFsdWVcIixcInR5cGVcIjpcInVpbnQxMjhcIn0sXG4gICAgICB7XCJuYW1lXCI6XCJib3VuY2VcIixcInR5cGVcIjpcImJvb2xcIn0sXG4gICAgICB7XCJuYW1lXCI6XCJmbGFnc1wiLFwidHlwZVwiOlwidWludDhcIn0sXG4gICAgICB7XCJuYW1lXCI6XCJwYXlsb2FkXCIsXCJ0eXBlXCI6XCJjZWxsXCJ9XG4gICAgXSxcbiAgICBcIm91dHB1dHNcIjogW11cbiAgfV0sXG4gIFwiZXZlbnRzXCI6IFtdXG59YDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/AccountsStorage/Generic.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/AccountsStorage/Giver.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/AccountsStorage/Giver.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GiverAccount = void 0;\nconst everscale_inpage_provider_1 = __webpack_require__(/*! everscale-inpage-provider */ \"./node_modules/everscale-inpage-provider/dist/index.js\");\n/**\n * Any account which supports Giver ABI (GiverV2, GiverV3):\n *\n * ```\n * {\n *   \"ABI version\": 2,\n *   \"header\": [\"pubkey\", \"time\", \"expire\"],\n *   \"functions\": [{\n *     \"name\": \"sendTransaction\",\n *     \"inputs\": [\n *       {\"name\":\"dest\",\"type\":\"address\"},\n *       {\"name\":\"value\",\"type\":\"uint128\"},\n *       {\"name\":\"bounce\",\"type\":\"bool\"},\n *     ],\n *     \"outputs\": []\n *   }],\n *   \"events\": []\n * }\n * ```\n *\n * @category AccountsStorage\n */\nclass GiverAccount {\n    constructor(args) {\n        this.address = args.address instanceof everscale_inpage_provider_1.Address ? args.address : new everscale_inpage_provider_1.Address(args.address);\n        this.publicKey = args.publicKey;\n    }\n    static fromVersion(version) {\n        let address;\n        switch (version) {\n            case 2:\n                address = '0:ece57bcc6c530283becbbd8a3b24d3c5987cdddc3c8b7b33be6e4a6312490415';\n                break;\n            case 3:\n                address = '0:78fbd6980c10cf41401b32e9b51810415e7578b52403af80dae68ddf99714498';\n                break;\n            default:\n                throw new Error('Unknown version');\n        }\n        return new GiverAccount({\n            address,\n            publicKey: GiverAccount.GIVER_KEY_PAIR.publicKey,\n        });\n    }\n    async fetchPublicKey(_ctx) {\n        return this.publicKey;\n    }\n    async prepareMessage(args, ctx) {\n        if (args.payload != null) {\n            console.warn('Giver contract does not support payload');\n        }\n        const signer = await ctx.getSigner(this.publicKey);\n        return await ctx.createExternalMessage({\n            address: this.address,\n            signer,\n            timeout: args.timeout,\n            abi: GIVER_ABI,\n            method: 'sendTransaction',\n            params: {\n                dest: args.recipient,\n                value: args.amount,\n                bounce: args.bounce,\n            },\n        });\n    }\n}\nexports.GiverAccount = GiverAccount;\nGiverAccount.GIVER_KEY_PAIR = {\n    secretKey: '172af540e43a524763dd53b26a066d472a97c4de37d5498170564510608250c3',\n    publicKey: '2ada2e65ab8eeab09490e3521415f45b6e42df9c760a639bcf53957550b25a16',\n};\nconst GIVER_ABI = `{\n  \"ABI version\": 2,\n  \"header\": [\"time\", \"expire\"],\n  \"functions\": [{\n    \"name\": \"sendTransaction\",\n    \"inputs\": [\n      {\"name\":\"dest\",\"type\":\"address\"},\n      {\"name\":\"value\",\"type\":\"uint128\"},\n      {\"name\":\"bounce\",\"type\":\"bool\"}\n    ],\n    \"outputs\": []\n  }],\n  \"events\": []\n}`;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLXN0YW5kYWxvbmUtY2xpZW50L2NsaWVudC9BY2NvdW50c1N0b3JhZ2UvR2l2ZXIuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZXgtYmF0dGxlLWdhbWUvLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLXN0YW5kYWxvbmUtY2xpZW50L2NsaWVudC9BY2NvdW50c1N0b3JhZ2UvR2l2ZXIuanM/YWMzYyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuR2l2ZXJBY2NvdW50ID0gdm9pZCAwO1xuY29uc3QgZXZlcnNjYWxlX2lucGFnZV9wcm92aWRlcl8xID0gcmVxdWlyZShcImV2ZXJzY2FsZS1pbnBhZ2UtcHJvdmlkZXJcIik7XG4vKipcbiAqIEFueSBhY2NvdW50IHdoaWNoIHN1cHBvcnRzIEdpdmVyIEFCSSAoR2l2ZXJWMiwgR2l2ZXJWMyk6XG4gKlxuICogYGBgXG4gKiB7XG4gKiAgIFwiQUJJIHZlcnNpb25cIjogMixcbiAqICAgXCJoZWFkZXJcIjogW1wicHVia2V5XCIsIFwidGltZVwiLCBcImV4cGlyZVwiXSxcbiAqICAgXCJmdW5jdGlvbnNcIjogW3tcbiAqICAgICBcIm5hbWVcIjogXCJzZW5kVHJhbnNhY3Rpb25cIixcbiAqICAgICBcImlucHV0c1wiOiBbXG4gKiAgICAgICB7XCJuYW1lXCI6XCJkZXN0XCIsXCJ0eXBlXCI6XCJhZGRyZXNzXCJ9LFxuICogICAgICAge1wibmFtZVwiOlwidmFsdWVcIixcInR5cGVcIjpcInVpbnQxMjhcIn0sXG4gKiAgICAgICB7XCJuYW1lXCI6XCJib3VuY2VcIixcInR5cGVcIjpcImJvb2xcIn0sXG4gKiAgICAgXSxcbiAqICAgICBcIm91dHB1dHNcIjogW11cbiAqICAgfV0sXG4gKiAgIFwiZXZlbnRzXCI6IFtdXG4gKiB9XG4gKiBgYGBcbiAqXG4gKiBAY2F0ZWdvcnkgQWNjb3VudHNTdG9yYWdlXG4gKi9cbmNsYXNzIEdpdmVyQWNjb3VudCB7XG4gICAgY29uc3RydWN0b3IoYXJncykge1xuICAgICAgICB0aGlzLmFkZHJlc3MgPSBhcmdzLmFkZHJlc3MgaW5zdGFuY2VvZiBldmVyc2NhbGVfaW5wYWdlX3Byb3ZpZGVyXzEuQWRkcmVzcyA/IGFyZ3MuYWRkcmVzcyA6IG5ldyBldmVyc2NhbGVfaW5wYWdlX3Byb3ZpZGVyXzEuQWRkcmVzcyhhcmdzLmFkZHJlc3MpO1xuICAgICAgICB0aGlzLnB1YmxpY0tleSA9IGFyZ3MucHVibGljS2V5O1xuICAgIH1cbiAgICBzdGF0aWMgZnJvbVZlcnNpb24odmVyc2lvbikge1xuICAgICAgICBsZXQgYWRkcmVzcztcbiAgICAgICAgc3dpdGNoICh2ZXJzaW9uKSB7XG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgYWRkcmVzcyA9ICcwOmVjZTU3YmNjNmM1MzAyODNiZWNiYmQ4YTNiMjRkM2M1OTg3Y2RkZGMzYzhiN2IzM2JlNmU0YTYzMTI0OTA0MTUnO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgIGFkZHJlc3MgPSAnMDo3OGZiZDY5ODBjMTBjZjQxNDAxYjMyZTliNTE4MTA0MTVlNzU3OGI1MjQwM2FmODBkYWU2OGRkZjk5NzE0NDk4JztcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIHZlcnNpb24nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEdpdmVyQWNjb3VudCh7XG4gICAgICAgICAgICBhZGRyZXNzLFxuICAgICAgICAgICAgcHVibGljS2V5OiBHaXZlckFjY291bnQuR0lWRVJfS0VZX1BBSVIucHVibGljS2V5LFxuICAgICAgICB9KTtcbiAgICB9XG4gICAgYXN5bmMgZmV0Y2hQdWJsaWNLZXkoX2N0eCkge1xuICAgICAgICByZXR1cm4gdGhpcy5wdWJsaWNLZXk7XG4gICAgfVxuICAgIGFzeW5jIHByZXBhcmVNZXNzYWdlKGFyZ3MsIGN0eCkge1xuICAgICAgICBpZiAoYXJncy5wYXlsb2FkICE9IG51bGwpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignR2l2ZXIgY29udHJhY3QgZG9lcyBub3Qgc3VwcG9ydCBwYXlsb2FkJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3Qgc2lnbmVyID0gYXdhaXQgY3R4LmdldFNpZ25lcih0aGlzLnB1YmxpY0tleSk7XG4gICAgICAgIHJldHVybiBhd2FpdCBjdHguY3JlYXRlRXh0ZXJuYWxNZXNzYWdlKHtcbiAgICAgICAgICAgIGFkZHJlc3M6IHRoaXMuYWRkcmVzcyxcbiAgICAgICAgICAgIHNpZ25lcixcbiAgICAgICAgICAgIHRpbWVvdXQ6IGFyZ3MudGltZW91dCxcbiAgICAgICAgICAgIGFiaTogR0lWRVJfQUJJLFxuICAgICAgICAgICAgbWV0aG9kOiAnc2VuZFRyYW5zYWN0aW9uJyxcbiAgICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgICAgIGRlc3Q6IGFyZ3MucmVjaXBpZW50LFxuICAgICAgICAgICAgICAgIHZhbHVlOiBhcmdzLmFtb3VudCxcbiAgICAgICAgICAgICAgICBib3VuY2U6IGFyZ3MuYm91bmNlLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZXhwb3J0cy5HaXZlckFjY291bnQgPSBHaXZlckFjY291bnQ7XG5HaXZlckFjY291bnQuR0lWRVJfS0VZX1BBSVIgPSB7XG4gICAgc2VjcmV0S2V5OiAnMTcyYWY1NDBlNDNhNTI0NzYzZGQ1M2IyNmEwNjZkNDcyYTk3YzRkZTM3ZDU0OTgxNzA1NjQ1MTA2MDgyNTBjMycsXG4gICAgcHVibGljS2V5OiAnMmFkYTJlNjVhYjhlZWFiMDk0OTBlMzUyMTQxNWY0NWI2ZTQyZGY5Yzc2MGE2MzliY2Y1Mzk1NzU1MGIyNWExNicsXG59O1xuY29uc3QgR0lWRVJfQUJJID0gYHtcbiAgXCJBQkkgdmVyc2lvblwiOiAyLFxuICBcImhlYWRlclwiOiBbXCJ0aW1lXCIsIFwiZXhwaXJlXCJdLFxuICBcImZ1bmN0aW9uc1wiOiBbe1xuICAgIFwibmFtZVwiOiBcInNlbmRUcmFuc2FjdGlvblwiLFxuICAgIFwiaW5wdXRzXCI6IFtcbiAgICAgIHtcIm5hbWVcIjpcImRlc3RcIixcInR5cGVcIjpcImFkZHJlc3NcIn0sXG4gICAgICB7XCJuYW1lXCI6XCJ2YWx1ZVwiLFwidHlwZVwiOlwidWludDEyOFwifSxcbiAgICAgIHtcIm5hbWVcIjpcImJvdW5jZVwiLFwidHlwZVwiOlwiYm9vbFwifVxuICAgIF0sXG4gICAgXCJvdXRwdXRzXCI6IFtdXG4gIH1dLFxuICBcImV2ZW50c1wiOiBbXVxufWA7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/AccountsStorage/Giver.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/AccountsStorage/HighloadWalletV2.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/AccountsStorage/HighloadWalletV2.js ***!
  \*********************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.HighloadWalletV2 = void 0;\nconst everscale_inpage_provider_1 = __webpack_require__(/*! everscale-inpage-provider */ \"./node_modules/everscale-inpage-provider/dist/index.js\");\nconst bignumber_js_1 = __importDefault(__webpack_require__(/*! bignumber.js */ \"./node_modules/bignumber.js/bignumber.js\"));\nconst core_1 = __importDefault(__webpack_require__(/*! ../../core */ \"./node_modules/everscale-standalone-client/core.js\"));\nconst { ensureNekotonLoaded, nekoton } = core_1.default;\n/**\n * @category AccountsStorage\n */\nclass HighloadWalletV2 {\n    constructor(address) {\n        this.address = address instanceof everscale_inpage_provider_1.Address ? address : new everscale_inpage_provider_1.Address(address);\n    }\n    static async computeAddress(args) {\n        // TODO: Somehow propagate init params\n        await ensureNekotonLoaded();\n        const publicKey = args.publicKey instanceof bignumber_js_1.default\n            ? args.publicKey\n            : new bignumber_js_1.default(`0x${args.publicKey}`);\n        const tvc = makeStateInit(publicKey);\n        const hash = nekoton.getBocHash(tvc);\n        return new everscale_inpage_provider_1.Address(`${args.workchain != null ? args.workchain : 0}:${hash}`);\n    }\n    static async fromPubkey(args) {\n        const publicKey = new bignumber_js_1.default(`0x${args.publicKey}`);\n        const address = await HighloadWalletV2.computeAddress({ publicKey, workchain: args.workchain });\n        const result = new HighloadWalletV2(address);\n        result.publicKey = publicKey;\n        return result;\n    }\n    async fetchPublicKey(ctx) {\n        let publicKey = this.publicKey;\n        if (publicKey == null) {\n            publicKey = this.publicKey = await ctx.fetchPublicKey(this.address)\n                .then(publicKey => new bignumber_js_1.default(`0x${publicKey}`));\n        }\n        return publicKey.toString(16).padStart(64, '0');\n    }\n    async prepareMessage(args, ctx) {\n        const { publicKey, stateInit } = await this.fetchState(ctx);\n        const signer = await ctx.getSigner(publicKey);\n        const expireAt = ctx.nowSec + args.timeout;\n        const attachedPayload = args.payload\n            ? ctx.encodeInternalInput(args.payload)\n            : undefined;\n        const internalMessage = ctx.encodeInternalMessage({\n            dst: args.recipient,\n            bounce: args.bounce,\n            stateInit: args.stateInit,\n            body: attachedPayload,\n            amount: args.amount,\n        });\n        const params = {\n            messages: [[0, {\n                        flags: 3,\n                        message: internalMessage,\n                    }]],\n        };\n        const messages = ctx.packIntoCell({ structure: MESSAGES_STRUCTURE, data: params });\n        const messagesHash = ctx.getBocHash(messages);\n        params.walletId = WALLET_ID;\n        params.expireAt = expireAt;\n        params.messagesHash = `0x${messagesHash.slice(-8)}`;\n        const unsignedPayload = ctx.packIntoCell({ structure: UNSIGNED_TRANSFER_STRUCTURE, data: params });\n        const hash = ctx.getBocHash(unsignedPayload);\n        const signature = await signer.sign(hash);\n        const { signatureParts } = ctx.extendSignature(signature);\n        params.signatureHigh = signatureParts.high;\n        params.signatureLow = signatureParts.low;\n        const signedPayload = ctx.packIntoCell({ structure: SIGNED_TRANSFER_STRUCTURE, data: params });\n        return ctx.createRawExternalMessage({\n            address: this.address.toString(),\n            body: signedPayload,\n            stateInit,\n            expireAt,\n        });\n    }\n    async fetchState(ctx) {\n        let stateInit = undefined;\n        let publicKey;\n        const state = await ctx.getFullContractState(this.address);\n        if (state == null || !state.isDeployed) {\n            if (this.publicKey == null) {\n                throw new Error('Contract not deployed and public key was not specified');\n            }\n            stateInit = makeStateInit(this.publicKey);\n            publicKey = this.publicKey;\n        }\n        else if (this.publicKey == null) {\n            const data = ctx.extractContractData(state.boc);\n            if (data == null) {\n                throw new Error('Failed to extract contract data');\n            }\n            publicKey = parseInitData(ctx, data).publicKey;\n        }\n        else {\n            publicKey = this.publicKey;\n        }\n        if (this.publicKey == null) {\n            this.publicKey = publicKey;\n        }\n        return {\n            publicKey: publicKey.toString(16).padStart(64, '0'),\n            stateInit,\n        };\n    }\n}\nexports.HighloadWalletV2 = HighloadWalletV2;\nconst parseInitData = (ctx, boc) => {\n    const parsed = ctx.unpackFromCell({ structure: DATA_STRUCTURE, boc, allowPartial: true });\n    if (typeof parsed !== 'object' || typeof parsed['publicKey'] !== 'string') {\n        throw new Error('Invalid contract data');\n    }\n    return {\n        publicKey: new bignumber_js_1.default(parsed.publicKey),\n    };\n};\nconst makeStateInit = (publicKey) => {\n    const data = nekoton.packIntoCell(DATA_STRUCTURE, {\n        walletId: WALLET_ID,\n        lastCleaned: 0,\n        publicKey: publicKey.toFixed(0),\n        queries: false,\n    });\n    return nekoton.mergeTvc(HIGHLOAD_WALLET_V2_CODE, data);\n};\nconst MESSAGES_STRUCTURE = [\n    {\n        name: 'messages',\n        type: 'map(uint16,tuple)',\n        components: [\n            { name: 'flags', type: 'uint8' },\n            { name: 'message', type: 'cell' },\n        ],\n    },\n];\nconst UNSIGNED_TRANSFER_STRUCTURE = [\n    { name: 'walletId', type: 'uint32' },\n    { name: 'expireAt', type: 'uint32' },\n    { name: 'messagesHash', type: 'uint32' },\n    ...MESSAGES_STRUCTURE,\n];\nconst SIGNED_TRANSFER_STRUCTURE = [\n    { name: 'signatureHigh', type: 'uint256' },\n    { name: 'signatureLow', type: 'uint256' },\n    ...UNSIGNED_TRANSFER_STRUCTURE,\n];\nconst DATA_STRUCTURE = [\n    { name: 'walletId', type: 'uint32' },\n    { name: 'lastCleaned', type: 'uint64' },\n    { name: 'publicKey', type: 'uint256' },\n    { name: 'queries', type: 'bool' },\n];\nconst HIGHLOAD_WALLET_V2_CODE = 'te6ccgEBCQEA5QABFP8A9KQT9LzyyAsBAgEgBAIB6vKDCNcYINMf0z/4I6ofUyC58mPtRNDTH9M/0//0BNFTYIBA9A5voTHyYFFzuvKiB/kBVBCH+RDyowL0BNH4AH+OFiGAEPR4b6UgmALTB9QwAfsAkTLiAbPmW4MlochANIBA9EOK5jHIEssfE8s/y//0AMntVAMANCCAQPSWb6UyURCUMFMDud4gkzM2AZIyMOKzAgFICAUCASAHBgBBvl+XaiaGmPmOmf6f+Y+gJoqRBAIHoHN9CYyS2/yV3R8UABe9nOdqJoaa+Y64X/wABNAw';\nconst WALLET_ID = 0;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/AccountsStorage/HighloadWalletV2.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/AccountsStorage/WalletV3.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/AccountsStorage/WalletV3.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.WalletV3Account = void 0;\nconst everscale_inpage_provider_1 = __webpack_require__(/*! everscale-inpage-provider */ \"./node_modules/everscale-inpage-provider/dist/index.js\");\nconst bignumber_js_1 = __importDefault(__webpack_require__(/*! bignumber.js */ \"./node_modules/bignumber.js/bignumber.js\"));\nconst core_1 = __importDefault(__webpack_require__(/*! ../../core */ \"./node_modules/everscale-standalone-client/core.js\"));\nconst { ensureNekotonLoaded, nekoton } = core_1.default;\n/**\n * @category AccountsStorage\n */\nclass WalletV3Account {\n    constructor(address) {\n        this.address = address;\n    }\n    static async computeAddress(args) {\n        // TODO: Somehow propagate init params\n        await ensureNekotonLoaded();\n        const publicKey = args.publicKey instanceof bignumber_js_1.default\n            ? args.publicKey\n            : new bignumber_js_1.default(`0x${args.publicKey}`);\n        const tvc = makeStateInit(publicKey);\n        const hash = nekoton.getBocHash(tvc);\n        return new everscale_inpage_provider_1.Address(`${args.workchain != null ? args.workchain : 0}:${hash}`);\n    }\n    static async fromPubkey(args) {\n        const publicKey = new bignumber_js_1.default(`0x${args.publicKey}`);\n        const address = await WalletV3Account.computeAddress({ publicKey, workchain: args.workchain });\n        const result = new WalletV3Account(address);\n        result.publicKey = publicKey;\n        return result;\n    }\n    async fetchPublicKey(ctx) {\n        let publicKey = this.publicKey;\n        if (publicKey == null) {\n            publicKey = this.publicKey = await ctx.fetchPublicKey(this.address)\n                .then(publicKey => new bignumber_js_1.default(`0x${publicKey}`));\n        }\n        return publicKey.toString(16).padStart(64, '0');\n    }\n    async prepareMessage(args, ctx) {\n        const { seqno, publicKey, stateInit } = await this.fetchState(ctx);\n        const signer = await ctx.getSigner(publicKey);\n        const expireAt = ctx.nowSec + args.timeout;\n        const attachedPayload = args.payload\n            ? ctx.encodeInternalInput(args.payload)\n            : undefined;\n        const internalMessage = ctx.encodeInternalMessage({\n            dst: args.recipient,\n            bounce: args.bounce,\n            stateInit: args.stateInit,\n            body: attachedPayload,\n            amount: args.amount,\n        });\n        const params = {\n            walletId: WALLET_ID,\n            expireAt,\n            seqno,\n            flags: 3,\n            message: internalMessage,\n        };\n        const unsignedPayload = ctx.packIntoCell({ structure: UNSIGNED_TRANSFER_STRUCTURE, data: params });\n        const hash = ctx.getBocHash(unsignedPayload);\n        const signature = await signer.sign(hash);\n        const { signatureParts } = ctx.extendSignature(signature);\n        params.signatureHigh = signatureParts.high;\n        params.signatureLow = signatureParts.low;\n        const signedPayload = ctx.packIntoCell({\n            structure: SIGNED_TRANSFER_STRUCTURE,\n            data: params,\n        });\n        return ctx.createRawExternalMessage({\n            address: this.address,\n            body: signedPayload,\n            stateInit,\n            expireAt,\n        });\n    }\n    async fetchState(ctx) {\n        let stateInit = undefined;\n        let result;\n        const state = await ctx.getFullContractState(this.address);\n        if (state == null || !state.isDeployed) {\n            if (this.publicKey == null) {\n                throw new Error('Contract not deployed and public key was not specified');\n            }\n            stateInit = makeStateInit(this.publicKey);\n            result = { seqno: 0, publicKey: this.publicKey };\n        }\n        else {\n            const data = ctx.extractContractData(state.boc);\n            if (data == null) {\n                throw new Error('Failed to extract contract data');\n            }\n            result = parseInitData(ctx, data);\n        }\n        if (this.publicKey == null) {\n            this.publicKey = result.publicKey;\n        }\n        else if (!this.publicKey.eq(result.publicKey)) {\n            throw new Error('Public key mismatch');\n        }\n        return {\n            seqno: result.seqno,\n            publicKey: result.publicKey.toString(16).padStart(64, '0'),\n            stateInit,\n        };\n    }\n}\nexports.WalletV3Account = WalletV3Account;\nconst parseInitData = (ctx, boc) => {\n    const parsed = ctx.unpackFromCell({\n        structure: DATA_STRUCTURE,\n        boc,\n        allowPartial: false,\n    });\n    if (typeof parsed !== 'object' || typeof parsed['seqno'] !== 'string' || typeof parsed['publicKey'] !== 'string') {\n        throw new Error('Invalid contract data ');\n    }\n    return {\n        seqno: parseInt(parsed.seqno),\n        publicKey: new bignumber_js_1.default(parsed.publicKey),\n    };\n};\nconst makeStateInit = (publicKey) => {\n    const data = nekoton.packIntoCell(DATA_STRUCTURE, {\n        seqno: 0,\n        walletId: WALLET_ID,\n        publicKey: publicKey.toFixed(0),\n    });\n    return nekoton.mergeTvc(WALLET_V3_CODE, data);\n};\nconst UNSIGNED_TRANSFER_STRUCTURE = [\n    { name: 'walletId', type: 'uint32' },\n    { name: 'expireAt', type: 'uint32' },\n    { name: 'seqno', type: 'uint32' },\n    { name: 'flags', type: 'uint8' },\n    { name: 'message', type: 'cell' },\n];\nconst SIGNED_TRANSFER_STRUCTURE = [\n    { name: 'signatureHigh', type: 'uint256' },\n    { name: 'signatureLow', type: 'uint256' },\n    ...UNSIGNED_TRANSFER_STRUCTURE,\n];\nconst DATA_STRUCTURE = [\n    { name: 'seqno', type: 'uint32' },\n    { name: 'walletId', type: 'uint32' },\n    { name: 'publicKey', type: 'uint256' },\n];\nconst WALLET_V3_CODE = 'te6ccgEBAQEAcQAA3v8AIN0gggFMl7ohggEznLqxn3Gw7UTQ0x/THzHXC//jBOCk8mCDCNcYINMf0x/TH/gjE7vyY+1E0NMf0x/T/9FRMrryoVFEuvKiBPkBVBBV+RDyo/gAkyDXSpbTB9QC+wDo0QGkyMsfyx/L/8ntVA==';\nconst WALLET_ID = 0x4BA92D8A;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/AccountsStorage/WalletV3.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/AccountsStorage/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/AccountsStorage/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SimpleAccountsStorage = exports.AccountsStorageContext = exports.HighloadWalletV2 = exports.WalletV3Account = exports.MsigAccount = exports.GenericAccount = exports.GiverAccount = void 0;\nconst everscale_inpage_provider_1 = __webpack_require__(/*! everscale-inpage-provider */ \"./node_modules/everscale-inpage-provider/dist/index.js\");\nvar Giver_1 = __webpack_require__(/*! ./Giver */ \"./node_modules/everscale-standalone-client/client/AccountsStorage/Giver.js\");\nObject.defineProperty(exports, \"GiverAccount\", ({ enumerable: true, get: function () { return Giver_1.GiverAccount; } }));\nvar Generic_1 = __webpack_require__(/*! ./Generic */ \"./node_modules/everscale-standalone-client/client/AccountsStorage/Generic.js\");\nObject.defineProperty(exports, \"GenericAccount\", ({ enumerable: true, get: function () { return Generic_1.GenericAccount; } }));\nObject.defineProperty(exports, \"MsigAccount\", ({ enumerable: true, get: function () { return Generic_1.MsigAccount; } }));\nvar WalletV3_1 = __webpack_require__(/*! ./WalletV3 */ \"./node_modules/everscale-standalone-client/client/AccountsStorage/WalletV3.js\");\nObject.defineProperty(exports, \"WalletV3Account\", ({ enumerable: true, get: function () { return WalletV3_1.WalletV3Account; } }));\nvar HighloadWalletV2_1 = __webpack_require__(/*! ./HighloadWalletV2 */ \"./node_modules/everscale-standalone-client/client/AccountsStorage/HighloadWalletV2.js\");\nObject.defineProperty(exports, \"HighloadWalletV2\", ({ enumerable: true, get: function () { return HighloadWalletV2_1.HighloadWalletV2; } }));\n/**\n * @category AccountsStorage\n */\nclass AccountsStorageContext {\n    constructor(clock, connectionController, nekoton, keystore) {\n        this.clock = clock;\n        this.connectionController = connectionController;\n        this.nekoton = nekoton;\n        this.keystore = keystore;\n    }\n    async getSigner(publicKey) {\n        if (this.keystore == null) {\n            throw new Error('Keystore not found');\n        }\n        const signer = await this.keystore.getSigner(publicKey);\n        if (signer == null) {\n            throw new Error('Signer not found');\n        }\n        return signer;\n    }\n    get nowMs() {\n        return this.clock.nowMs;\n    }\n    get nowSec() {\n        return ~~(this.clock.nowMs / 1000);\n    }\n    async fetchPublicKey(address) {\n        const state = await this.getFullContractState(address);\n        if (state == null || !state.isDeployed) {\n            throw new Error('Contract not deployed');\n        }\n        return this.nekoton.extractPublicKey(state.boc);\n    }\n    async getFullContractState(address) {\n        return this.connectionController.use(async ({ data: { transport } }) => transport.getFullContractState(address.toString()));\n    }\n    extractContractData(boc) {\n        return this.nekoton.extractContractData(boc);\n    }\n    packIntoCell(args) {\n        return this.nekoton.packIntoCell(args.structure, args.data, args.abiVersion);\n    }\n    unpackFromCell(args) {\n        return this.nekoton.unpackFromCell(args.structure, args.boc, args.allowPartial, args.abiVersion);\n    }\n    getBocHash(boc) {\n        return this.nekoton.getBocHash(boc);\n    }\n    extendSignature(signature) {\n        return this.nekoton.extendSignature(signature);\n    }\n    encodeInternalInput(args) {\n        return this.nekoton.encodeInternalInput(args.abi, args.method, args.params);\n    }\n    encodeInternalMessage(args) {\n        return this.nekoton.encodeInternalMessage(args.src, args.dst, args.bounce, args.stateInit, args.body, args.amount);\n    }\n    async createExternalMessage(args) {\n        const unsignedMessage = this.nekoton.createExternalMessage(this.clock, args.address.toString(), args.abi, args.method, args.stateInit, args.params, args.signer.publicKey, args.timeout);\n        try {\n            const signature = await args.signer.sign(unsignedMessage.hash);\n            return unsignedMessage.sign(signature);\n        }\n        finally {\n            unsignedMessage.free();\n        }\n    }\n    createRawExternalMessage(args) {\n        return this.nekoton.createRawExternalMessage(args.address.toString(), args.stateInit, args.body, args.expireAt);\n    }\n}\nexports.AccountsStorageContext = AccountsStorageContext;\n/**\n * @category AccountsStorage\n */\nclass SimpleAccountsStorage {\n    /**\n     * Creates new simple accounts storage.\n     *\n     * If no `defaultAccount` provided, uses first provided entry\n     *\n     * @param args\n     */\n    constructor(args = {}) {\n        this.accounts = new Map();\n        if (args.entries != null) {\n            for (const account of args.entries) {\n                if (this._defaultAccount == null) {\n                    this._defaultAccount = account.address;\n                }\n                this.accounts.set(account.address.toString(), account);\n            }\n        }\n        if (args.defaultAccount != null) {\n            let defaultAccount;\n            if (args.defaultAccount instanceof everscale_inpage_provider_1.Address) {\n                defaultAccount = args.defaultAccount;\n            }\n            else {\n                defaultAccount = new everscale_inpage_provider_1.Address(args.defaultAccount);\n            }\n            if (!this.accounts.has(defaultAccount.toString())) {\n                throw new Error('Provided default account not found in storage');\n            }\n            this._defaultAccount = defaultAccount;\n        }\n    }\n    get defaultAccount() {\n        return this._defaultAccount;\n    }\n    set defaultAccount(value) {\n        const address = value === null || value === void 0 ? void 0 : value.toString();\n        if (address != null && !this.accounts.has(address)) {\n            throw new Error('Account not found in storage');\n        }\n        this._defaultAccount = (value == null || value instanceof everscale_inpage_provider_1.Address) ? value : new everscale_inpage_provider_1.Address(value);\n    }\n    async getAccount(address) {\n        return this.accounts.get(address.toString());\n    }\n    addAccount(account) {\n        const address = account.address;\n        this.accounts.set(address.toString(), account);\n        return address;\n    }\n    hasAccount(address) {\n        return this.accounts.has(address.toString());\n    }\n    removeAccount(address) {\n        this.accounts.delete(address.toString());\n    }\n}\nexports.SimpleAccountsStorage = SimpleAccountsStorage;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/AccountsStorage/index.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/ConnectionController/gql.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/ConnectionController/gql.js ***!
  \*************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.GqlSocket = void 0;\nconst core_1 = __importDefault(__webpack_require__(/*! ../../core */ \"./node_modules/everscale-standalone-client/core.js\"));\nconst { nekoton, fetch, fetchAgent, debugLog } = core_1.default;\nclass GqlSocket {\n    async connect(clock, params) {\n        class GqlSender {\n            constructor(params) {\n                this.nextLatencyDetectionTime = 0;\n                this.params = params;\n                this.latencyDetectionInterval = params.latencyDetectionInterval || 60000;\n                this.endpoints = params.endpoints.map(GqlSocket.expandAddress);\n                if (this.endpoints.length == 1) {\n                    this.currentEndpoint = this.endpoints[0];\n                    this.nextLatencyDetectionTime = Number.MAX_VALUE;\n                }\n            }\n            isLocal() {\n                return this.params.local;\n            }\n            send(data, handler, _longQuery) {\n                ;\n                (async () => {\n                    const now = Date.now();\n                    try {\n                        let endpoint;\n                        if (this.currentEndpoint != null && now < this.nextLatencyDetectionTime) {\n                            // Default route\n                            endpoint = this.currentEndpoint;\n                        }\n                        else if (this.resolutionPromise != null) {\n                            // Already resolving\n                            endpoint = await this.resolutionPromise;\n                            delete this.resolutionPromise;\n                        }\n                        else {\n                            delete this.currentEndpoint;\n                            // Start resolving (current endpoint is null, or it is time to refresh)\n                            this.resolutionPromise = this._selectQueryingEndpoint().then((endpoint) => {\n                                this.currentEndpoint = endpoint;\n                                this.nextLatencyDetectionTime = Date.now() + this.latencyDetectionInterval;\n                                return endpoint;\n                            });\n                            endpoint = await this.resolutionPromise;\n                            delete this.resolutionPromise;\n                        }\n                        const response = await fetch(endpoint.url, {\n                            method: 'post',\n                            headers: DEFAULT_HEADERS,\n                            body: data,\n                            agent: endpoint.agent,\n                        }).then((response) => response.text());\n                        handler.onReceive(response);\n                    }\n                    catch (e) {\n                        handler.onError(e);\n                    }\n                })();\n            }\n            async _selectQueryingEndpoint() {\n                const maxLatency = this.params.maxLatency || 60000;\n                const endpointCount = this.endpoints.length;\n                for (let retryCount = 0; retryCount < 5; ++retryCount) {\n                    let handlers;\n                    const promise = new Promise((resolve, reject) => {\n                        handlers = {\n                            resolve: (endpoint) => resolve(endpoint),\n                            reject: () => reject(undefined),\n                        };\n                    });\n                    let checkedEndpoints = 0;\n                    let lastLatency;\n                    for (const endpoint of this.endpoints) {\n                        GqlSocket.checkLatency(endpoint).then((latency) => {\n                            ++checkedEndpoints;\n                            if (latency !== undefined && latency <= maxLatency) {\n                                return handlers.resolve(endpoint);\n                            }\n                            if (lastLatency === undefined ||\n                                lastLatency.latency === undefined ||\n                                (latency !== undefined && latency < lastLatency.latency)) {\n                                lastLatency = { endpoint, latency };\n                            }\n                            if (checkedEndpoints >= endpointCount) {\n                                if ((lastLatency === null || lastLatency === void 0 ? void 0 : lastLatency.latency) !== undefined) {\n                                    handlers.resolve(lastLatency.endpoint);\n                                }\n                                else {\n                                    handlers.reject();\n                                }\n                            }\n                        });\n                    }\n                    try {\n                        return await promise;\n                    }\n                    catch (e) {\n                        let resolveDelay;\n                        const delayPromise = new Promise((resolve) => {\n                            resolveDelay = () => resolve();\n                        });\n                        setTimeout(() => resolveDelay(), Math.min(100 * retryCount, 5000));\n                        await delayPromise;\n                    }\n                }\n                throw new Error('Not available endpoint found');\n            }\n        }\n        return new nekoton.GqlConnection(clock, new GqlSender(params));\n    }\n    static async checkLatency(endpoint) {\n        const response = await fetch(`${endpoint.url}?query=%7Binfo%7Bversion%20time%20latency%7D%7D`, {\n            method: 'get',\n            agent: endpoint.agent,\n        })\n            .then((response) => response.json())\n            .catch((e) => {\n            debugLog(e);\n            return undefined;\n        });\n        if (typeof response !== 'object' || response == null) {\n            return;\n        }\n        const data = response['data'];\n        if (typeof data !== 'object' || data == null) {\n            return;\n        }\n        const info = data['info'];\n        if (typeof info !== 'object' || info == null) {\n            return;\n        }\n        const latency = info['latency'];\n        if (typeof latency !== 'number') {\n            return;\n        }\n        return latency;\n    }\n}\nexports.GqlSocket = GqlSocket;\nGqlSocket.expandAddress = (baseUrl) => {\n    const lastBackslashIndex = baseUrl.lastIndexOf('/');\n    baseUrl = lastBackslashIndex < 0 ? baseUrl : baseUrl.substring(0, lastBackslashIndex);\n    let url;\n    if (baseUrl.startsWith('http://') || baseUrl.startsWith('https://')) {\n        url = `${baseUrl}/graphql`;\n    }\n    else if (['localhost', '127.0.0.1'].indexOf(baseUrl) >= 0) {\n        url = `http://${baseUrl}/graphql`;\n    }\n    else {\n        url = `https://${baseUrl}/graphql`;\n    }\n    return {\n        url,\n        agent: fetchAgent(url),\n    };\n};\nconst DEFAULT_HEADERS = {\n    'Content-Type': 'application/json',\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/ConnectionController/gql.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/ConnectionController/index.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/ConnectionController/index.js ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ConnectionController = exports.createConnectionController = exports.ConnectionError = exports.checkConnection = exports.NETWORK_PRESETS = exports.DEFAULT_NETWORK_GROUP = void 0;\nconst await_semaphore_1 = __webpack_require__(/*! @broxus/await-semaphore */ \"./node_modules/@broxus/await-semaphore/dist/index.js\");\nconst core_1 = __importDefault(__webpack_require__(/*! ../../core */ \"./node_modules/everscale-standalone-client/core.js\"));\nconst gql_1 = __webpack_require__(/*! ./gql */ \"./node_modules/everscale-standalone-client/client/ConnectionController/gql.js\");\nconst jrpc_1 = __webpack_require__(/*! ./jrpc */ \"./node_modules/everscale-standalone-client/client/ConnectionController/jrpc.js\");\nconst { nekoton, debugLog } = core_1.default;\nexports.DEFAULT_NETWORK_GROUP = 'mainnet';\n/**\n * @category Client\n */\nexports.NETWORK_PRESETS = {\n    mainnet: {\n        id: 1,\n        group: 'mainnet',\n        type: 'graphql',\n        data: {\n            endpoints: [\n                'eri01.main.everos.dev',\n                'gra01.main.everos.dev',\n                'gra02.main.everos.dev',\n                'lim01.main.everos.dev',\n                'rbx01.main.everos.dev',\n            ],\n            local: false,\n        },\n    },\n    mainnetJrpc: {\n        id: 1,\n        group: 'mainnet',\n        type: 'jrpc',\n        data: {\n            endpoint: 'https://jrpc.everwallet.net/rpc',\n        },\n    },\n    testnet: {\n        id: 2,\n        group: 'testnet',\n        type: 'graphql',\n        data: {\n            endpoints: ['eri01.net.everos.dev', 'rbx01.net.everos.dev', 'gra01.net.everos.dev'],\n            local: false,\n        },\n    },\n    fld: {\n        id: 10,\n        group: 'fld',\n        type: 'graphql',\n        data: {\n            endpoints: ['gql.custler.net'],\n            local: false,\n        },\n    },\n    local: {\n        id: 31337,\n        group: 'localnet',\n        type: 'graphql',\n        data: {\n            endpoints: ['127.0.0.1'],\n            local: true,\n        },\n    },\n};\nfunction loadPreset(params) {\n    if (typeof params === 'string') {\n        const targetPreset = exports.NETWORK_PRESETS[params];\n        if (targetPreset == null) {\n            throw new Error(`Target preset id not found: ${params}`);\n        }\n        return targetPreset;\n    }\n    else {\n        return params;\n    }\n}\n/**\n * Tries to connect with the specified params. Throws an exception in case of error\n *\n * @category Client\n * @throws ConnectionError\n */\nasync function checkConnection(params) {\n    const preset = loadPreset(params);\n    const clock = new nekoton.ClockWithOffset();\n    try {\n        const controller = new ConnectionController(clock);\n        await controller['_connect'](preset);\n        if (controller['_initializedTransport'] != null) {\n            cleanupInitializedTransport(controller['_initializedTransport']);\n        }\n    }\n    catch (e) {\n        throw new ConnectionError(preset, e.toString());\n    }\n    finally {\n        clock.free();\n    }\n}\nexports.checkConnection = checkConnection;\n/**\n * @category Client\n */\nclass ConnectionError extends Error {\n    constructor(params, message) {\n        super(message);\n        this.params = params;\n    }\n}\nexports.ConnectionError = ConnectionError;\nasync function createConnectionController(clock, params, retry = false) {\n    const preset = loadPreset(params);\n    // Try connect\n    while (true) {\n        try {\n            const controller = new ConnectionController(clock);\n            await controller.startSwitchingNetwork(preset).then((handle) => handle.switch());\n            debugLog(`Successfully connected to ${preset.group}`);\n            return controller;\n        }\n        catch (e) {\n            if (retry) {\n                console.error('Connection failed:', e);\n                await new Promise((resolve) => {\n                    setTimeout(() => resolve(), 5000);\n                });\n                debugLog('Restarting connection process');\n            }\n            else {\n                throw e;\n            }\n        }\n    }\n}\nexports.createConnectionController = createConnectionController;\nclass ConnectionController {\n    constructor(clock) {\n        this._networkMutex = new await_semaphore_1.Mutex();\n        this._acquiredTransportCounter = 0;\n        this._clock = clock;\n    }\n    async acquire() {\n        requireInitializedTransport(this._initializedTransport);\n        await this._acquireTransport();\n        return {\n            transport: this._initializedTransport,\n            release: () => this._releaseTransport(),\n        };\n    }\n    async use(f) {\n        requireInitializedTransport(this._initializedTransport);\n        await this._acquireTransport();\n        return f(this._initializedTransport)\n            .finally(() => {\n            this._releaseTransport();\n        });\n    }\n    async startSwitchingNetwork(params) {\n        var _a;\n        class NetworkSwitchHandle {\n            constructor(controller, release, params) {\n                this._controller = controller;\n                this._release = release;\n                this._params = params;\n            }\n            async switch() {\n                await this._controller\n                    ._connect(this._params)\n                    .finally(() => this._release());\n            }\n        }\n        (_a = this._cancelTestTransport) === null || _a === void 0 ? void 0 : _a.call(this);\n        const release = await this._networkMutex.acquire();\n        return new NetworkSwitchHandle(this, release, params);\n    }\n    get initializedTransport() {\n        return this._initializedTransport;\n    }\n    async _connect(params) {\n        if (this._initializedTransport != null) {\n            cleanupInitializedTransport(this._initializedTransport);\n        }\n        this._initializedTransport = undefined;\n        let TestConnectionResult;\n        (function (TestConnectionResult) {\n            TestConnectionResult[TestConnectionResult[\"DONE\"] = 0] = \"DONE\";\n            TestConnectionResult[TestConnectionResult[\"CANCELLED\"] = 1] = \"CANCELLED\";\n        })(TestConnectionResult || (TestConnectionResult = {}));\n        const testTransport = async ({ data: { transport } }, local) => {\n            return new Promise((resolve, reject) => {\n                this._cancelTestTransport = () => resolve(TestConnectionResult.CANCELLED);\n                if (local) {\n                    transport\n                        .getAccountsByCodeHash('4e92716de61d456e58f16e4e867e3e93a7548321eace86301b51c8b80ca6239b', 1)\n                        .then(() => resolve(TestConnectionResult.DONE))\n                        .catch((e) => reject(e));\n                }\n                else {\n                    // Try to get any account state\n                    transport\n                        .getFullContractState('-1:0000000000000000000000000000000000000000000000000000000000000000')\n                        .then(() => resolve(TestConnectionResult.DONE))\n                        .catch((e) => reject(e));\n                }\n                setTimeout(() => reject(new Error('Connection timeout')), 10000);\n            }).finally(() => this._cancelTestTransport = undefined);\n        };\n        try {\n            const { local, transportData } = await (params.type === 'graphql'\n                ? async () => {\n                    const socket = new gql_1.GqlSocket();\n                    const connection = await socket.connect(this._clock, params.data);\n                    const transport = nekoton.Transport.fromGqlConnection(connection);\n                    const transportData = {\n                        id: params.id,\n                        group: params.group,\n                        type: 'graphql',\n                        data: {\n                            socket,\n                            connection,\n                            transport,\n                        },\n                    };\n                    return {\n                        local: params.data.local,\n                        transportData,\n                    };\n                }\n                : async () => {\n                    const socket = new jrpc_1.JrpcSocket();\n                    const connection = await socket.connect(this._clock, params.data);\n                    const transport = nekoton.Transport.fromJrpcConnection(connection);\n                    const transportData = {\n                        id: params.id,\n                        group: params.group,\n                        type: 'jrpc',\n                        data: {\n                            socket,\n                            connection,\n                            transport,\n                        },\n                    };\n                    return {\n                        local: false,\n                        transportData,\n                    };\n                })();\n            try {\n                if (await testTransport(transportData, local) == TestConnectionResult.CANCELLED) {\n                    cleanupInitializedTransport(transportData);\n                    return;\n                }\n            }\n            catch (e) {\n                // Free transport data in case of error\n                cleanupInitializedTransport(transportData);\n                throw e;\n            }\n            this._initializedTransport = transportData;\n        }\n        catch (e) {\n            throw new Error(`Failed to create connection: ${e.toString()}`);\n        }\n    }\n    async _acquireTransport() {\n        debugLog('_acquireTransport');\n        if (this._acquiredTransportCounter > 0) {\n            debugLog('_acquireTransport -> increase');\n            this._acquiredTransportCounter += 1;\n        }\n        else {\n            this._acquiredTransportCounter = 1;\n            if (this._release != null) {\n                console.warn('mutex is already acquired');\n            }\n            else {\n                debugLog('_acquireTransport -> await');\n                this._release = await this._networkMutex.acquire();\n                debugLog('_acquireTransport -> create');\n            }\n        }\n    }\n    _releaseTransport() {\n        var _a;\n        debugLog('_releaseTransport');\n        this._acquiredTransportCounter -= 1;\n        if (this._acquiredTransportCounter <= 0) {\n            debugLog('_releaseTransport -> release');\n            (_a = this._release) === null || _a === void 0 ? void 0 : _a.call(this);\n            this._release = undefined;\n        }\n    }\n}\nexports.ConnectionController = ConnectionController;\nfunction cleanupInitializedTransport(transport) {\n    transport.data.transport.free();\n    transport.data.connection.free();\n}\nfunction requireInitializedTransport(transport) {\n    if (transport == null) {\n        throw new Error('Connection is not initialized');\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/ConnectionController/index.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/ConnectionController/jrpc.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/ConnectionController/jrpc.js ***!
  \**************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.JrpcSocket = void 0;\nconst core_1 = __importDefault(__webpack_require__(/*! ../../core */ \"./node_modules/everscale-standalone-client/core.js\"));\nconst { nekoton, fetch, fetchAgent } = core_1.default;\nclass JrpcSocket {\n    async connect(clock, params) {\n        class JrpcSender {\n            constructor(params) {\n                this.endpoint = params.endpoint;\n                this.endpointAgent = fetchAgent(this.endpoint);\n                this.alternativeEndpoint = params.alternativeEndpoint != null\n                    ? params.alternativeEndpoint\n                    : params.endpoint;\n                this.alternativeEndpointAgent = fetchAgent(this.alternativeEndpoint);\n            }\n            send(data, handler, requiresDb) {\n                ;\n                (async () => {\n                    try {\n                        const url = requiresDb ? this.endpoint : this.alternativeEndpoint;\n                        const agent = requiresDb ? this.endpointAgent : this.alternativeEndpointAgent;\n                        const response = await fetch(url, {\n                            method: 'post',\n                            headers: DEFAULT_HEADERS,\n                            body: data,\n                            agent,\n                        }).then((response) => response.text());\n                        handler.onReceive(response);\n                    }\n                    catch (e) {\n                        handler.onError(e);\n                    }\n                })();\n            }\n        }\n        return new nekoton.JrpcConnection(clock, new JrpcSender(params));\n    }\n}\nexports.JrpcSocket = JrpcSocket;\nconst DEFAULT_HEADERS = {\n    'Content-Type': 'application/json',\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLXN0YW5kYWxvbmUtY2xpZW50L2NsaWVudC9Db25uZWN0aW9uQ29udHJvbGxlci9qcnBjLmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2V2ZXJzY2FsZS1zdGFuZGFsb25lLWNsaWVudC9jbGllbnQvQ29ubmVjdGlvbkNvbnRyb2xsZXIvanJwYy5qcz9iNDY5Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5KcnBjU29ja2V0ID0gdm9pZCAwO1xuY29uc3QgY29yZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi8uLi9jb3JlXCIpKTtcbmNvbnN0IHsgbmVrb3RvbiwgZmV0Y2gsIGZldGNoQWdlbnQgfSA9IGNvcmVfMS5kZWZhdWx0O1xuY2xhc3MgSnJwY1NvY2tldCB7XG4gICAgYXN5bmMgY29ubmVjdChjbG9jaywgcGFyYW1zKSB7XG4gICAgICAgIGNsYXNzIEpycGNTZW5kZXIge1xuICAgICAgICAgICAgY29uc3RydWN0b3IocGFyYW1zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5lbmRwb2ludCA9IHBhcmFtcy5lbmRwb2ludDtcbiAgICAgICAgICAgICAgICB0aGlzLmVuZHBvaW50QWdlbnQgPSBmZXRjaEFnZW50KHRoaXMuZW5kcG9pbnQpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWx0ZXJuYXRpdmVFbmRwb2ludCA9IHBhcmFtcy5hbHRlcm5hdGl2ZUVuZHBvaW50ICE9IG51bGxcbiAgICAgICAgICAgICAgICAgICAgPyBwYXJhbXMuYWx0ZXJuYXRpdmVFbmRwb2ludFxuICAgICAgICAgICAgICAgICAgICA6IHBhcmFtcy5lbmRwb2ludDtcbiAgICAgICAgICAgICAgICB0aGlzLmFsdGVybmF0aXZlRW5kcG9pbnRBZ2VudCA9IGZldGNoQWdlbnQodGhpcy5hbHRlcm5hdGl2ZUVuZHBvaW50KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNlbmQoZGF0YSwgaGFuZGxlciwgcmVxdWlyZXNEYikge1xuICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdXJsID0gcmVxdWlyZXNEYiA/IHRoaXMuZW5kcG9pbnQgOiB0aGlzLmFsdGVybmF0aXZlRW5kcG9pbnQ7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBhZ2VudCA9IHJlcXVpcmVzRGIgPyB0aGlzLmVuZHBvaW50QWdlbnQgOiB0aGlzLmFsdGVybmF0aXZlRW5kcG9pbnRBZ2VudDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWV0aG9kOiAncG9zdCcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVyczogREVGQVVMVF9IRUFERVJTLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJvZHk6IGRhdGEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS50aGVuKChyZXNwb25zZSkgPT4gcmVzcG9uc2UudGV4dCgpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhhbmRsZXIub25SZWNlaXZlKHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaGFuZGxlci5vbkVycm9yKGUpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSkoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IG5la290b24uSnJwY0Nvbm5lY3Rpb24oY2xvY2ssIG5ldyBKcnBjU2VuZGVyKHBhcmFtcykpO1xuICAgIH1cbn1cbmV4cG9ydHMuSnJwY1NvY2tldCA9IEpycGNTb2NrZXQ7XG5jb25zdCBERUZBVUxUX0hFQURFUlMgPSB7XG4gICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbn07XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/ConnectionController/jrpc.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/SubscriptionController/index.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/SubscriptionController/index.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SubscriptionController = void 0;\nconst await_semaphore_1 = __webpack_require__(/*! @broxus/await-semaphore */ \"./node_modules/@broxus/await-semaphore/dist/index.js\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"./node_modules/everscale-standalone-client/client/utils.js\");\nconst subscription_1 = __webpack_require__(/*! ./subscription */ \"./node_modules/everscale-standalone-client/client/SubscriptionController/subscription.js\");\nconst DEFAULT_POLLING_INTERVAL = 10000; // 10s\nclass SubscriptionController {\n    constructor(connectionController, notify) {\n        this._subscriptions = new Map();\n        this._subscriptionsMutex = new await_semaphore_1.Mutex();\n        this._sendMessageRequests = new Map();\n        this._subscriptionStates = new Map();\n        this._connectionController = connectionController;\n        this._notify = notify;\n    }\n    async sendMessageLocally(address, signedMessage) {\n        const subscriptionId = (0, utils_1.getUniqueId)();\n        try {\n            await this.subscribeToContract(address, { state: true }, subscriptionId);\n            const subscription = this._subscriptions.get(address);\n            if (subscription == null) {\n                throw new Error('Failed to subscribe to contract');\n            }\n            return await subscription.use((contract) => contract.sendMessageLocally(signedMessage));\n        }\n        finally {\n            this.unsubscribeFromContract(address, subscriptionId).catch(console.error);\n        }\n    }\n    sendMessage(address, signedMessage) {\n        let messageRequests = this._sendMessageRequests.get(address);\n        if (messageRequests == null) {\n            messageRequests = new Map();\n            this._sendMessageRequests.set(address, messageRequests);\n        }\n        const subscriptionId = (0, utils_1.getUniqueId)();\n        return new Promise((resolve, reject) => {\n            const id = signedMessage.hash;\n            messageRequests.set(id, { resolve, reject });\n            this.subscribeToContract(address, { state: true }, subscriptionId)\n                .then(async () => {\n                const subscription = this._subscriptions.get(address);\n                if (subscription == null) {\n                    throw new Error('Failed to subscribe to contract');\n                }\n                await subscription.prepareReliablePolling();\n                await subscription\n                    .use(async (contract) => {\n                    await contract.sendMessage(signedMessage);\n                    subscription.skipRefreshTimer();\n                });\n            })\n                .catch((e) => this._rejectMessageRequest(address, id, e))\n                .finally(() => {\n                this.unsubscribeFromContract(address, subscriptionId).catch(console.error);\n            });\n        });\n    }\n    async subscribeToContract(address, params, internalId) {\n        return this._subscriptionsMutex.use(async () => {\n            let mergeInputParams = (currentParams) => {\n                const newParams = { ...currentParams };\n                Object.keys(newParams).map((param) => {\n                    if (param !== 'state' && param !== 'transactions') {\n                        throw new Error(`Unknown subscription topic: ${param}`);\n                    }\n                    const value = params[param];\n                    if (typeof value === 'boolean') {\n                        newParams[param] = value;\n                    }\n                    else if (value == null) {\n                        return;\n                    }\n                    else {\n                        throw new Error(`Unknown subscription topic value ${param}: ${value}`);\n                    }\n                });\n                return newParams;\n            };\n            const subscriptionState = this._subscriptionStates.get(address) || makeDefaultSubscriptionState();\n            let changedParams;\n            if (internalId == null) {\n                // Client subscription without id\n                // Changed params are `SubscriptionState.client`\n                changedParams = mergeInputParams(subscriptionState.client);\n            }\n            else {\n                // Internal subscription with id\n                // Changed params are `SubscriptionState.internal[internalId]`\n                let exisingParams = subscriptionState.internal.get(internalId);\n                if (exisingParams != null) {\n                    // Updating existing internal params\n                    changedParams = mergeInputParams(exisingParams);\n                    // Remove entry if it is empty\n                    if (isEmptySubscription(changedParams)) {\n                        subscriptionState.internal.delete(internalId);\n                    }\n                }\n                else {\n                    // Merge input params with empty struct\n                    changedParams = mergeInputParams({ state: false, transactions: false });\n                }\n            }\n            // Merge changed params with the rest of internal params\n            let computedParams = { ...changedParams };\n            for (const params of subscriptionState.internal.values()) {\n                computedParams.state || (computedParams.state = params.state);\n                computedParams.transactions || (computedParams.transactions = params.transactions);\n            }\n            // Remove subscription if all params are empty\n            if (isEmptySubscription(computedParams)) {\n                this._subscriptionStates.delete(address);\n                await this._tryUnsubscribe(address);\n                return { ...computedParams };\n            }\n            // Create subscription if it doesn't exist\n            let existingSubscription = this._subscriptions.get(address);\n            const isNewSubscription = existingSubscription == null;\n            if (existingSubscription == null) {\n                existingSubscription = await this._createSubscription(address);\n            }\n            // Update subscription state\n            if (internalId == null) {\n                // Update client params\n                subscriptionState.client = changedParams;\n            }\n            else {\n                // Set new internal params\n                subscriptionState.internal.set(internalId, changedParams);\n            }\n            this._subscriptionStates.set(address, subscriptionState);\n            // Start subscription\n            if (isNewSubscription) {\n                await existingSubscription.start();\n            }\n            // Returns only changed params\n            return { ...changedParams };\n        });\n    }\n    async unsubscribeFromContract(address, internalId) {\n        await this.subscribeToContract(address, {\n            state: false,\n            transactions: false,\n        }, internalId);\n    }\n    async unsubscribeFromAllContracts(internalId) {\n        for (const address of this._subscriptions.keys()) {\n            await this.unsubscribeFromContract(address, internalId);\n        }\n    }\n    get subscriptionStates() {\n        const result = {};\n        for (const [key, value] of this._subscriptionStates.entries()) {\n            result[key] = { ...value.client };\n        }\n        return result;\n    }\n    async _createSubscription(address) {\n        class ContractHandler {\n            constructor(address, controller) {\n                this._enabled = false;\n                this._address = address;\n                this._controller = controller;\n            }\n            enabledNotifications() {\n                this._enabled = true;\n            }\n            onMessageExpired(pendingTransaction) {\n                if (this._enabled) {\n                    this._controller\n                        ._resolveMessageRequest(this._address, pendingTransaction.messageHash, undefined)\n                        .catch(console.error);\n                }\n            }\n            onMessageSent(pendingTransaction, transaction) {\n                if (this._enabled) {\n                    this._controller\n                        ._resolveMessageRequest(this._address, pendingTransaction.messageHash, transaction)\n                        .catch(console.error);\n                }\n            }\n            onStateChanged(newState) {\n                if (this._enabled) {\n                    this._controller._notifyStateChanged(this._address, newState);\n                }\n            }\n            onTransactionsFound(transactions, info) {\n                if (this._enabled) {\n                    this._controller._notifyTransactionsFound(this._address, transactions, info);\n                }\n            }\n        }\n        const handler = new ContractHandler(address, this);\n        const subscription = await subscription_1.ContractSubscription.subscribe(this._connectionController, address, handler);\n        subscription.setPollingInterval(DEFAULT_POLLING_INTERVAL);\n        handler.enabledNotifications();\n        this._subscriptions.set(address, subscription);\n        return subscription;\n    }\n    async _tryUnsubscribe(address) {\n        const subscriptionState = this._subscriptionStates.get(address);\n        const sendMessageRequests = this._sendMessageRequests.get(address);\n        if (subscriptionState == null && ((sendMessageRequests === null || sendMessageRequests === void 0 ? void 0 : sendMessageRequests.size) || 0) == 0) {\n            const subscription = this._subscriptions.get(address);\n            this._subscriptions.delete(address);\n            await (subscription === null || subscription === void 0 ? void 0 : subscription.stop());\n        }\n    }\n    async _rejectMessageRequest(address, id, error) {\n        this._deleteMessageRequestAndGetCallback(address, id).reject(error);\n        await this._subscriptionsMutex.use(async () => this._tryUnsubscribe(address));\n    }\n    async _resolveMessageRequest(address, id, transaction) {\n        this._deleteMessageRequestAndGetCallback(address, id).resolve(transaction);\n        await this._subscriptionsMutex.use(async () => this._tryUnsubscribe(address));\n    }\n    _notifyStateChanged(address, state) {\n        const subscriptionState = this._subscriptionStates.get(address);\n        if (subscriptionState === null || subscriptionState === void 0 ? void 0 : subscriptionState.client.state) {\n            this._notify('contractStateChanged', {\n                address,\n                state,\n            });\n        }\n    }\n    _notifyTransactionsFound(address, transactions, info) {\n        const subscriptionState = this._subscriptionStates.get(address);\n        if (subscriptionState === null || subscriptionState === void 0 ? void 0 : subscriptionState.client.transactions) {\n            this._notify('transactionsFound', {\n                address,\n                transactions,\n                info,\n            });\n        }\n    }\n    _deleteMessageRequestAndGetCallback(address, id) {\n        var _a;\n        const callbacks = (_a = this._sendMessageRequests.get(address)) === null || _a === void 0 ? void 0 : _a.get(id);\n        if (!callbacks) {\n            throw new Error(`SendMessage request with id '${id}' not found`);\n        }\n        this._deleteMessageRequest(address, id);\n        return callbacks;\n    }\n    _deleteMessageRequest(address, id) {\n        const accountMessageRequests = this._sendMessageRequests.get(address);\n        if (!accountMessageRequests) {\n            return;\n        }\n        accountMessageRequests.delete(id);\n        if (accountMessageRequests.size == 0) {\n            this._sendMessageRequests.delete(address);\n        }\n    }\n}\nexports.SubscriptionController = SubscriptionController;\nconst makeDefaultSubscriptionState = () => ({\n    internal: new Map(),\n    client: {\n        state: false,\n        transactions: false,\n    },\n});\nconst isEmptySubscription = (params) => !params.state && !params.transactions;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/SubscriptionController/index.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/SubscriptionController/subscription.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/SubscriptionController/subscription.js ***!
  \************************************************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ContractSubscription = void 0;\nconst await_semaphore_1 = __webpack_require__(/*! @broxus/await-semaphore */ \"./node_modules/@broxus/await-semaphore/dist/index.js\");\nconst core_1 = __importDefault(__webpack_require__(/*! ../../core */ \"./node_modules/everscale-standalone-client/core.js\"));\nconst { nekoton, debugLog } = core_1.default;\nclass ContractSubscription {\n    constructor(connection, release, address, contract) {\n        this._contractMutex = new await_semaphore_1.Mutex();\n        this._pollingInterval = BACKGROUND_POLLING_INTERVAL;\n        this._isRunning = false;\n        this._connection = connection;\n        this._address = address;\n        this._contract = contract;\n        this._releaseTransport = release;\n        this._currentPollingMethod = contract.pollingMethod;\n    }\n    static async subscribe(connectionController, address, handler) {\n        const { transport: { data: { connection, transport } }, release, } = await connectionController.acquire();\n        try {\n            const contract = await transport.subscribeToGenericContract(address, handler);\n            if (contract == null) {\n                throw new Error(`Failed to subscribe to contract: ${address}`);\n            }\n            return new ContractSubscription(connection, release, address, contract);\n        }\n        catch (e) {\n            release();\n            throw e;\n        }\n    }\n    setPollingInterval(interval) {\n        this._pollingInterval = interval;\n    }\n    async start() {\n        if (this._releaseTransport == null) {\n            throw new Error('Contract subscription must not be started after being closed');\n        }\n        if (this._loopPromise) {\n            debugLog('ContractSubscription -> awaiting loop promise');\n            await this._loopPromise;\n        }\n        debugLog('ContractSubscription -> loop started');\n        this._loopPromise = (async () => {\n            const isSimple = !(this._connection instanceof nekoton.GqlConnection);\n            this._isRunning = true;\n            let previousPollingMethod = this._currentPollingMethod;\n            while (this._isRunning) {\n                const pollingMethodChanged = previousPollingMethod != this._currentPollingMethod;\n                previousPollingMethod = this._currentPollingMethod;\n                if (isSimple || this._currentPollingMethod == 'manual') {\n                    this._currentBlockId = undefined;\n                    debugLog('ContractSubscription -> manual -> waiting begins');\n                    const pollingInterval = this._currentPollingMethod == 'manual'\n                        ? this._pollingInterval\n                        : INTENSIVE_POLLING_INTERVAL;\n                    await new Promise((resolve) => {\n                        const timerHandle = setTimeout(() => {\n                            this._refreshTimer = undefined;\n                            resolve();\n                        }, pollingInterval);\n                        this._refreshTimer = [timerHandle, resolve];\n                    });\n                    debugLog('ContractSubscription -> manual -> waiting ends');\n                    if (!this._isRunning) {\n                        break;\n                    }\n                    debugLog('ContractSubscription -> manual -> refreshing begins');\n                    try {\n                        this._currentPollingMethod = await this._contractMutex.use(async () => {\n                            await this._contract.refresh();\n                            return this._contract.pollingMethod;\n                        });\n                    }\n                    catch (e) {\n                        console.error(`Error during account refresh (${this._address})`, e);\n                    }\n                    debugLog('ContractSubscription -> manual -> refreshing ends');\n                }\n                else {\n                    // SAFETY: connection is always GqlConnection here due to `isSimple`\n                    const connection = this._connection;\n                    debugLog('ContractSubscription -> reliable start');\n                    if (pollingMethodChanged && this._suggestedBlockId != null) {\n                        this._currentBlockId = this._suggestedBlockId;\n                    }\n                    this._suggestedBlockId = undefined;\n                    let nextBlockId;\n                    if (this._currentBlockId == null) {\n                        console.warn('Starting reliable connection with unknown block');\n                        try {\n                            const latestBlock = await connection.getLatestBlock(this._address);\n                            this._currentBlockId = latestBlock.id;\n                            nextBlockId = this._currentBlockId;\n                        }\n                        catch (e) {\n                            console.error(`Failed to get latest block for ${this._address}`, e);\n                            continue;\n                        }\n                    }\n                    else {\n                        try {\n                            nextBlockId = await connection.waitForNextBlock(this._currentBlockId, this._address, NEXT_BLOCK_TIMEOUT);\n                        }\n                        catch (e) {\n                            console.error(`Failed to wait for next block for ${this._address}`);\n                            continue; // retry\n                        }\n                    }\n                    try {\n                        this._currentPollingMethod = await this._contractMutex.use(async () => {\n                            await this._contract.handleBlock(nextBlockId);\n                            return this._contract.pollingMethod;\n                        });\n                        this._currentBlockId = nextBlockId;\n                    }\n                    catch (e) {\n                        console.error(`Failed to handle block for ${this._address}`, e);\n                    }\n                }\n            }\n            debugLog('ContractSubscription -> loop finished');\n        })();\n    }\n    skipRefreshTimer() {\n        var _a, _b;\n        clearTimeout((_a = this._refreshTimer) === null || _a === void 0 ? void 0 : _a[0]);\n        (_b = this._refreshTimer) === null || _b === void 0 ? void 0 : _b[1]();\n        this._refreshTimer = undefined;\n    }\n    async pause() {\n        if (!this._isRunning) {\n            return;\n        }\n        this._isRunning = false;\n        this.skipRefreshTimer();\n        await this._loopPromise;\n        this._loopPromise = undefined;\n        this._currentPollingMethod = await this._contractMutex.use(async () => {\n            return this._contract.pollingMethod;\n        });\n        this._currentBlockId = undefined;\n        this._suggestedBlockId = undefined;\n    }\n    async stop() {\n        var _a;\n        await this.pause();\n        this._contract.free();\n        (_a = this._releaseTransport) === null || _a === void 0 ? void 0 : _a.call(this);\n        this._releaseTransport = undefined;\n    }\n    async prepareReliablePolling() {\n        try {\n            if (this._connection instanceof nekoton.GqlConnection) {\n                this._suggestedBlockId = (await this._connection.getLatestBlock(this._address)).id;\n            }\n        }\n        catch (e) {\n            throw new Error(`Failed to prepare reliable polling: ${e.toString()}`);\n        }\n    }\n    async use(f) {\n        const release = await this._contractMutex.acquire();\n        return f(this._contract)\n            .then((res) => {\n            release();\n            return res;\n        })\n            .catch((err) => {\n            release();\n            throw err;\n        });\n    }\n}\nexports.ContractSubscription = ContractSubscription;\nconst NEXT_BLOCK_TIMEOUT = 60; // 60s\nconst INTENSIVE_POLLING_INTERVAL = 2000; // 2s\nconst BACKGROUND_POLLING_INTERVAL = 60000;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/SubscriptionController/subscription.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/clock.js":
/*!******************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/clock.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.Clock = void 0;\n/**\n * Wrapper around clocks which are used in `EverscaleStandaloneClient` instances\n *\n * @category Client\n */\nclass Clock {\n    constructor(offset) {\n        this.impls = [];\n        this.currentOffset = 0;\n        if (offset != null) {\n            this.currentOffset = offset;\n        }\n    }\n    /**\n     * Clock offset in milliseconds\n     */\n    get offset() {\n        return this.currentOffset;\n    }\n    /**\n     * Set clock offset in milliseconds\n     */\n    set offset(value) {\n        this.currentOffset = value;\n        for (const impl of this.impls) {\n            impl.updateOffset(this.currentOffset);\n        }\n    }\n    /**\n     * Returns current time in milliseconds\n     */\n    get time() {\n        return new Date().getTime() + this.offset;\n    }\n    /**\n     * Detaches all affected providers\n     *\n     * NOTE: affected providers offset remains the same\n     */\n    detach() {\n        this.impls = [];\n    }\n}\nexports.Clock = Clock;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLXN0YW5kYWxvbmUtY2xpZW50L2NsaWVudC9jbG9jay5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2hleC1iYXR0bGUtZ2FtZS8uL25vZGVfbW9kdWxlcy9ldmVyc2NhbGUtc3RhbmRhbG9uZS1jbGllbnQvY2xpZW50L2Nsb2NrLmpzPzM2YWIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLkNsb2NrID0gdm9pZCAwO1xuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCBjbG9ja3Mgd2hpY2ggYXJlIHVzZWQgaW4gYEV2ZXJzY2FsZVN0YW5kYWxvbmVDbGllbnRgIGluc3RhbmNlc1xuICpcbiAqIEBjYXRlZ29yeSBDbGllbnRcbiAqL1xuY2xhc3MgQ2xvY2sge1xuICAgIGNvbnN0cnVjdG9yKG9mZnNldCkge1xuICAgICAgICB0aGlzLmltcGxzID0gW107XG4gICAgICAgIHRoaXMuY3VycmVudE9mZnNldCA9IDA7XG4gICAgICAgIGlmIChvZmZzZXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5jdXJyZW50T2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsb2NrIG9mZnNldCBpbiBtaWxsaXNlY29uZHNcbiAgICAgKi9cbiAgICBnZXQgb2Zmc2V0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50T2Zmc2V0O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXQgY2xvY2sgb2Zmc2V0IGluIG1pbGxpc2Vjb25kc1xuICAgICAqL1xuICAgIHNldCBvZmZzZXQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50T2Zmc2V0ID0gdmFsdWU7XG4gICAgICAgIGZvciAoY29uc3QgaW1wbCBvZiB0aGlzLmltcGxzKSB7XG4gICAgICAgICAgICBpbXBsLnVwZGF0ZU9mZnNldCh0aGlzLmN1cnJlbnRPZmZzZXQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgY3VycmVudCB0aW1lIGluIG1pbGxpc2Vjb25kc1xuICAgICAqL1xuICAgIGdldCB0aW1lKCkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGUoKS5nZXRUaW1lKCkgKyB0aGlzLm9mZnNldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGV0YWNoZXMgYWxsIGFmZmVjdGVkIHByb3ZpZGVyc1xuICAgICAqXG4gICAgICogTk9URTogYWZmZWN0ZWQgcHJvdmlkZXJzIG9mZnNldCByZW1haW5zIHRoZSBzYW1lXG4gICAgICovXG4gICAgZGV0YWNoKCkge1xuICAgICAgICB0aGlzLmltcGxzID0gW107XG4gICAgfVxufVxuZXhwb3J0cy5DbG9jayA9IENsb2NrO1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/clock.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/index.js":
/*!******************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/index.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.EverscaleStandaloneClient = exports.SUPPORTED_PERMISSIONS = exports.VERSION = exports.DEFAULT_CLIENT_PROPERTIES = exports.Clock = exports.SimpleKeystore = exports.checkConnection = exports.ConnectionError = exports.NETWORK_PRESETS = void 0;\nconst fast_safe_stringify_1 = __importDefault(__webpack_require__(/*! fast-safe-stringify */ \"./node_modules/fast-safe-stringify/index.js\"));\nconst core_1 = __importDefault(__webpack_require__(/*! ../core */ \"./node_modules/everscale-standalone-client/core.js\"));\nconst utils_1 = __webpack_require__(/*! ./utils */ \"./node_modules/everscale-standalone-client/client/utils.js\");\nconst ConnectionController_1 = __webpack_require__(/*! ./ConnectionController */ \"./node_modules/everscale-standalone-client/client/ConnectionController/index.js\");\nconst SubscriptionController_1 = __webpack_require__(/*! ./SubscriptionController */ \"./node_modules/everscale-standalone-client/client/SubscriptionController/index.js\");\nconst AccountsStorage_1 = __webpack_require__(/*! ./AccountsStorage */ \"./node_modules/everscale-standalone-client/client/AccountsStorage/index.js\");\nvar ConnectionController_2 = __webpack_require__(/*! ./ConnectionController */ \"./node_modules/everscale-standalone-client/client/ConnectionController/index.js\");\nObject.defineProperty(exports, \"NETWORK_PRESETS\", ({ enumerable: true, get: function () { return ConnectionController_2.NETWORK_PRESETS; } }));\nvar ConnectionController_3 = __webpack_require__(/*! ./ConnectionController */ \"./node_modules/everscale-standalone-client/client/ConnectionController/index.js\");\nObject.defineProperty(exports, \"ConnectionError\", ({ enumerable: true, get: function () { return ConnectionController_3.ConnectionError; } }));\nObject.defineProperty(exports, \"checkConnection\", ({ enumerable: true, get: function () { return ConnectionController_3.checkConnection; } }));\n__exportStar(__webpack_require__(/*! ./AccountsStorage */ \"./node_modules/everscale-standalone-client/client/AccountsStorage/index.js\"), exports);\nvar keystore_1 = __webpack_require__(/*! ./keystore */ \"./node_modules/everscale-standalone-client/client/keystore.js\");\nObject.defineProperty(exports, \"SimpleKeystore\", ({ enumerable: true, get: function () { return keystore_1.SimpleKeystore; } }));\nvar clock_1 = __webpack_require__(/*! ./clock */ \"./node_modules/everscale-standalone-client/client/clock.js\");\nObject.defineProperty(exports, \"Clock\", ({ enumerable: true, get: function () { return clock_1.Clock; } }));\nconst { ensureNekotonLoaded, nekoton } = core_1.default;\nfunction validateMessageProperties(message) {\n    const m = message || {};\n    return {\n        retryCount: m.retryCount != null ? Math.max(1, ~~m.retryCount) : 5,\n        timeout: m.timeout != null ? Math.max(1, ~~m.timeout) : 60,\n        timeoutGrowFactor: m.timeoutGrowFactor || 1.2,\n        retryTransfers: true,\n    };\n}\n/**\n * @category Client\n */\nexports.DEFAULT_CLIENT_PROPERTIES = {\n    connection: ConnectionController_1.DEFAULT_NETWORK_GROUP,\n};\n/**\n * @category Client\n */\nexports.VERSION = '0.2.25';\n/**\n * @category Client\n */\nexports.SUPPORTED_PERMISSIONS = ['basic', 'accountInteraction'];\n/**\n * @category Client\n */\nclass EverscaleStandaloneClient extends utils_1.SafeEventEmitter {\n    constructor(ctx) {\n        super();\n        this._handlers = {\n            requestPermissions,\n            changeAccount,\n            disconnect,\n            subscribe,\n            unsubscribe,\n            unsubscribeAll,\n            getProviderState,\n            getFullContractState,\n            getAccountsByCodeHash,\n            getTransactions,\n            getTransaction,\n            findTransaction,\n            runLocal,\n            getExpectedAddress,\n            getBocHash,\n            packIntoCell,\n            unpackFromCell,\n            extractPublicKey,\n            codeToTvc,\n            mergeTvc,\n            splitTvc,\n            setCodeSalt,\n            getCodeSalt,\n            encodeInternalInput,\n            decodeInput,\n            decodeOutput,\n            decodeEvent,\n            decodeTransaction,\n            decodeTransactionEvents,\n            verifySignature,\n            sendUnsignedExternalMessage,\n            // addAsset, // not supported\n            signData,\n            signDataRaw,\n            // encryptData, // not supported\n            // decryptData, // not supported\n            // estimateFees, // not supported\n            sendMessage,\n            sendMessageDelayed,\n            sendExternalMessage,\n            sendExternalMessageDelayed,\n        };\n        this._context = ctx;\n    }\n    static async create(params) {\n        await ensureNekotonLoaded(params.initInput);\n        // NOTE: capture client inside notify using wrapper object\n        const notificationContext = {};\n        const notify = (method, params) => {\n            var _a;\n            (_a = notificationContext.client) === null || _a === void 0 ? void 0 : _a.emit(method, params);\n        };\n        const clock = new core_1.default.nekoton.ClockWithOffset();\n        if (params.clock != null) {\n            params.clock['impls'].push(clock);\n            clock.updateOffset(params.clock.offset);\n        }\n        try {\n            const connectionController = await (0, ConnectionController_1.createConnectionController)(clock, params.connection);\n            const subscriptionController = new SubscriptionController_1.SubscriptionController(connectionController, notify);\n            const client = new EverscaleStandaloneClient({\n                permissions: {},\n                connectionController,\n                subscriptionController,\n                properties: {\n                    message: validateMessageProperties(params.message),\n                },\n                keystore: params.keystore,\n                accountsStorage: params.accountsStorage,\n                clock,\n                notify,\n            });\n            // NOTE: WeakRef is not working here, so hope it will be garbage collected\n            notificationContext.client = client;\n            return client;\n        }\n        catch (e) {\n            if (params.clock != null) {\n                params.clock['impls'].pop();\n            }\n            clock.free();\n            throw e;\n        }\n    }\n    request(req) {\n        const handler = this._handlers[req.method];\n        if (handler == null) {\n            throw invalidRequest(req, `Method '${req.method}' is not supported by standalone provider`);\n        }\n        return handler(this._context, req);\n    }\n    addListener(eventName, listener) {\n        return super.addListener(eventName, listener);\n    }\n    removeListener(eventName, listener) {\n        return super.removeListener(eventName, listener);\n    }\n    on(eventName, listener) {\n        return super.on(eventName, listener);\n    }\n    once(eventName, listener) {\n        return super.once(eventName, listener);\n    }\n    prependListener(eventName, listener) {\n        return super.prependListener(eventName, listener);\n    }\n    prependOnceListener(eventName, listener) {\n        return super.prependOnceListener(eventName, listener);\n    }\n}\nexports.EverscaleStandaloneClient = EverscaleStandaloneClient;\nconst requestPermissions = async (ctx, req) => {\n    requireParams(req);\n    const { permissions } = req.params;\n    requireArray(req, req.params, 'permissions');\n    const newPermissions = { ...ctx.permissions };\n    for (const permission of permissions) {\n        if (permission === 'basic' || permission === 'tonClient') {\n            newPermissions.basic = true;\n        }\n        else if (permission === 'accountInteraction') {\n            if (newPermissions.accountInteraction != null) {\n                continue;\n            }\n            newPermissions.accountInteraction = await makeAccountInteractionPermission(req, ctx);\n        }\n        else {\n            throw invalidRequest(req, `Permission '${permission}' is not supported by standalone provider`);\n        }\n    }\n    ctx.permissions = newPermissions;\n    // NOTE: be sure to return object copy to prevent adding new permissions\n    const permissionsCopy = JSON.parse(JSON.stringify(newPermissions));\n    ctx.notify('permissionsChanged', {\n        permissions: permissionsCopy,\n    });\n    return permissionsCopy;\n};\nconst changeAccount = async (ctx, req) => {\n    requireAccountsStorage(req, ctx);\n    const newPermissions = { ...ctx.permissions };\n    newPermissions.accountInteraction = await makeAccountInteractionPermission(req, ctx);\n    ctx.permissions = newPermissions;\n    // NOTE: be sure to return object copy to prevent adding new permissions\n    const permissionsCopy = JSON.parse(JSON.stringify(newPermissions));\n    ctx.notify('permissionsChanged', {\n        permissions: permissionsCopy,\n    });\n    return permissionsCopy;\n};\nconst disconnect = async (ctx, _req) => {\n    ctx.permissions = {};\n    await ctx.subscriptionController.unsubscribeFromAllContracts();\n    ctx.notify('permissionsChanged', { permissions: {} });\n    return undefined;\n};\nconst subscribe = async (ctx, req) => {\n    requireParams(req);\n    const { address, subscriptions } = req.params;\n    requireString(req, req.params, 'address');\n    requireOptionalObject(req, req.params, 'subscriptions');\n    let repackedAddress;\n    try {\n        repackedAddress = nekoton.repackAddress(address);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    try {\n        return await ctx.subscriptionController.subscribeToContract(repackedAddress, subscriptions);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst unsubscribe = async (ctx, req) => {\n    requireParams(req);\n    const { address } = req.params;\n    requireString(req, req.params, 'address');\n    let repackedAddress;\n    try {\n        repackedAddress = nekoton.repackAddress(address);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    await ctx.subscriptionController.unsubscribeFromContract(repackedAddress);\n    return undefined;\n};\nconst unsubscribeAll = async (ctx, _req) => {\n    await ctx.subscriptionController.unsubscribeFromAllContracts();\n    return undefined;\n};\nconst getProviderState = async (ctx, req) => {\n    const transport = ctx.connectionController.initializedTransport;\n    if (transport == null) {\n        throw invalidRequest(req, 'Connection controller was not initialized');\n    }\n    const version = exports.VERSION;\n    return {\n        version,\n        numericVersion: (0, utils_1.convertVersionToInt32)(version),\n        networkId: transport.id,\n        selectedConnection: transport.group,\n        supportedPermissions: [...exports.SUPPORTED_PERMISSIONS],\n        permissions: JSON.parse(JSON.stringify(ctx.permissions)),\n        subscriptions: ctx.subscriptionController.subscriptionStates,\n    };\n};\nconst getFullContractState = async (ctx, req) => {\n    requireParams(req);\n    const { address } = req.params;\n    requireString(req, req.params, 'address');\n    const { connectionController } = ctx;\n    try {\n        return connectionController.use(async ({ data: { transport } }) => ({\n            state: await transport.getFullContractState(address),\n        }));\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getAccountsByCodeHash = async (ctx, req) => {\n    requireParams(req);\n    const { codeHash, limit, continuation } = req.params;\n    requireString(req, req.params, 'codeHash');\n    requireOptionalNumber(req, req.params, 'limit');\n    requireOptionalString(req, req.params, 'continuation');\n    const { connectionController } = ctx;\n    try {\n        return connectionController.use(({ data: { transport } }) => transport.getAccountsByCodeHash(codeHash, limit || 50, continuation));\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getTransactions = async (ctx, req) => {\n    requireParams(req);\n    const { address, continuation, limit } = req.params;\n    requireString(req, req.params, 'address');\n    requireOptional(req, req.params, 'continuation', requireTransactionId);\n    requireOptionalNumber(req, req.params, 'limit');\n    const { connectionController } = ctx;\n    try {\n        return connectionController.use(({ data: { transport } }) => transport.getTransactions(address, continuation === null || continuation === void 0 ? void 0 : continuation.lt, limit || 50));\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getTransaction = async (ctx, req) => {\n    requireParams(req);\n    const { hash } = req.params;\n    requireString(req, req.params, 'hash');\n    const { connectionController } = ctx;\n    try {\n        return {\n            transaction: await connectionController.use(({ data: { transport } }) => transport.getTransaction(hash)),\n        };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst findTransaction = async (ctx, req) => {\n    requireParams(req);\n    const { inMessageHash } = req.params;\n    requireOptional(req, req.params, 'inMessageHash', requireString);\n    const { connectionController } = ctx;\n    // TODO: add more filters\n    if (inMessageHash == null) {\n        return {\n            transaction: undefined,\n        };\n    }\n    try {\n        return {\n            transaction: await connectionController.use(({ data: { transport } }) => transport.getDstTransaction(inMessageHash)),\n        };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst runLocal = async (ctx, req) => {\n    requireParams(req);\n    const { address, cachedState, responsible, functionCall } = req.params;\n    requireString(req, req.params, 'address');\n    requireOptional(req, req.params, 'cachedState', requireContractState);\n    requireOptionalBoolean(req, req.params, 'responsible');\n    requireFunctionCall(req, req.params, 'functionCall');\n    const { clock, connectionController } = ctx;\n    let contractState = cachedState;\n    if (contractState == null) {\n        contractState = await connectionController.use(async ({ data: { transport } }) => transport.getFullContractState(address));\n    }\n    if (contractState == null) {\n        throw invalidRequest(req, 'Account not found');\n    }\n    if (!contractState.isDeployed || contractState.lastTransactionId == null) {\n        throw invalidRequest(req, 'Account is not deployed');\n    }\n    try {\n        const { output, code } = nekoton.runLocal(clock, contractState.boc, functionCall.abi, functionCall.method, functionCall.params, responsible || false);\n        return { output, code };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getExpectedAddress = async (_ctx, req) => {\n    requireParams(req);\n    const { tvc, abi, workchain, publicKey, initParams } = req.params;\n    requireString(req, req.params, 'tvc');\n    requireString(req, req.params, 'abi');\n    requireOptionalNumber(req, req.params, 'workchain');\n    requireOptionalString(req, req.params, 'publicKey');\n    try {\n        return nekoton.getExpectedAddress(tvc, abi, workchain || 0, publicKey, initParams);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getBocHash = async (_ctx, req) => {\n    requireParams(req);\n    const { boc } = req.params;\n    requireString(req, req.params, 'boc');\n    try {\n        return { hash: nekoton.getBocHash(boc) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst packIntoCell = async (_ctx, req) => {\n    requireParams(req);\n    const { structure, data, abiVersion } = req.params;\n    requireArray(req, req.params, 'structure');\n    requireOptional(req, req.params, 'abiVersion', requireString);\n    try {\n        return { boc: nekoton.packIntoCell(structure, data, abiVersion) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst unpackFromCell = async (_ctx, req) => {\n    requireParams(req);\n    const { structure, boc, allowPartial, abiVersion } = req.params;\n    requireArray(req, req.params, 'structure');\n    requireString(req, req.params, 'boc');\n    requireBoolean(req, req.params, 'allowPartial');\n    requireOptional(req, req.params, 'abiVersion', requireString);\n    try {\n        return { data: nekoton.unpackFromCell(structure, boc, allowPartial, abiVersion) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst extractPublicKey = async (_ctx, req) => {\n    requireParams(req);\n    const { boc } = req.params;\n    requireString(req, req.params, 'boc');\n    try {\n        return { publicKey: nekoton.extractPublicKey(boc) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst codeToTvc = async (_ctx, req) => {\n    requireParams(req);\n    const { code } = req.params;\n    requireString(req, req.params, 'code');\n    try {\n        return { tvc: nekoton.codeToTvc(code) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst mergeTvc = async (_ctx, req) => {\n    requireParams(req);\n    const { code, data } = req.params;\n    requireString(req, req.params, 'code');\n    requireString(req, req.params, 'data');\n    try {\n        return { tvc: nekoton.mergeTvc(code, data) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst splitTvc = async (_ctx, req) => {\n    requireParams(req);\n    const { tvc } = req.params;\n    requireString(req, req.params, 'tvc');\n    try {\n        return nekoton.splitTvc(tvc);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst setCodeSalt = async (_ctx, req) => {\n    requireParams(req);\n    const { code, salt } = req.params;\n    requireString(req, req.params, 'code');\n    requireString(req, req.params, 'salt');\n    try {\n        return { code: nekoton.setCodeSalt(code, salt) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst getCodeSalt = async (_ctx, req) => {\n    requireParams(req);\n    const { code } = req.params;\n    requireString(req, req.params, 'code');\n    try {\n        return { salt: nekoton.getCodeSalt(code) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst encodeInternalInput = async (_ctx, req) => {\n    requireParams(req);\n    requireFunctionCall(req, req, 'params');\n    const { abi, method, params } = req.params;\n    try {\n        return { boc: nekoton.encodeInternalInput(abi, method, params) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst decodeInput = async (_ctx, req) => {\n    requireParams(req);\n    const { body, abi, method, internal } = req.params;\n    requireString(req, req.params, 'body');\n    requireString(req, req.params, 'abi');\n    requireMethodOrArray(req, req.params, 'method');\n    requireBoolean(req, req.params, 'internal');\n    try {\n        return nekoton.decodeInput(body, abi, method, internal) || null;\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst decodeOutput = async (_ctx, req) => {\n    requireParams(req);\n    const { body, abi, method } = req.params;\n    requireString(req, req.params, 'body');\n    requireString(req, req.params, 'abi');\n    requireMethodOrArray(req, req.params, 'method');\n    try {\n        return nekoton.decodeOutput(body, abi, method) || null;\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst decodeEvent = async (_ctx, req) => {\n    requireParams(req);\n    const { body, abi, event } = req.params;\n    requireString(req, req.params, 'body');\n    requireString(req, req.params, 'abi');\n    requireMethodOrArray(req, req.params, 'event');\n    try {\n        return nekoton.decodeEvent(body, abi, event) || null;\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst decodeTransaction = async (_ctx, req) => {\n    requireParams(req);\n    const { transaction, abi, method } = req.params;\n    requireString(req, req.params, 'abi');\n    requireMethodOrArray(req, req.params, 'method');\n    try {\n        return nekoton.decodeTransaction(transaction, abi, method) || null;\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst decodeTransactionEvents = async (_ctx, req) => {\n    requireParams(req);\n    const { transaction, abi } = req.params;\n    requireString(req, req.params, 'abi');\n    try {\n        return { events: nekoton.decodeTransactionEvents(transaction, abi) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst verifySignature = async (_ctx, req) => {\n    requireParams(req);\n    const { publicKey, dataHash, signature } = req.params;\n    requireString(req, req.params, 'publicKey');\n    requireString(req, req.params, 'dataHash');\n    requireString(req, req.params, 'signature');\n    try {\n        return { isValid: nekoton.verifySignature(publicKey, dataHash, signature) };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst sendUnsignedExternalMessage = async (ctx, req) => {\n    requireParams(req);\n    const { recipient, stateInit, payload, local } = req.params;\n    requireString(req, req.params, 'recipient');\n    requireOptionalString(req, req.params, 'stateInit');\n    requireOptionalRawFunctionCall(req, req.params, 'payload');\n    requireOptionalBoolean(req, req.params, 'local');\n    let repackedRecipient;\n    try {\n        repackedRecipient = nekoton.repackAddress(recipient);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    const { clock, subscriptionController, properties } = ctx;\n    const makeSignedMessage = (timeout) => {\n        try {\n            if (typeof payload === 'string' || payload == null) {\n                const expireAt = ~~(clock.nowMs / 1000) + timeout;\n                return nekoton.createRawExternalMessage(repackedRecipient, stateInit, payload, expireAt);\n            }\n            else {\n                return nekoton.createExternalMessageWithoutSignature(clock, repackedRecipient, payload.abi, payload.method, stateInit, payload.params, timeout);\n            }\n        }\n        catch (e) {\n            throw invalidRequest(req, e.toString());\n        }\n    };\n    const handleTransaction = (transaction) => {\n        let output;\n        try {\n            if (typeof payload === 'object' && typeof payload != null) {\n                const decoded = nekoton.decodeTransaction(transaction, payload.abi, payload.method);\n                output = decoded === null || decoded === void 0 ? void 0 : decoded.output;\n            }\n        }\n        catch (_) { /* do nothing */\n        }\n        return { transaction, output };\n    };\n    // Force local execution\n    if (local === true) {\n        const signedMessage = makeSignedMessage(60);\n        const transaction = await subscriptionController.sendMessageLocally(repackedRecipient, signedMessage);\n        return handleTransaction(transaction);\n    }\n    // Send and wait with several retries\n    let timeout = properties.message.timeout;\n    for (let retry = 0; retry < properties.message.retryCount; ++retry) {\n        const signedMessage = makeSignedMessage(timeout);\n        const transaction = await subscriptionController.sendMessage(repackedRecipient, signedMessage);\n        if (transaction == null) {\n            timeout *= properties.message.timeoutGrowFactor;\n            continue;\n        }\n        return handleTransaction(transaction);\n    }\n    // Execute locally\n    const errorMessage = 'Message expired';\n    const signedMessage = makeSignedMessage(60);\n    const transaction = await subscriptionController.sendMessageLocally(repackedRecipient, signedMessage)\n        .catch((e) => {\n        throw invalidRequest(req, `${errorMessage}. ${e.toString()}`);\n    });\n    const additionalText = transaction.exitCode != null ? `. Possible exit code: ${transaction.exitCode}` : '';\n    throw invalidRequest(req, `${errorMessage}${additionalText}`);\n};\nconst signData = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireParams(req);\n    const { publicKey, data } = req.params;\n    requireString(req, req.params, 'publicKey');\n    requireString(req, req.params, 'data');\n    const { keystore } = ctx;\n    const signer = await keystore.getSigner(publicKey);\n    if (signer == null) {\n        throw invalidRequest(req, 'Signer not found for public key');\n    }\n    try {\n        const dataHash = nekoton.getDataHash(data);\n        return {\n            dataHash,\n            ...(await signer.sign(dataHash).then(nekoton.extendSignature)),\n        };\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst signDataRaw = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireParams(req);\n    const { publicKey, data } = req.params;\n    requireString(req, req.params, 'publicKey');\n    requireString(req, req.params, 'data');\n    const { keystore } = ctx;\n    const signer = await keystore.getSigner(publicKey);\n    if (signer == null) {\n        throw invalidRequest(req, 'Signer not found for public key');\n    }\n    try {\n        return await signer.sign(data).then(nekoton.extendSignature);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n};\nconst sendMessage = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireAccountsStorage(req, ctx);\n    requireParams(req);\n    const { sender, recipient, amount, bounce, payload } = req.params;\n    requireString(req, req.params, 'sender');\n    requireString(req, req.params, 'recipient');\n    requireString(req, req.params, 'amount');\n    requireBoolean(req, req.params, 'bounce');\n    requireOptional(req, req.params, 'payload', requireFunctionCall);\n    const { clock, properties, subscriptionController, connectionController, keystore, accountsStorage } = ctx;\n    let repackedSender;\n    let repackedRecipient;\n    let account;\n    try {\n        repackedSender = nekoton.repackAddress(sender);\n        repackedRecipient = nekoton.repackAddress(recipient);\n        account = await accountsStorage.getAccount(repackedSender).then((account) => {\n            if (account != null) {\n                return account;\n            }\n            else {\n                throw new Error('Sender not found');\n            }\n        });\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    const makeSignedMessage = async (timeout) => {\n        try {\n            return account.prepareMessage({\n                recipient: repackedRecipient,\n                amount,\n                bounce,\n                payload,\n                stateInit: undefined,\n                timeout,\n            }, new AccountsStorage_1.AccountsStorageContext(clock, connectionController, nekoton, keystore));\n        }\n        catch (e) {\n            throw invalidRequest(req, e.toString());\n        }\n    };\n    // Send and wait with several retries\n    let timeout = properties.message.timeout;\n    // Set `retryCount` if not explicitly disabled\n    const retryCount = properties.message.retryTransfers !== false ? properties.message.retryCount : 1;\n    for (let retry = 0; retry < retryCount; ++retry) {\n        const signedMessage = await makeSignedMessage(timeout);\n        const transaction = await subscriptionController.sendMessage(repackedSender, signedMessage);\n        if (transaction == null) {\n            timeout *= properties.message.timeoutGrowFactor;\n            continue;\n        }\n        return { transaction };\n    }\n    // Execute locally\n    const errorMessage = 'Message expired';\n    const signedMessage = await makeSignedMessage(60);\n    const transaction = await subscriptionController.sendMessageLocally(repackedSender, signedMessage)\n        .catch((e) => {\n        throw invalidRequest(req, `${errorMessage}. ${e.toString()}`);\n    });\n    const additionalText = transaction.exitCode != null ? `. Possible exit code: ${transaction.exitCode}` : '';\n    throw invalidRequest(req, `${errorMessage}${additionalText}`);\n};\nconst sendMessageDelayed = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireAccountsStorage(req, ctx);\n    requireParams(req);\n    const { sender, recipient, amount, bounce, payload } = req.params;\n    requireString(req, req.params, 'sender');\n    requireString(req, req.params, 'recipient');\n    requireString(req, req.params, 'amount');\n    requireBoolean(req, req.params, 'bounce');\n    requireOptional(req, req.params, 'payload', requireFunctionCall);\n    const { clock, subscriptionController, connectionController, keystore, accountsStorage, notify } = ctx;\n    let repackedSender;\n    let repackedRecipient;\n    try {\n        repackedSender = nekoton.repackAddress(sender);\n        repackedRecipient = nekoton.repackAddress(recipient);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    let signedMessage;\n    try {\n        const account = await accountsStorage.getAccount(repackedSender);\n        if (account == null) {\n            throw new Error('Sender not found');\n        }\n        signedMessage = await account.prepareMessage({\n            recipient: repackedRecipient,\n            amount,\n            bounce,\n            payload,\n            stateInit: undefined,\n            timeout: 60, // TEMP\n        }, new AccountsStorage_1.AccountsStorageContext(clock, connectionController, nekoton, keystore));\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    subscriptionController.sendMessage(repackedSender, signedMessage)\n        .then(transaction => {\n        notify('messageStatusUpdated', {\n            address: repackedSender,\n            hash: signedMessage.hash,\n            transaction,\n        });\n    })\n        .catch(console.error);\n    return {\n        message: {\n            account: repackedSender,\n            hash: signedMessage.hash,\n            expireAt: signedMessage.expireAt,\n        },\n    };\n};\nconst sendExternalMessage = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireParams(req);\n    const { publicKey, recipient, stateInit, payload, local } = req.params;\n    requireString(req, req.params, 'publicKey');\n    requireString(req, req.params, 'recipient');\n    requireOptionalString(req, req.params, 'stateInit');\n    requireFunctionCall(req, req.params, 'payload');\n    requireOptionalBoolean(req, req.params, 'local');\n    let repackedRecipient;\n    try {\n        repackedRecipient = nekoton.repackAddress(recipient);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    const { clock, subscriptionController, keystore, properties } = ctx;\n    const signer = await keystore.getSigner(publicKey);\n    if (signer == null) {\n        throw invalidRequest(req, 'Signer not found for public key');\n    }\n    const makeSignedMessage = async (timeout) => {\n        let unsignedMessage;\n        try {\n            unsignedMessage = nekoton.createExternalMessage(clock, repackedRecipient, payload.abi, payload.method, stateInit, payload.params, publicKey, timeout);\n        }\n        catch (e) {\n            throw invalidRequest(req, e.toString());\n        }\n        try {\n            const signature = await signer.sign(unsignedMessage.hash);\n            return unsignedMessage.sign(signature);\n        }\n        catch (e) {\n            throw invalidRequest(req, e.toString());\n        }\n        finally {\n            unsignedMessage.free();\n        }\n    };\n    const handleTransaction = (transaction) => {\n        let output;\n        try {\n            const decoded = nekoton.decodeTransaction(transaction, payload.abi, payload.method);\n            output = decoded === null || decoded === void 0 ? void 0 : decoded.output;\n        }\n        catch (_) { /* do nothing */\n        }\n        return { transaction, output };\n    };\n    // Force local execution\n    if (local === true) {\n        const signedMessage = await makeSignedMessage(60);\n        const transaction = await subscriptionController.sendMessageLocally(repackedRecipient, signedMessage);\n        return handleTransaction(transaction);\n    }\n    // Send and wait with several retries\n    let timeout = properties.message.timeout;\n    for (let retry = 0; retry < properties.message.retryCount; ++retry) {\n        const signedMessage = await makeSignedMessage(timeout);\n        const transaction = await subscriptionController.sendMessage(repackedRecipient, signedMessage);\n        if (transaction == null) {\n            timeout *= properties.message.timeoutGrowFactor;\n            continue;\n        }\n        return handleTransaction(transaction);\n    }\n    // Execute locally\n    const errorMessage = 'Message expired';\n    const signedMessage = await makeSignedMessage(60);\n    const transaction = await subscriptionController.sendMessageLocally(repackedRecipient, signedMessage)\n        .catch((e) => {\n        throw invalidRequest(req, `${errorMessage}. ${e.toString()}`);\n    });\n    const additionalText = transaction.exitCode != null ? `. Possible exit code: ${transaction.exitCode}` : '';\n    throw invalidRequest(req, `${errorMessage}${additionalText}`);\n};\nconst sendExternalMessageDelayed = async (ctx, req) => {\n    requireKeystore(req, ctx);\n    requireParams(req);\n    const { publicKey, recipient, stateInit, payload } = req.params;\n    requireString(req, req.params, 'publicKey');\n    requireString(req, req.params, 'recipient');\n    requireOptionalString(req, req.params, 'stateInit');\n    requireFunctionCall(req, req.params, 'payload');\n    let repackedRecipient;\n    try {\n        repackedRecipient = nekoton.repackAddress(recipient);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    const { clock, subscriptionController, keystore, properties, notify } = ctx;\n    const signer = await keystore.getSigner(publicKey);\n    if (signer == null) {\n        throw invalidRequest(req, 'Signer not found for public key');\n    }\n    let unsignedMessage;\n    try {\n        unsignedMessage = nekoton.createExternalMessage(clock, repackedRecipient, payload.abi, payload.method, stateInit, payload.params, publicKey, properties.message.timeout);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    let signedMessage;\n    try {\n        const signature = await signer.sign(unsignedMessage.hash);\n        signedMessage = unsignedMessage.sign(signature);\n    }\n    catch (e) {\n        throw invalidRequest(req, e.toString());\n    }\n    finally {\n        unsignedMessage.free();\n    }\n    subscriptionController.sendMessage(repackedRecipient, signedMessage)\n        .then(transaction => {\n        notify('messageStatusUpdated', {\n            address: repackedRecipient,\n            hash: signedMessage.hash,\n            transaction,\n        });\n    })\n        .catch(console.error);\n    return {\n        message: {\n            account: repackedRecipient,\n            hash: signedMessage.hash,\n            expireAt: signedMessage.expireAt,\n        },\n    };\n};\nfunction requireKeystore(req, context) {\n    if (context.keystore == null) {\n        throw invalidRequest(req, 'Keystore not found');\n    }\n}\nfunction requireAccountsStorage(req, context) {\n    if (context.accountsStorage == null) {\n        throw invalidRequest(req, 'AccountsStorage not found');\n    }\n}\nfunction requireParams(req) {\n    if (req.params == null || typeof req.params !== 'object') {\n        throw invalidRequest(req, 'required params object');\n    }\n}\nfunction requireObject(req, object, key) {\n    const property = object[key];\n    if (typeof property !== 'object') {\n        throw invalidRequest(req, `'${String(key)}' must be an object`);\n    }\n}\nfunction requireOptionalObject(req, object, key) {\n    const property = object[key];\n    if (property != null && typeof property !== 'object') {\n        throw invalidRequest(req, `'${String(key)}' must be an object if specified`);\n    }\n}\nfunction requireBoolean(req, object, key) {\n    const property = object[key];\n    if (typeof property !== 'boolean') {\n        throw invalidRequest(req, `'${String(key)}' must be a boolean`);\n    }\n}\nfunction requireOptionalBoolean(req, object, key) {\n    const property = object[key];\n    if (property != null && typeof property !== 'boolean') {\n        throw invalidRequest(req, `'${String(key)}' must be a boolean if specified`);\n    }\n}\nfunction requireString(req, object, key) {\n    const property = object[key];\n    if (typeof property !== 'string' || property.length === 0) {\n        throw invalidRequest(req, `'${String(key)}' must be non-empty string`);\n    }\n}\nfunction requireOptionalString(req, object, key) {\n    const property = object[key];\n    if (property != null && (typeof property !== 'string' || property.length === 0)) {\n        throw invalidRequest(req, `'${String(key)}' must be a non-empty string if provided`);\n    }\n}\nfunction requireOptionalNumber(req, object, key) {\n    const property = object[key];\n    if (property != null && typeof property !== 'number') {\n        throw invalidRequest(req, `'${String(key)}' must be a number if provider`);\n    }\n}\nfunction requireArray(req, object, key) {\n    const property = object[key];\n    if (!Array.isArray(property)) {\n        throw invalidRequest(req, `'${String(key)}' must be an array`);\n    }\n}\nfunction requireOptional(req, object, key, predicate) {\n    const property = object[key];\n    if (property != null) {\n        predicate(req, object, key);\n    }\n}\nfunction requireTransactionId(req, object, key) {\n    requireObject(req, object, key);\n    const property = object[key];\n    requireString(req, property, 'lt');\n    requireString(req, property, 'hash');\n}\nfunction requireLastTransactionId(req, object, key) {\n    requireObject(req, object, key);\n    const property = object[key];\n    requireBoolean(req, property, 'isExact');\n    requireString(req, property, 'lt');\n    requireOptionalString(req, property, 'hash');\n}\nfunction requireContractState(req, object, key) {\n    requireObject(req, object, key);\n    const property = object[key];\n    requireString(req, property, 'balance');\n    requireOptional(req, property, 'lastTransactionId', requireLastTransactionId);\n    requireBoolean(req, property, 'isDeployed');\n}\nfunction requireFunctionCall(req, object, key) {\n    requireObject(req, object, key);\n    const property = object[key];\n    requireString(req, property, 'abi');\n    requireString(req, property, 'method');\n    requireObject(req, property, 'params');\n}\nfunction requireOptionalRawFunctionCall(req, object, key) {\n    const property = object[key];\n    if (typeof property === 'string' || property == null) {\n        return;\n    }\n    else if (typeof property === 'object') {\n        requireString(req, property, 'abi');\n        requireString(req, property, 'method');\n        requireObject(req, property, 'params');\n    }\n    else {\n        throw invalidRequest(req, `'${String(key)}' must be a function all or optional string`);\n    }\n}\nfunction requireMethodOrArray(req, object, key) {\n    const property = object[key];\n    if (property != null && typeof property !== 'string' && !Array.isArray(property)) {\n        throw invalidRequest(req, `'${String(key)}' must be a method name or an array of possible names`);\n    }\n}\nasync function makeAccountInteractionPermission(req, ctx) {\n    requireAccountsStorage(req, ctx);\n    const defaultAccount = ctx.accountsStorage.defaultAccount;\n    if (defaultAccount == null) {\n        throw invalidRequest(req, 'Default account not set in accounts storage');\n    }\n    const account = await ctx.accountsStorage.getAccount(defaultAccount);\n    if (account == null) {\n        throw invalidRequest(req, 'Default account not found');\n    }\n    const publicKey = await account.fetchPublicKey(new AccountsStorage_1.AccountsStorageContext(ctx.clock, ctx.connectionController, nekoton));\n    return {\n        address: account.address.toString(),\n        publicKey,\n        contractType: 'unknown',\n    };\n}\nconst invalidRequest = (req, message, data) => new NekotonRpcError(2, `${req.method}: ${message}`, data);\nclass NekotonRpcError extends Error {\n    constructor(code, message, data) {\n        if (!Number.isInteger(code)) {\n            throw new Error('\"code\" must be an integer');\n        }\n        if (!message || typeof message !== 'string') {\n            throw new Error('\"message\" must be a nonempty string');\n        }\n        super(message);\n        this.code = code;\n        this.data = data;\n    }\n    serialize() {\n        const serialized = {\n            code: this.code,\n            message: this.message,\n        };\n        if (this.data !== undefined) {\n            serialized.data = this.data;\n        }\n        if (this.stack) {\n            serialized.stack = this.stack;\n        }\n        return serialized;\n    }\n    toString() {\n        return (0, fast_safe_stringify_1.default)(this.serialize(), stringifyReplacer, 2);\n    }\n}\nconst stringifyReplacer = (_, value) => {\n    if (value === '[Circular]') {\n        return undefined;\n    }\n    return value;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/index.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/keystore.js":
/*!*********************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/keystore.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.SimpleKeystore = void 0;\nconst core_1 = __importDefault(__webpack_require__(/*! ../core */ \"./node_modules/everscale-standalone-client/core.js\"));\nconst { nekoton } = core_1.default;\n/**\n * @category Keystore\n */\nclass SimpleKeystore {\n    constructor(entries = {}) {\n        this.signers = new Map();\n        this.signersByPublicKey = new Map();\n        for (const [id, signer] of Object.entries(entries)) {\n            this.addKeyPair(id, signer);\n        }\n    }\n    static generateKeyPair() {\n        return nekoton.ed25519_generateKeyPair();\n    }\n    addKeyPair(idOrKeypair, rest) {\n        let id;\n        let keyPair;\n        if (typeof idOrKeypair == 'string') {\n            id = idOrKeypair;\n            keyPair = rest;\n        }\n        else {\n            id = idOrKeypair.publicKey;\n            keyPair = idOrKeypair;\n        }\n        const signer = new SimpleSigner(keyPair);\n        this.signers.set(id, signer);\n        this.signersByPublicKey.set(keyPair.publicKey, signer);\n    }\n    removeKeyPair(id) {\n        const signer = this.signers.get(id);\n        if (signer != null) {\n            this.signers.delete(id);\n            this.signersByPublicKey.delete(signer.publicKey);\n        }\n    }\n    /**\n     * Generate and add a new key\n     *\n     * @returns keyId of the new signer\n     */\n    async withNewKey(f, options = {}) {\n        const newKey = SimpleKeystore.generateKeyPair();\n        const keyId = options.keyId != null ? options.keyId : newKey.publicKey;\n        const keepOnError = options.keepOnError || false;\n        this.addKeyPair(keyId, newKey);\n        return f(keyId)\n            .then(retain => {\n            if (retain === false) {\n                this.removeKeyPair(keyId);\n            }\n            return keyId;\n        })\n            .catch((e) => {\n            if (!keepOnError) {\n                this.removeKeyPair(keyId);\n            }\n            throw e;\n        });\n    }\n    async getSigner(id) {\n        return this.signers.get(id) || this.signersByPublicKey.get(id);\n    }\n}\nexports.SimpleKeystore = SimpleKeystore;\nclass SimpleSigner {\n    constructor(keyPair) {\n        this.keyPair = keyPair;\n        this.publicKey = this.keyPair.publicKey;\n    }\n    async sign(rawData) {\n        return nekoton.ed25519_sign(this.keyPair.secretKey, rawData);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLXN0YW5kYWxvbmUtY2xpZW50L2NsaWVudC9rZXlzdG9yZS5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2hleC1iYXR0bGUtZ2FtZS8uL25vZGVfbW9kdWxlcy9ldmVyc2NhbGUtc3RhbmRhbG9uZS1jbGllbnQvY2xpZW50L2tleXN0b3JlLmpzPzc0M2QiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG52YXIgX19pbXBvcnREZWZhdWx0ID0gKHRoaXMgJiYgdGhpcy5fX2ltcG9ydERlZmF1bHQpIHx8IGZ1bmN0aW9uIChtb2QpIHtcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IFwiZGVmYXVsdFwiOiBtb2QgfTtcbn07XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLlNpbXBsZUtleXN0b3JlID0gdm9pZCAwO1xuY29uc3QgY29yZV8xID0gX19pbXBvcnREZWZhdWx0KHJlcXVpcmUoXCIuLi9jb3JlXCIpKTtcbmNvbnN0IHsgbmVrb3RvbiB9ID0gY29yZV8xLmRlZmF1bHQ7XG4vKipcbiAqIEBjYXRlZ29yeSBLZXlzdG9yZVxuICovXG5jbGFzcyBTaW1wbGVLZXlzdG9yZSB7XG4gICAgY29uc3RydWN0b3IoZW50cmllcyA9IHt9KSB7XG4gICAgICAgIHRoaXMuc2lnbmVycyA9IG5ldyBNYXAoKTtcbiAgICAgICAgdGhpcy5zaWduZXJzQnlQdWJsaWNLZXkgPSBuZXcgTWFwKCk7XG4gICAgICAgIGZvciAoY29uc3QgW2lkLCBzaWduZXJdIG9mIE9iamVjdC5lbnRyaWVzKGVudHJpZXMpKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEtleVBhaXIoaWQsIHNpZ25lcik7XG4gICAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljIGdlbmVyYXRlS2V5UGFpcigpIHtcbiAgICAgICAgcmV0dXJuIG5la290b24uZWQyNTUxOV9nZW5lcmF0ZUtleVBhaXIoKTtcbiAgICB9XG4gICAgYWRkS2V5UGFpcihpZE9yS2V5cGFpciwgcmVzdCkge1xuICAgICAgICBsZXQgaWQ7XG4gICAgICAgIGxldCBrZXlQYWlyO1xuICAgICAgICBpZiAodHlwZW9mIGlkT3JLZXlwYWlyID09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBpZCA9IGlkT3JLZXlwYWlyO1xuICAgICAgICAgICAga2V5UGFpciA9IHJlc3Q7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZCA9IGlkT3JLZXlwYWlyLnB1YmxpY0tleTtcbiAgICAgICAgICAgIGtleVBhaXIgPSBpZE9yS2V5cGFpcjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBzaWduZXIgPSBuZXcgU2ltcGxlU2lnbmVyKGtleVBhaXIpO1xuICAgICAgICB0aGlzLnNpZ25lcnMuc2V0KGlkLCBzaWduZXIpO1xuICAgICAgICB0aGlzLnNpZ25lcnNCeVB1YmxpY0tleS5zZXQoa2V5UGFpci5wdWJsaWNLZXksIHNpZ25lcik7XG4gICAgfVxuICAgIHJlbW92ZUtleVBhaXIoaWQpIHtcbiAgICAgICAgY29uc3Qgc2lnbmVyID0gdGhpcy5zaWduZXJzLmdldChpZCk7XG4gICAgICAgIGlmIChzaWduZXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zaWduZXJzLmRlbGV0ZShpZCk7XG4gICAgICAgICAgICB0aGlzLnNpZ25lcnNCeVB1YmxpY0tleS5kZWxldGUoc2lnbmVyLnB1YmxpY0tleSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogR2VuZXJhdGUgYW5kIGFkZCBhIG5ldyBrZXlcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIGtleUlkIG9mIHRoZSBuZXcgc2lnbmVyXG4gICAgICovXG4gICAgYXN5bmMgd2l0aE5ld0tleShmLCBvcHRpb25zID0ge30pIHtcbiAgICAgICAgY29uc3QgbmV3S2V5ID0gU2ltcGxlS2V5c3RvcmUuZ2VuZXJhdGVLZXlQYWlyKCk7XG4gICAgICAgIGNvbnN0IGtleUlkID0gb3B0aW9ucy5rZXlJZCAhPSBudWxsID8gb3B0aW9ucy5rZXlJZCA6IG5ld0tleS5wdWJsaWNLZXk7XG4gICAgICAgIGNvbnN0IGtlZXBPbkVycm9yID0gb3B0aW9ucy5rZWVwT25FcnJvciB8fCBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGRLZXlQYWlyKGtleUlkLCBuZXdLZXkpO1xuICAgICAgICByZXR1cm4gZihrZXlJZClcbiAgICAgICAgICAgIC50aGVuKHJldGFpbiA9PiB7XG4gICAgICAgICAgICBpZiAocmV0YWluID09PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVtb3ZlS2V5UGFpcihrZXlJZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4ga2V5SWQ7XG4gICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgIGlmICgha2VlcE9uRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlbW92ZUtleVBhaXIoa2V5SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhyb3cgZTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGFzeW5jIGdldFNpZ25lcihpZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zaWduZXJzLmdldChpZCkgfHwgdGhpcy5zaWduZXJzQnlQdWJsaWNLZXkuZ2V0KGlkKTtcbiAgICB9XG59XG5leHBvcnRzLlNpbXBsZUtleXN0b3JlID0gU2ltcGxlS2V5c3RvcmU7XG5jbGFzcyBTaW1wbGVTaWduZXIge1xuICAgIGNvbnN0cnVjdG9yKGtleVBhaXIpIHtcbiAgICAgICAgdGhpcy5rZXlQYWlyID0ga2V5UGFpcjtcbiAgICAgICAgdGhpcy5wdWJsaWNLZXkgPSB0aGlzLmtleVBhaXIucHVibGljS2V5O1xuICAgIH1cbiAgICBhc3luYyBzaWduKHJhd0RhdGEpIHtcbiAgICAgICAgcmV0dXJuIG5la290b24uZWQyNTUxOV9zaWduKHRoaXMua2V5UGFpci5zZWNyZXRLZXksIHJhd0RhdGEpO1xuICAgIH1cbn1cbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/keystore.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/client/utils.js":
/*!******************************************************************!*\
  !*** ./node_modules/everscale-standalone-client/client/utils.js ***!
  \******************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.getUniqueId = exports.convertVersionToInt32 = exports.SafeEventEmitter = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"./node_modules/events/events.js\");\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    }\n    catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(() => {\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for (let i = 0; i < n; i += 1) {\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events_1.EventEmitter {\n    emit(type, ...args) {\n        let doError = type === 'error';\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        }\n        else if (!doError) {\n            return false;\n        }\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                ;\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                throw er;\n            }\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : ''}`);\n            err.context = er;\n            throw err;\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === 'function') {\n            safeApply(handler, this, args);\n        }\n        else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for (let i = 0; i < len; i += 1) {\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nexports.SafeEventEmitter = SafeEventEmitter;\n/**\n * @category Utils\n */\nconst convertVersionToInt32 = (version) => {\n    const parts = version.split('.');\n    if (parts.length !== 3) {\n        throw new Error('Received invalid version string');\n    }\n    parts.forEach((part) => {\n        if (~~part > 999) {\n            throw new Error(`Version string invalid, ${part} is too large`);\n        }\n    });\n    let multiplier = 1000000;\n    let numericVersion = 0;\n    for (let i = 0; i < 3; i++) {\n        numericVersion += ~~parts[i] * multiplier;\n        multiplier /= 1000;\n    }\n    return numericVersion;\n};\nexports.convertVersionToInt32 = convertVersionToInt32;\nconst MAX = 4294967295;\nlet idCounter = Math.floor(Math.random() * MAX);\nfunction getUniqueId() {\n    idCounter = (idCounter + 1) % MAX;\n    return idCounter;\n}\nexports.getUniqueId = getUniqueId;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLXN0YW5kYWxvbmUtY2xpZW50L2NsaWVudC91dGlscy5qcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2hleC1iYXR0bGUtZ2FtZS8uL25vZGVfbW9kdWxlcy9ldmVyc2NhbGUtc3RhbmRhbG9uZS1jbGllbnQvY2xpZW50L3V0aWxzLmpzP2VmMmIiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLmdldFVuaXF1ZUlkID0gZXhwb3J0cy5jb252ZXJ0VmVyc2lvblRvSW50MzIgPSBleHBvcnRzLlNhZmVFdmVudEVtaXR0ZXIgPSB2b2lkIDA7XG5jb25zdCBldmVudHNfMSA9IHJlcXVpcmUoXCJldmVudHNcIik7XG5mdW5jdGlvbiBzYWZlQXBwbHkoaGFuZGxlciwgY29udGV4dCwgYXJncykge1xuICAgIHRyeSB7XG4gICAgICAgIFJlZmxlY3QuYXBwbHkoaGFuZGxlciwgY29udGV4dCwgYXJncyk7XG4gICAgfVxuICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgLy8gVGhyb3cgZXJyb3IgYWZ0ZXIgdGltZW91dCBzbyBhcyBub3QgdG8gaW50ZXJydXB0IHRoZSBzdGFja1xuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIpIHtcbiAgICBjb25zdCBuID0gYXJyLmxlbmd0aDtcbiAgICBjb25zdCBjb3B5ID0gbmV3IEFycmF5KG4pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSArPSAxKSB7XG4gICAgICAgIGNvcHlbaV0gPSBhcnJbaV07XG4gICAgfVxuICAgIHJldHVybiBjb3B5O1xufVxuY2xhc3MgU2FmZUV2ZW50RW1pdHRlciBleHRlbmRzIGV2ZW50c18xLkV2ZW50RW1pdHRlciB7XG4gICAgZW1pdCh0eXBlLCAuLi5hcmdzKSB7XG4gICAgICAgIGxldCBkb0Vycm9yID0gdHlwZSA9PT0gJ2Vycm9yJztcbiAgICAgICAgY29uc3QgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgICBpZiAoZXZlbnRzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGRvRXJyb3IgPSBkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PT0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKCFkb0Vycm9yKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRvRXJyb3IpIHtcbiAgICAgICAgICAgIGxldCBlcjtcbiAgICAgICAgICAgIGlmIChhcmdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICA7XG4gICAgICAgICAgICAgICAgW2VyXSA9IGFyZ3M7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXIgaW5zdGFuY2VvZiBFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IGVyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3QgZXJyID0gbmV3IEVycm9yKGBVbmhhbmRsZWQgZXJyb3IuJHtlciA/IGAgKCR7ZXIubWVzc2FnZX0pYCA6ICcnfWApO1xuICAgICAgICAgICAgZXJyLmNvbnRleHQgPSBlcjtcbiAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBoYW5kbGVyID0gZXZlbnRzW3R5cGVdO1xuICAgICAgICBpZiAoaGFuZGxlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBzYWZlQXBwbHkoaGFuZGxlciwgdGhpcywgYXJncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlcik7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSArPSAxKSB7XG4gICAgICAgICAgICAgICAgc2FmZUFwcGx5KGxpc3RlbmVyc1tpXSwgdGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxufVxuZXhwb3J0cy5TYWZlRXZlbnRFbWl0dGVyID0gU2FmZUV2ZW50RW1pdHRlcjtcbi8qKlxuICogQGNhdGVnb3J5IFV0aWxzXG4gKi9cbmNvbnN0IGNvbnZlcnRWZXJzaW9uVG9JbnQzMiA9ICh2ZXJzaW9uKSA9PiB7XG4gICAgY29uc3QgcGFydHMgPSB2ZXJzaW9uLnNwbGl0KCcuJyk7XG4gICAgaWYgKHBhcnRzLmxlbmd0aCAhPT0gMykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JlY2VpdmVkIGludmFsaWQgdmVyc2lvbiBzdHJpbmcnKTtcbiAgICB9XG4gICAgcGFydHMuZm9yRWFjaCgocGFydCkgPT4ge1xuICAgICAgICBpZiAofn5wYXJ0ID4gOTk5KSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFZlcnNpb24gc3RyaW5nIGludmFsaWQsICR7cGFydH0gaXMgdG9vIGxhcmdlYCk7XG4gICAgICAgIH1cbiAgICB9KTtcbiAgICBsZXQgbXVsdGlwbGllciA9IDEwMDAwMDA7XG4gICAgbGV0IG51bWVyaWNWZXJzaW9uID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IDM7IGkrKykge1xuICAgICAgICBudW1lcmljVmVyc2lvbiArPSB+fnBhcnRzW2ldICogbXVsdGlwbGllcjtcbiAgICAgICAgbXVsdGlwbGllciAvPSAxMDAwO1xuICAgIH1cbiAgICByZXR1cm4gbnVtZXJpY1ZlcnNpb247XG59O1xuZXhwb3J0cy5jb252ZXJ0VmVyc2lvblRvSW50MzIgPSBjb252ZXJ0VmVyc2lvblRvSW50MzI7XG5jb25zdCBNQVggPSA0Mjk0OTY3Mjk1O1xubGV0IGlkQ291bnRlciA9IE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIE1BWCk7XG5mdW5jdGlvbiBnZXRVbmlxdWVJZCgpIHtcbiAgICBpZENvdW50ZXIgPSAoaWRDb3VudGVyICsgMSkgJSBNQVg7XG4gICAgcmV0dXJuIGlkQ291bnRlcjtcbn1cbmV4cG9ydHMuZ2V0VW5pcXVlSWQgPSBnZXRVbmlxdWVJZDtcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/client/utils.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/core.js":
/*!**********************************************************!*\
  !*** ./node_modules/everscale-standalone-client/core.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports) => {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst core = {\n    ensureNekotonLoaded: undefined,\n    nekoton: undefined,\n    fetch: undefined,\n    fetchAgent: () => undefined,\n    debugLog: undefined,\n};\nexports.default = core;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLXN0YW5kYWxvbmUtY2xpZW50L2NvcmUuanMuanMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9oZXgtYmF0dGxlLWdhbWUvLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLXN0YW5kYWxvbmUtY2xpZW50L2NvcmUuanM/Yzk4NCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmNvbnN0IGNvcmUgPSB7XG4gICAgZW5zdXJlTmVrb3RvbkxvYWRlZDogdW5kZWZpbmVkLFxuICAgIG5la290b246IHVuZGVmaW5lZCxcbiAgICBmZXRjaDogdW5kZWZpbmVkLFxuICAgIGZldGNoQWdlbnQ6ICgpID0+IHVuZGVmaW5lZCxcbiAgICBkZWJ1Z0xvZzogdW5kZWZpbmVkLFxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNvcmU7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/core.js\n");

/***/ }),

/***/ "./node_modules/everscale-standalone-client/index.js":
/*!***********************************************************!*\
  !*** ./node_modules/everscale-standalone-client/index.js ***!
  \***********************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

"use strict";
eval("\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst nekoton_wasm_1 = __importStar(__webpack_require__(/*! nekoton-wasm */ \"./node_modules/nekoton-wasm/nekoton_wasm.js\")), nt = nekoton_wasm_1;\nconst core_1 = __importDefault(__webpack_require__(/*! ./core */ \"./node_modules/everscale-standalone-client/core.js\"));\nlet clientInitializationStarted = false;\nlet notifyClientInitialized;\nconst initializationPromise = new Promise((resolve, reject) => {\n    notifyClientInitialized = { resolve, reject };\n});\ncore_1.default.ensureNekotonLoaded = (initInput) => {\n    if (!clientInitializationStarted) {\n        clientInitializationStarted = true;\n        (0, nekoton_wasm_1.default)(initInput).then(notifyClientInitialized.resolve).catch(notifyClientInitialized.reject);\n    }\n    return initializationPromise;\n};\ncore_1.default.nekoton = nt;\ncore_1.default.fetch = fetch;\ncore_1.default.debugLog = console.debug;\n__exportStar(__webpack_require__(/*! ./client */ \"./node_modules/everscale-standalone-client/client/index.js\"), exports);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvZXZlcnNjYWxlLXN0YW5kYWxvbmUtY2xpZW50L2luZGV4LmpzLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vaGV4LWJhdHRsZS1nYW1lLy4vbm9kZV9tb2R1bGVzL2V2ZXJzY2FsZS1zdGFuZGFsb25lLWNsaWVudC9pbmRleC5qcz8wZTcwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xudmFyIF9fY3JlYXRlQmluZGluZyA9ICh0aGlzICYmIHRoaXMuX19jcmVhdGVCaW5kaW5nKSB8fCAoT2JqZWN0LmNyZWF0ZSA/IChmdW5jdGlvbihvLCBtLCBrLCBrMikge1xuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XG4gICAgdmFyIGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG0sIGspO1xuICAgIGlmICghZGVzYyB8fCAoXCJnZXRcIiBpbiBkZXNjID8gIW0uX19lc01vZHVsZSA6IGRlc2Mud3JpdGFibGUgfHwgZGVzYy5jb25maWd1cmFibGUpKSB7XG4gICAgICBkZXNjID0geyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uKCkgeyByZXR1cm4gbVtrXTsgfSB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIGRlc2MpO1xufSkgOiAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xuICAgIG9bazJdID0gbVtrXTtcbn0pKTtcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSAodGhpcyAmJiB0aGlzLl9fc2V0TW9kdWxlRGVmYXVsdCkgfHwgKE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgdikge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcbn0pIDogZnVuY3Rpb24obywgdikge1xuICAgIG9bXCJkZWZhdWx0XCJdID0gdjtcbn0pO1xudmFyIF9faW1wb3J0U3RhciA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnRTdGFyKSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgaWYgKG1vZCAhPSBudWxsKSBmb3IgKHZhciBrIGluIG1vZCkgaWYgKGsgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSBfX2NyZWF0ZUJpbmRpbmcocmVzdWx0LCBtb2QsIGspO1xuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG52YXIgX19leHBvcnRTdGFyID0gKHRoaXMgJiYgdGhpcy5fX2V4cG9ydFN0YXIpIHx8IGZ1bmN0aW9uKG0sIGV4cG9ydHMpIHtcbiAgICBmb3IgKHZhciBwIGluIG0pIGlmIChwICE9PSBcImRlZmF1bHRcIiAmJiAhT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGV4cG9ydHMsIHApKSBfX2NyZWF0ZUJpbmRpbmcoZXhwb3J0cywgbSwgcCk7XG59O1xudmFyIF9faW1wb3J0RGVmYXVsdCA9ICh0aGlzICYmIHRoaXMuX19pbXBvcnREZWZhdWx0KSB8fCBmdW5jdGlvbiAobW9kKSB7XG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBcImRlZmF1bHRcIjogbW9kIH07XG59O1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuY29uc3QgbmVrb3Rvbl93YXNtXzEgPSBfX2ltcG9ydFN0YXIocmVxdWlyZShcIm5la290b24td2FzbVwiKSksIG50ID0gbmVrb3Rvbl93YXNtXzE7XG5jb25zdCBjb3JlXzEgPSBfX2ltcG9ydERlZmF1bHQocmVxdWlyZShcIi4vY29yZVwiKSk7XG5sZXQgY2xpZW50SW5pdGlhbGl6YXRpb25TdGFydGVkID0gZmFsc2U7XG5sZXQgbm90aWZ5Q2xpZW50SW5pdGlhbGl6ZWQ7XG5jb25zdCBpbml0aWFsaXphdGlvblByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgbm90aWZ5Q2xpZW50SW5pdGlhbGl6ZWQgPSB7IHJlc29sdmUsIHJlamVjdCB9O1xufSk7XG5jb3JlXzEuZGVmYXVsdC5lbnN1cmVOZWtvdG9uTG9hZGVkID0gKGluaXRJbnB1dCkgPT4ge1xuICAgIGlmICghY2xpZW50SW5pdGlhbGl6YXRpb25TdGFydGVkKSB7XG4gICAgICAgIGNsaWVudEluaXRpYWxpemF0aW9uU3RhcnRlZCA9IHRydWU7XG4gICAgICAgICgwLCBuZWtvdG9uX3dhc21fMS5kZWZhdWx0KShpbml0SW5wdXQpLnRoZW4obm90aWZ5Q2xpZW50SW5pdGlhbGl6ZWQucmVzb2x2ZSkuY2F0Y2gobm90aWZ5Q2xpZW50SW5pdGlhbGl6ZWQucmVqZWN0KTtcbiAgICB9XG4gICAgcmV0dXJuIGluaXRpYWxpemF0aW9uUHJvbWlzZTtcbn07XG5jb3JlXzEuZGVmYXVsdC5uZWtvdG9uID0gbnQ7XG5jb3JlXzEuZGVmYXVsdC5mZXRjaCA9IGZldGNoO1xuY29yZV8xLmRlZmF1bHQuZGVidWdMb2cgPSBjb25zb2xlLmRlYnVnO1xuX19leHBvcnRTdGFyKHJlcXVpcmUoXCIuL2NsaWVudFwiKSwgZXhwb3J0cyk7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/everscale-standalone-client/index.js\n");

/***/ }),

/***/ "./node_modules/fast-safe-stringify/index.js":
/*!***************************************************!*\
  !*** ./node_modules/fast-safe-stringify/index.js ***!
  \***************************************************/
/***/ ((module) => {

eval("module.exports = stringify\nstringify.default = stringify\nstringify.stable = deterministicStringify\nstringify.stableStringify = deterministicStringify\n\nvar LIMIT_REPLACE_NODE = '[...]'\nvar CIRCULAR_REPLACE_NODE = '[Circular]'\n\nvar arr = []\nvar replacerStack = []\n\nfunction defaultOptions () {\n  return {\n    depthLimit: Number.MAX_SAFE_INTEGER,\n    edgesLimit: Number.MAX_SAFE_INTEGER\n  }\n}\n\n// Regular stringify\nfunction stringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  decirc(obj, '', 0, [], undefined, 0, options)\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(obj, replacer, spacer)\n    } else {\n      res = JSON.stringify(obj, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction setReplace (replace, val, k, parent) {\n  var propertyDescriptor = Object.getOwnPropertyDescriptor(parent, k)\n  if (propertyDescriptor.get !== undefined) {\n    if (propertyDescriptor.configurable) {\n      Object.defineProperty(parent, k, { value: replace })\n      arr.push([parent, k, val, propertyDescriptor])\n    } else {\n      replacerStack.push([val, k, replace])\n    }\n  } else {\n    parent[k] = replace\n    arr.push([parent, k, val])\n  }\n}\n\nfunction decirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        decirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      var keys = Object.keys(val)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        decirc(val[key], key, i, stack, val, depth, options)\n      }\n    }\n    stack.pop()\n  }\n}\n\n// Stable-stringify\nfunction compareFunction (a, b) {\n  if (a < b) {\n    return -1\n  }\n  if (a > b) {\n    return 1\n  }\n  return 0\n}\n\nfunction deterministicStringify (obj, replacer, spacer, options) {\n  if (typeof options === 'undefined') {\n    options = defaultOptions()\n  }\n\n  var tmp = deterministicDecirc(obj, '', 0, [], undefined, 0, options) || obj\n  var res\n  try {\n    if (replacerStack.length === 0) {\n      res = JSON.stringify(tmp, replacer, spacer)\n    } else {\n      res = JSON.stringify(tmp, replaceGetterValues(replacer), spacer)\n    }\n  } catch (_) {\n    return JSON.stringify('[unable to serialize, circular reference is too complex to analyze]')\n  } finally {\n    // Ensure that we restore the object as it was.\n    while (arr.length !== 0) {\n      var part = arr.pop()\n      if (part.length === 4) {\n        Object.defineProperty(part[0], part[1], part[3])\n      } else {\n        part[0][part[1]] = part[2]\n      }\n    }\n  }\n  return res\n}\n\nfunction deterministicDecirc (val, k, edgeIndex, stack, parent, depth, options) {\n  depth += 1\n  var i\n  if (typeof val === 'object' && val !== null) {\n    for (i = 0; i < stack.length; i++) {\n      if (stack[i] === val) {\n        setReplace(CIRCULAR_REPLACE_NODE, val, k, parent)\n        return\n      }\n    }\n    try {\n      if (typeof val.toJSON === 'function') {\n        return\n      }\n    } catch (_) {\n      return\n    }\n\n    if (\n      typeof options.depthLimit !== 'undefined' &&\n      depth > options.depthLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    if (\n      typeof options.edgesLimit !== 'undefined' &&\n      edgeIndex + 1 > options.edgesLimit\n    ) {\n      setReplace(LIMIT_REPLACE_NODE, val, k, parent)\n      return\n    }\n\n    stack.push(val)\n    // Optimize for Arrays. Big arrays could kill the performance otherwise!\n    if (Array.isArray(val)) {\n      for (i = 0; i < val.length; i++) {\n        deterministicDecirc(val[i], i, i, stack, val, depth, options)\n      }\n    } else {\n      // Create a temporary object in the required way\n      var tmp = {}\n      var keys = Object.keys(val).sort(compareFunction)\n      for (i = 0; i < keys.length; i++) {\n        var key = keys[i]\n        deterministicDecirc(val[key], key, i, stack, val, depth, options)\n        tmp[key] = val[key]\n      }\n      if (typeof parent !== 'undefined') {\n        arr.push([parent, k, val])\n        parent[k] = tmp\n      } else {\n        return tmp\n      }\n    }\n    stack.pop()\n  }\n}\n\n// wraps replacer function to handle values we couldn't replace\n// and mark them as replaced value\nfunction replaceGetterValues (replacer) {\n  replacer =\n    typeof replacer !== 'undefined'\n      ? replacer\n      : function (k, v) {\n        return v\n      }\n  return function (key, val) {\n    if (replacerStack.length > 0) {\n      for (var i = 0; i < replacerStack.length; i++) {\n        var part = replacerStack[i]\n        if (part[1] === key && part[0] === val) {\n          val = part[2]\n          replacerStack.splice(i, 1)\n          break\n        }\n      }\n    }\n    return replacer.call(this, key, val)\n  }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/fast-safe-stringify/index.js\n");

/***/ }),

/***/ "./node_modules/honeycomb-grid/dist/honeycomb-grid.mjs":
/*!*************************************************************!*\
  !*** ./node_modules/honeycomb-grid/dist/honeycomb-grid.mjs ***!
  \*************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Direction\": () => (/* binding */ f),\n/* harmony export */   \"Grid\": () => (/* binding */ q),\n/* harmony export */   \"Hex\": () => (/* binding */ $),\n/* harmony export */   \"Orientation\": () => (/* binding */ g),\n/* harmony export */   \"Rotation\": () => (/* binding */ L),\n/* harmony export */   \"completeCube\": () => (/* binding */ p),\n/* harmony export */   \"concat\": () => (/* binding */ N),\n/* harmony export */   \"createHexDimensions\": () => (/* binding */ G),\n/* harmony export */   \"createHexOrigin\": () => (/* binding */ D),\n/* harmony export */   \"defaultHexSettings\": () => (/* binding */ T),\n/* harmony export */   \"defineHex\": () => (/* binding */ et),\n/* harmony export */   \"distance\": () => (/* binding */ R),\n/* harmony export */   \"equals\": () => (/* binding */ nt),\n/* harmony export */   \"fromCoordinates\": () => (/* binding */ Tt),\n/* harmony export */   \"hexToOffset\": () => (/* binding */ W),\n/* harmony export */   \"hexToPoint\": () => (/* binding */ J),\n/* harmony export */   \"isAxial\": () => (/* binding */ Ot),\n/* harmony export */   \"isOffset\": () => (/* binding */ S),\n/* harmony export */   \"isPoint\": () => (/* binding */ V),\n/* harmony export */   \"isTuple\": () => (/* binding */ H),\n/* harmony export */   \"line\": () => (/* binding */ v),\n/* harmony export */   \"move\": () => (/* binding */ wt),\n/* harmony export */   \"neighborOf\": () => (/* binding */ I),\n/* harmony export */   \"offsetFromZero\": () => (/* binding */ P),\n/* harmony export */   \"offsetToCube\": () => (/* binding */ j),\n/* harmony export */   \"offsetToCubeFlat\": () => (/* binding */ _),\n/* harmony export */   \"offsetToCubePointy\": () => (/* binding */ z),\n/* harmony export */   \"pointToCube\": () => (/* binding */ it),\n/* harmony export */   \"rectangle\": () => (/* binding */ St),\n/* harmony export */   \"repeat\": () => (/* binding */ pt),\n/* harmony export */   \"repeatWith\": () => (/* binding */ U),\n/* harmony export */   \"ring\": () => (/* binding */ yt),\n/* harmony export */   \"round\": () => (/* binding */ F),\n/* harmony export */   \"spiral\": () => (/* binding */ Ct),\n/* harmony export */   \"toCube\": () => (/* binding */ C),\n/* harmony export */   \"translate\": () => (/* binding */ ct),\n/* harmony export */   \"tupleToCube\": () => (/* binding */ E)\n/* harmony export */ });\nconst l = (r) => Number.isFinite(r) && !Number.isNaN(r), w = (r) => typeof r == \"object\" && r !== null, Ot = (r) => w(r) && l(r.q) && l(r.r), k = (r) => typeof r == \"function\", S = (r) => w(r) && l(r.col) && l(r.row), V = (r) => w(r) && l(r.x) && l(r.y), H = (r) => Array.isArray(r) && l(r[0]) && l(r[1]), P = (r, t) => t + r * (t & 1) >> 1;\nfunction Z(r, t) {\n  return (r % t + t) % t;\n}\nconst X = (r, t) => Z(r + t, 8), E = ([r, t, e = -r - t]) => ({ q: r, r: t, s: e });\nfunction p({ q: r, r: t, s: e }) {\n  const n = l(r), s = l(t), o = l(e);\n  if (n && s && o)\n    return { q: r, r: t, s: e };\n  if (n && s)\n    return { q: r, r: t, s: -r - t };\n  if (n && o)\n    return { q: r, r: -r - e, s: e };\n  if (s && o)\n    return { q: -t - e, r: t, s: e };\n  throw new TypeError(\n    `Can't determine three cube coordinates from less than two coordinates. Received: { q: ${r}, r: ${t}, s: ${e} }.`\n  );\n}\nvar g = /* @__PURE__ */ ((r) => (r.FLAT = \"FLAT\", r.POINTY = \"POINTY\", r))(g || {});\nfunction G(r, t) {\n  if (w(r) && r.xRadius > 0 && r.yRadius > 0)\n    return r;\n  if (w(r) && r.width > 0 && r.height > 0) {\n    const { width: e, height: n } = r;\n    return t === g.POINTY ? { xRadius: e / Math.sqrt(3), yRadius: n / 2 } : { xRadius: e / 2, yRadius: n / Math.sqrt(3) };\n  }\n  if (r > 0)\n    return { xRadius: r, yRadius: r };\n  throw new TypeError(\n    `Invalid dimensions: ${JSON.stringify(\n      r\n    )}. Dimensions must be expressed as an Ellipse ({ xRadius: number, yRadius: number }), a Rectangle ({ width: number, height: number }) or a number.`\n  );\n}\nfunction D(r, t) {\n  if (V(r))\n    return r;\n  if (!t)\n    throw new TypeError(\n      `Supply a bounding box ({ width: number, height: number }). Received: ${JSON.stringify(t)}`\n    );\n  if (r === \"topLeft\")\n    return { x: t.width * -0.5, y: t.height * -0.5 };\n  throw new TypeError(\n    `Invalid origin: ${JSON.stringify(\n      r\n    )}. Origin must be expressed as a Point ({ x: number, y: number }) or the string 'topLeft'.`\n  );\n}\nclass $ {\n  static get settings() {\n    const { dimensions: t, orientation: e, origin: n, offset: s } = this.prototype;\n    return { dimensions: t, orientation: e, origin: n, offset: s };\n  }\n  get center() {\n    const { width: t, height: e, x: n, y: s } = this;\n    return { x: t / 2 - n, y: e / 2 - s };\n  }\n  get col() {\n    return W(this).col;\n  }\n  get corners() {\n    const { orientation: t, width: e, height: n, x: s, y: o } = this;\n    return t === g.POINTY ? tt(e, n, s, o) : rt(e, n, s, o);\n  }\n  get dimensions() {\n    return T.dimensions;\n  }\n  get height() {\n    const {\n      orientation: t,\n      dimensions: { yRadius: e }\n    } = this;\n    return t === g.POINTY ? e * 2 : e * Math.sqrt(3);\n  }\n  get isFlat() {\n    return this.orientation === g.FLAT;\n  }\n  get isPointy() {\n    return this.orientation === g.POINTY;\n  }\n  get orientation() {\n    return T.orientation;\n  }\n  get origin() {\n    return T.origin;\n  }\n  get offset() {\n    return T.offset;\n  }\n  get row() {\n    return W(this).row;\n  }\n  get width() {\n    const {\n      orientation: t,\n      dimensions: { xRadius: e }\n    } = this;\n    return t === g.POINTY ? e * Math.sqrt(3) : e * 2;\n  }\n  get x() {\n    return J(this).x;\n  }\n  get y() {\n    return J(this).y;\n  }\n  get s() {\n    return -this.q - this.r;\n  }\n  q;\n  r;\n  constructor(t = [0, 0]) {\n    const { q: e, r: n } = C(this, t);\n    this.q = e, this.r = n;\n  }\n  clone(t = this) {\n    return new this.constructor(t);\n  }\n  equals(t) {\n    return nt(this, S(t) ? j(this, t) : t);\n  }\n  toString() {\n    return `${this.constructor.name}(${this.q},${this.r})`;\n  }\n  translate(t) {\n    return ct(this, t);\n  }\n}\nconst T = {\n  dimensions: { xRadius: 1, yRadius: 1 },\n  orientation: g.POINTY,\n  origin: { x: 0, y: 0 },\n  offset: -1\n}, tt = (r, t, e, n) => [\n  { x: e + r * 0.5, y: n - t * 0.25 },\n  { x: e + r * 0.5, y: n + t * 0.25 },\n  { x: e, y: n + t * 0.5 },\n  { x: e - r * 0.5, y: n + t * 0.25 },\n  { x: e - r * 0.5, y: n - t * 0.25 },\n  { x: e, y: n - t * 0.5 }\n], rt = (r, t, e, n) => [\n  { x: e + r * 0.25, y: n - t * 0.5 },\n  { x: e + r * 0.5, y: n },\n  { x: e + r * 0.25, y: n + t * 0.5 },\n  { x: e - r * 0.25, y: n + t * 0.5 },\n  { x: e - r * 0.5, y: n },\n  { x: e - r * 0.25, y: n - t * 0.5 }\n];\nfunction et(r) {\n  const { dimensions: t, orientation: e, origin: n, offset: s } = { ...T, ...r };\n  return class extends $ {\n    get dimensions() {\n      return G(t, e);\n    }\n    get orientation() {\n      return e;\n    }\n    get origin() {\n      return D(n, this);\n    }\n    get offset() {\n      return s;\n    }\n  };\n}\nfunction nt(r, t) {\n  if (S(r) && S(t))\n    return r.col === t.col && r.row === t.row;\n  if (Object.hasOwn(r, \"col\") || Object.hasOwn(t, \"col\"))\n    throw new Error(\n      `Can't compare coordinates where one are offset coordinates. Either pass two offset coordinates or two axial/cube coordinates. Received: ${JSON.stringify(\n        r\n      )} and ${JSON.stringify(t)}`\n    );\n  const e = H(r) ? E(r) : r, n = H(t) ? E(t) : t;\n  return e.q === n.q && e.r === n.r;\n}\nconst st = (r, t, e) => ({\n  col: r + P(e, t),\n  row: t\n}), ot = (r, t, e) => ({\n  col: r,\n  row: t + P(e, r)\n}), W = ({ q: r, r: t, offset: e, isPointy: n }) => n ? st(r, t, e) : ot(r, t, e), J = ({ orientation: r, dimensions: { xRadius: t, yRadius: e }, origin: { x: n, y: s }, q: o, r: i }) => r === g.POINTY ? {\n  x: t * Math.sqrt(3) * (o + i / 2) - n,\n  y: e * 3 / 2 * i - s\n} : {\n  x: t * 3 / 2 * o - n,\n  y: e * Math.sqrt(3) * (i + o / 2) - s\n}, z = (r, t, e) => {\n  const n = r - P(e, t), s = t, o = -n - s;\n  return { q: n, r: s, s: o };\n}, _ = (r, t, e) => {\n  const n = r, s = t - P(e, r), o = -n - s;\n  return { q: n, r: s, s: o };\n}, j = ({ offset: r, orientation: t }, { col: e, row: n }) => t === g.POINTY ? z(e, n, r) : _(e, n, r), F = (r) => {\n  const { q: t, r: e, s: n } = p(r);\n  let s = Math.round(t), o = Math.round(e), i = Math.round(n);\n  const c = Math.abs(t - s), u = Math.abs(e - o), h = Math.abs(n - i);\n  return c > u && c > h ? s = -o - i : u > h ? o = -s - i : i = -s - o, { q: s, r: o, s: i };\n}, it = ({ dimensions: { xRadius: r, yRadius: t }, origin: e, orientation: n }, { x: s, y: o }) => (s += e.x, o += e.y, n === g.POINTY ? F({ q: Math.sqrt(3) * s / (3 * r) - o / (3 * t), r: 2 / 3 * (o / t) }) : F({ q: 2 / 3 * (s / r), r: Math.sqrt(3) * o / (3 * t) - s / (3 * r) }));\nfunction C(r, t) {\n  return H(t) ? E(t) : S(t) ? j(r, t) : p(t);\n}\nfunction ct(r, t) {\n  const { q: e, r: n, s } = p(r), { q: o, r: i, s: c } = p(t), u = { q: e + o, r: n + i, s: s + c };\n  return r instanceof $ ? r.clone(u) : u;\n}\nfunction R(r, t, e) {\n  const { q: n, r: s, s: o } = C(r, t), { q: i, r: c, s: u } = C(r, e);\n  return Math.max(Math.abs(n - i), Math.abs(s - c), Math.abs(o - u));\n}\nvar L = /* @__PURE__ */ ((r) => (r.CLOCKWISE = \"CLOCKWISE\", r.COUNTERCLOCKWISE = \"COUNTERCLOCKWISE\", r))(L || {}), f = /* @__PURE__ */ ((r) => (r[r.N = 0] = \"N\", r[r.NE = 1] = \"NE\", r[r.E = 2] = \"E\", r[r.SE = 3] = \"SE\", r[r.S = 4] = \"S\", r[r.SW = 5] = \"SW\", r[r.W = 6] = \"W\", r[r.NW = 7] = \"NW\", r))(f || {});\nconst ut = [\n  null,\n  { q: 1, r: -1 },\n  { q: 1, r: 0 },\n  { q: 0, r: 1 },\n  null,\n  { q: -1, r: 1 },\n  { q: -1, r: 0 },\n  { q: 0, r: -1 }\n], ht = [\n  { q: 0, r: -1 },\n  { q: 1, r: -1 },\n  null,\n  { q: 1, r: 0 },\n  { q: 0, r: 1 },\n  { q: -1, r: 1 },\n  null,\n  { q: -1, r: 0 }\n], ft = ({ offset: r, q: t, r: e, col: n, row: s }, o) => {\n  if (o === f.S || o === f.N) {\n    const c = o === f.S ? s + 1 : s - 1;\n    return z(n, c, r);\n  }\n  const i = ut[o];\n  return { q: t + i.q, r: e + i.r };\n}, at = ({ offset: r, q: t, r: e, col: n, row: s }, o) => {\n  if (o === f.E || o === f.W) {\n    const c = o === f.E ? n + 1 : n - 1;\n    return _(c, s, r);\n  }\n  const i = ht[o];\n  return { q: t + i.q, r: e + i.r };\n}, I = (r, t) => r.clone(r.isPointy ? ft(r, t) : at(r, t));\nfunction N(r) {\n  return Array.isArray(r) ? function(e, n) {\n    const s = [];\n    let o = n;\n    for (const i of r)\n      for (const c of i(e, o))\n        s.push(o = c);\n    return s;\n  } : r;\n}\nconst Tt = (...r) => (t) => r.map(t);\nfunction v(r) {\n  return lt(r) ? gt(r) : xt(r);\n}\nfunction lt(r) {\n  return r.direction in f;\n}\nfunction gt({ start: r, direction: t, length: e }) {\n  return function(s, o) {\n    const i = [];\n    let u = s(r ?? o);\n    !r && o && (u = I(u, t));\n    for (let h = 0; h < e; h++)\n      i.push(u), u = I(u, t);\n    return i;\n  };\n}\nfunction xt({ start: r, stop: t }) {\n  return function(n, s) {\n    const o = [], i = n(r ?? s), c = B(i), u = B(C(i, t)), h = dt(c, u), x = R(i, i, t), y = 1 / Math.max(x, 1);\n    let m = !r && s ? 1 : 0;\n    for (m; m <= x; m++) {\n      const a = F(h(y * m));\n      o.push(n(a));\n    }\n    return o;\n  };\n}\nfunction B({ q: r, r: t, s: e }) {\n  return { q: r + 1e-6, r: t + 1e-6, s: e + -2e-6 };\n}\nfunction dt(r, t) {\n  return (e) => {\n    const n = r.q * (1 - e) + t.q * e, s = r.r * (1 - e) + t.r * e;\n    return { q: n, r: s };\n  };\n}\nconst wt = (r) => (t, e) => [I(t(e), r)];\nfunction U(r, t, { includeSource: e = !0 } = {}) {\n  return function(s, o) {\n    const i = [];\n    for (const c of N(r)(s, o)) {\n      e && i.push(c);\n      for (const u of N(t)(s, c))\n        i.push(u);\n    }\n    return i;\n  };\n}\nfunction St(r, t) {\n  return function(n, s) {\n    const {\n      width: o,\n      height: i,\n      start: c,\n      direction: u = f.E\n    } = t ? mt(r, t, n()) : r, h = c ?? s ?? [0, 0], x = U(\n      v({ start: h, direction: X(u, 2), length: i }),\n      v({ direction: u, length: o - 1 })\n    )(n, h);\n    return !c && s ? x.slice(1) : x;\n  };\n}\nfunction mt(r, t, { isPointy: e, offset: n }) {\n  const { col: s, row: o } = K(r, e, n), { col: i, row: c } = K(t, e, n), u = s < i ? \"A\" : \"B\", h = o < c ? \"A\" : \"B\", x = u + h, { swapWidthHeight: y, direction: m } = qt[x], a = Math.abs(s - i) + 1, b = Math.abs(o - c) + 1;\n  return {\n    width: y ? b : a,\n    height: y ? a : b,\n    start: r,\n    direction: m\n  };\n}\nfunction K(r, t, e) {\n  if (S(r))\n    return r;\n  const { q: n, r: s } = H(r) ? E(r) : p(r);\n  return W({ q: n, r: s, isPointy: t, offset: e });\n}\nconst qt = {\n  AA: {\n    swapWidthHeight: !1,\n    direction: f.E\n  },\n  AB: {\n    swapWidthHeight: !0,\n    direction: f.N\n  },\n  BA: {\n    swapWidthHeight: !0,\n    direction: f.S\n  },\n  BB: {\n    swapWidthHeight: !1,\n    direction: f.W\n  }\n};\nfunction pt(r, t) {\n  return N(Array.from({ length: r }, () => N(t)));\n}\nfunction yt(r) {\n  const { center: t, rotation: e = L.CLOCKWISE } = r;\n  return function(s, o) {\n    const i = e.toUpperCase(), c = [];\n    let { radius: u } = r, h;\n    l(u) ? h = s(t).translate({ q: u, s: -u }) : (h = s(r.start ?? o), u = R(h, t, h));\n    const { q: x, r: y, s: m } = C(h, t);\n    let a = s({ q: x, r: y - u, s: m + u });\n    if (i === L.CLOCKWISE)\n      for (let d = 0; d < 6; d++)\n        for (let O = 0; O < u; O++) {\n          const { q: A, r: M } = Q[d];\n          a = s({ q: a.q + A, r: a.r + M }), c.push(a);\n        }\n    else\n      for (let d = 5; d >= 0; d--)\n        for (let O = 0; O < u; O++) {\n          const { q: A, r: M } = Q[d];\n          a = s({ q: a.q - A, r: a.r - M }), c.push(a);\n        }\n    const b = !r.start && o, Y = c.findIndex((d) => d.equals(h));\n    return c.slice(Y + (b ? 1 : 0)).concat(c.slice(0, Y));\n  };\n}\nconst Q = [\n  { q: 1, r: 0 },\n  { q: 0, r: 1 },\n  { q: -1, r: 1 },\n  { q: -1, r: 0 },\n  { q: 0, r: -1 },\n  { q: 1, r: -1 }\n];\nfunction Ct({ radius: r, start: t, rotation: e }) {\n  return function(s, o) {\n    const i = t ?? o ?? [0, 0], c = !t && o ? r : r + 1;\n    return U(v({ start: t, direction: f.N, length: c }), yt({ center: i, rotation: e }))(s, o);\n  };\n}\nclass q {\n  static fromIterable(t) {\n    const e = t[Symbol.iterator]().next().value;\n    if (!e)\n      throw new TypeError(`Can't create grid from empty iterable: ${JSON.stringify(t)}`);\n    return new q(e.constructor, t);\n  }\n  static fromJSON({ hexSettings: t, coordinates: e }) {\n    const n = et(t);\n    return new q(\n      n,\n      e.map((s) => new n(s))\n    );\n  }\n  get size() {\n    return this.#r.size;\n  }\n  get pixelWidth() {\n    if (this.size === 0)\n      return 0;\n    const { isPointy: t, width: e } = this.hexPrototype, n = this.toArray(), {\n      0: s,\n      length: o,\n      [o - 1]: i\n    } = t ? n.sort((c, u) => u.s - c.s || c.q - u.q) : n.sort((c, u) => c.q - u.q);\n    return i.x - s.x + e;\n  }\n  get pixelHeight() {\n    if (this.size === 0)\n      return 0;\n    const { isPointy: t, height: e } = this.hexPrototype, n = this.toArray(), {\n      0: s,\n      length: o,\n      [o - 1]: i\n    } = t ? n.sort((c, u) => c.r - u.r) : n.sort((c, u) => u.s - c.s || c.r - u.r);\n    return i.y - s.y + e;\n  }\n  [Symbol.iterator]() {\n    return this.#r.values();\n  }\n  get hexPrototype() {\n    return this.#t.prototype;\n  }\n  #t;\n  #r = /* @__PURE__ */ new Map();\n  constructor(t, e = []) {\n    if (t instanceof q) {\n      this.#t = t.#t, this.setHexes(t);\n      return;\n    }\n    this.#t = t, this.setHexes(this.#n(e));\n  }\n  createHex(t) {\n    return new this.#t(t);\n  }\n  getHex(t) {\n    const e = this.createHex(t);\n    return this.#r.get(e.toString());\n  }\n  hasHex(t) {\n    return this.#r.has(t.toString());\n  }\n  setHexes(t) {\n    for (const e of t) {\n      const n = e instanceof $ ? e : new this.#t(e);\n      this.#e(n);\n    }\n    return this;\n  }\n  filter(t) {\n    const e = new q(this.#t);\n    for (const n of this)\n      t(n) && e.#e(n);\n    return e;\n  }\n  map(t) {\n    const e = new q(this.#t);\n    for (const n of this)\n      e.#e(t(n));\n    return e;\n  }\n  traverse(t, { bail: e = !1 } = {}) {\n    const n = new q(this.#t);\n    for (const s of this.#n(t)) {\n      const o = this.getHex(s);\n      if (o)\n        n.#e(o);\n      else if (e)\n        return n;\n    }\n    return n;\n  }\n  forEach(t) {\n    for (const e of this)\n      t(e);\n    return this;\n  }\n  reduce(t, e) {\n    if (e === void 0) {\n      let s, o, i;\n      for (const c of this)\n        o = i, i = c, o && (s = t(o, i));\n      return s;\n    }\n    let n = e;\n    for (const s of this)\n      n = t(n, s);\n    return n;\n  }\n  toArray() {\n    return Array.from(this);\n  }\n  toJSON() {\n    const { dimensions: t, orientation: e, origin: n, offset: s } = this.hexPrototype;\n    return { hexSettings: { dimensions: t, orientation: e, origin: n, offset: s }, coordinates: this.toArray() };\n  }\n  toString() {\n    return `${this.constructor.name}(${this.size})`;\n  }\n  pointToHex(t, { allowOutside: e = !0 } = {}) {\n    const n = it(this.hexPrototype, t), s = this.getHex(n);\n    return e ? s ?? this.createHex(n) : s;\n  }\n  distance(t, e, { allowOutside: n = !0 } = {}) {\n    if (n)\n      return R(this.hexPrototype, t, e);\n    const s = this.getHex(t), o = this.getHex(e);\n    if (!(!s || !o))\n      return R(this.hexPrototype, s, o);\n  }\n  neighborOf(t, e, { allowOutside: n = !0 } = {}) {\n    const s = I(this.createHex(t), e), o = this.getHex(s);\n    return n ? o ?? s : o;\n  }\n  #e(t) {\n    this.#r.set(t.toString(), t);\n  }\n  #n(t) {\n    return this.#s(t) ? this.#o(t) : Array.isArray(t) && this.#s(t[0]) ? this.#o(N(t)) : t;\n  }\n  #s(t) {\n    return k(t);\n  }\n  #o(t) {\n    return t(this.createHex.bind(this));\n  }\n}\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/honeycomb-grid/dist/honeycomb-grid.mjs\n");

/***/ }),

/***/ "./node_modules/nekoton-wasm/nekoton_wasm.js":
/*!***************************************************!*\
  !*** ./node_modules/nekoton-wasm/nekoton_wasm.js ***!
  \***************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"checkAddress\": () => (/* binding */ checkAddress),\n/* harmony export */   \"repackAddress\": () => (/* binding */ repackAddress),\n/* harmony export */   \"runLocal\": () => (/* binding */ runLocal),\n/* harmony export */   \"makeFullAccountBoc\": () => (/* binding */ makeFullAccountBoc),\n/* harmony export */   \"parseFullAccountBoc\": () => (/* binding */ parseFullAccountBoc),\n/* harmony export */   \"executeLocal\": () => (/* binding */ executeLocal),\n/* harmony export */   \"getExpectedAddress\": () => (/* binding */ getExpectedAddress),\n/* harmony export */   \"getBocHash\": () => (/* binding */ getBocHash),\n/* harmony export */   \"packIntoCell\": () => (/* binding */ packIntoCell),\n/* harmony export */   \"unpackFromCell\": () => (/* binding */ unpackFromCell),\n/* harmony export */   \"extractContractData\": () => (/* binding */ extractContractData),\n/* harmony export */   \"extractPublicKey\": () => (/* binding */ extractPublicKey),\n/* harmony export */   \"codeToTvc\": () => (/* binding */ codeToTvc),\n/* harmony export */   \"mergeTvc\": () => (/* binding */ mergeTvc),\n/* harmony export */   \"splitTvc\": () => (/* binding */ splitTvc),\n/* harmony export */   \"setCodeSalt\": () => (/* binding */ setCodeSalt),\n/* harmony export */   \"getCodeSalt\": () => (/* binding */ getCodeSalt),\n/* harmony export */   \"encodeInternalInput\": () => (/* binding */ encodeInternalInput),\n/* harmony export */   \"encodeInternalMessage\": () => (/* binding */ encodeInternalMessage),\n/* harmony export */   \"decodeInput\": () => (/* binding */ decodeInput),\n/* harmony export */   \"decodeEvent\": () => (/* binding */ decodeEvent),\n/* harmony export */   \"decodeOutput\": () => (/* binding */ decodeOutput),\n/* harmony export */   \"decodeTransaction\": () => (/* binding */ decodeTransaction),\n/* harmony export */   \"decodeTransactionEvents\": () => (/* binding */ decodeTransactionEvents),\n/* harmony export */   \"getDataHash\": () => (/* binding */ getDataHash),\n/* harmony export */   \"ed25519_generateKeyPair\": () => (/* binding */ ed25519_generateKeyPair),\n/* harmony export */   \"ed25519_sign\": () => (/* binding */ ed25519_sign),\n/* harmony export */   \"extendSignature\": () => (/* binding */ extendSignature),\n/* harmony export */   \"verifySignature\": () => (/* binding */ verifySignature),\n/* harmony export */   \"createRawExternalMessage\": () => (/* binding */ createRawExternalMessage),\n/* harmony export */   \"createExternalMessageWithoutSignature\": () => (/* binding */ createExternalMessageWithoutSignature),\n/* harmony export */   \"createExternalMessage\": () => (/* binding */ createExternalMessage),\n/* harmony export */   \"ClockWithOffset\": () => (/* binding */ ClockWithOffset),\n/* harmony export */   \"GenericContract\": () => (/* binding */ GenericContract),\n/* harmony export */   \"GqlConnection\": () => (/* binding */ GqlConnection),\n/* harmony export */   \"GqlQuery\": () => (/* binding */ GqlQuery),\n/* harmony export */   \"JrpcConnection\": () => (/* binding */ JrpcConnection),\n/* harmony export */   \"JrpcQuery\": () => (/* binding */ JrpcQuery),\n/* harmony export */   \"Transport\": () => (/* binding */ Transport),\n/* harmony export */   \"UnsignedMessage\": () => (/* binding */ UnsignedMessage),\n/* harmony export */   \"initSync\": () => (/* binding */ initSync),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* module decorator */ module = __webpack_require__.hmd(module);\n\nlet wasm;\n\nconst cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachedUint8Memory0 = new Uint8Array();\n\nfunction getUint8Memory0() {\n    if (cachedUint8Memory0.byteLength === 0) {\n        cachedUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachedUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nlet cachedFloat64Memory0 = new Float64Array();\n\nfunction getFloat64Memory0() {\n    if (cachedFloat64Memory0.byteLength === 0) {\n        cachedFloat64Memory0 = new Float64Array(wasm.memory.buffer);\n    }\n    return cachedFloat64Memory0;\n}\n\nlet cachedInt32Memory0 = new Int32Array();\n\nfunction getInt32Memory0() {\n    if (cachedInt32Memory0.byteLength === 0) {\n        cachedInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachedInt32Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nconst cachedTextEncoder = new TextEncoder('utf-8');\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n    return cachedTextEncoder.encodeInto(arg, view);\n}\n    : function (arg, view) {\n    const buf = cachedTextEncoder.encode(arg);\n    view.set(buf);\n    return {\n        read: arg.length,\n        written: buf.length\n    };\n});\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nfunction debugString(val) {\n    // primitive types\n    const type = typeof val;\n    if (type == 'number' || type == 'boolean' || val == null) {\n        return  `${val}`;\n    }\n    if (type == 'string') {\n        return `\"${val}\"`;\n    }\n    if (type == 'symbol') {\n        const description = val.description;\n        if (description == null) {\n            return 'Symbol';\n        } else {\n            return `Symbol(${description})`;\n        }\n    }\n    if (type == 'function') {\n        const name = val.name;\n        if (typeof name == 'string' && name.length > 0) {\n            return `Function(${name})`;\n        } else {\n            return 'Function';\n        }\n    }\n    // objects\n    if (Array.isArray(val)) {\n        const length = val.length;\n        let debug = '[';\n        if (length > 0) {\n            debug += debugString(val[0]);\n        }\n        for(let i = 1; i < length; i++) {\n            debug += ', ' + debugString(val[i]);\n        }\n        debug += ']';\n        return debug;\n    }\n    // Test for built-in\n    const builtInMatches = /\\[object ([^\\]]+)\\]/.exec(toString.call(val));\n    let className;\n    if (builtInMatches.length > 1) {\n        className = builtInMatches[1];\n    } else {\n        // Failed to match the standard '[object ClassName]'\n        return toString.call(val);\n    }\n    if (className == 'Object') {\n        // we're a user defined class or Object\n        // JSON.stringify avoids problems with cycles, and is generally much\n        // easier than looping through ownProperties of `val`.\n        try {\n            return 'Object(' + JSON.stringify(val) + ')';\n        } catch (_) {\n            return 'Object';\n        }\n    }\n    // errors\n    if (val instanceof Error) {\n        return `${val.name}: ${val.message}\\n${val.stack}`;\n    }\n    // TODO we could test for more things here, like `Set`s and `Map`s.\n    return className;\n}\n\nfunction makeMutClosure(arg0, arg1, dtor, f) {\n    const state = { a: arg0, b: arg1, cnt: 1, dtor };\n    const real = (...args) => {\n        // First up with a closure we increment the internal reference\n        // count. This ensures that the Rust closure environment won't\n        // be deallocated while we're invoking it.\n        state.cnt++;\n        const a = state.a;\n        state.a = 0;\n        try {\n            return f(a, state.b, ...args);\n        } finally {\n            if (--state.cnt === 0) {\n                wasm.__wbindgen_export_2.get(state.dtor)(a, state.b);\n\n            } else {\n                state.a = a;\n            }\n        }\n    };\n    real.original = state;\n\n    return real;\n}\nfunction __wbg_adapter_32(arg0, arg1, arg2) {\n    wasm._dyn_core__ops__function__FnMut__A____Output___R_as_wasm_bindgen__closure__WasmClosure___describe__invoke__hcb77729c6af9d376(arg0, arg1, addHeapObject(arg2));\n}\n\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(`expected instance of ${klass.name}`);\n    }\n    return instance.ptr;\n}\n/**\n* @param {string} address\n* @returns {boolean}\n*/\nfunction checkAddress(address) {\n    const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n    const len0 = WASM_VECTOR_LEN;\n    const ret = wasm.checkAddress(ptr0, len0);\n    return ret !== 0;\n}\n\n/**\n* @param {string} address\n* @returns {string}\n*/\nfunction repackAddress(address) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.repackAddress(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {ClockWithOffset} clock\n* @param {string} account_stuff_boc\n* @param {string} contract_abi\n* @param {string} method\n* @param {TokensObject} input\n* @param {boolean} responsible\n* @returns {ExecutionOutput}\n*/\nfunction runLocal(clock, account_stuff_boc, contract_abi, method, input, responsible) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(clock, ClockWithOffset);\n        const ptr0 = passStringToWasm0(account_stuff_boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(method, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.runLocal(retptr, clock.ptr, ptr0, len0, ptr1, len1, ptr2, len2, addHeapObject(input), responsible);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} account_stuff_boc\n* @returns {string}\n*/\nfunction makeFullAccountBoc(account_stuff_boc) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(account_stuff_boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.makeFullAccountBoc(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {string} account\n* @returns {FullContractState | undefined}\n*/\nfunction parseFullAccountBoc(account) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(account, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.parseFullAccountBoc(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} config\n* @param {string} account\n* @param {string} message\n* @param {number} utime\n* @param {boolean} disable_signature_check\n* @returns {TransactionExecutorOutput}\n*/\nfunction executeLocal(config, account, message, utime, disable_signature_check) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(config, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(account, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(message, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.executeLocal(retptr, ptr0, len0, ptr1, len1, ptr2, len2, utime, disable_signature_check);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} tvc\n* @param {string} contract_abi\n* @param {number} workchain_id\n* @param {string | undefined} public_key\n* @param {TokensObject} init_data\n* @returns {ExpectedAddress}\n*/\nfunction getExpectedAddress(tvc, contract_abi, workchain_id, public_key, init_data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(tvc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(public_key) ? 0 : passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        wasm.getExpectedAddress(retptr, ptr0, len0, ptr1, len1, workchain_id, ptr2, len2, addHeapObject(init_data));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} boc\n* @returns {string}\n*/\nfunction getBocHash(boc) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.getBocHash(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {Array<AbiParam>} params\n* @param {TokensObject} tokens\n* @param {string | undefined} abi_version\n* @returns {string}\n*/\nfunction packIntoCell(params, tokens, abi_version) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = isLikeNone(abi_version) ? 0 : passStringToWasm0(abi_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        wasm.packIntoCell(retptr, addHeapObject(params), addHeapObject(tokens), ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {Array<AbiParam>} params\n* @param {string} boc\n* @param {boolean} allow_partial\n* @param {string | undefined} abi_version\n* @returns {TokensObject}\n*/\nfunction unpackFromCell(params, boc, allow_partial, abi_version) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(abi_version) ? 0 : passStringToWasm0(abi_version, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        wasm.unpackFromCell(retptr, addHeapObject(params), ptr0, len0, allow_partial, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} boc\n* @returns {string | undefined}\n*/\nfunction extractContractData(boc) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.extractContractData(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        let v1;\n        if (r0 !== 0) {\n            v1 = getStringFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n        }\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} boc\n* @returns {string}\n*/\nfunction extractPublicKey(boc) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(boc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.extractPublicKey(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {string} code\n* @returns {string}\n*/\nfunction codeToTvc(code) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.codeToTvc(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @param {string} code\n* @param {string} data\n* @returns {string}\n*/\nfunction mergeTvc(code, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.mergeTvc(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr2, len2);\n    }\n}\n\n/**\n* @param {string} tvc\n* @returns {StateInit}\n*/\nfunction splitTvc(tvc) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(tvc, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.splitTvc(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} code\n* @param {string} salt\n* @returns {string}\n*/\nfunction setCodeSalt(code, salt) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(salt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.setCodeSalt(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr2, len2);\n    }\n}\n\n/**\n* @param {string} code\n* @returns {string | undefined}\n*/\nfunction getCodeSalt(code) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(code, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.getCodeSalt(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        if (r3) {\n            throw takeObject(r2);\n        }\n        let v1;\n        if (r0 !== 0) {\n            v1 = getStringFromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n        }\n        return v1;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} contract_abi\n* @param {string} method\n* @param {TokensObject} input\n* @returns {string}\n*/\nfunction encodeInternalInput(contract_abi, method, input) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(method, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.encodeInternalInput(retptr, ptr0, len0, ptr1, len1, addHeapObject(input));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr2, len2);\n    }\n}\n\n/**\n* @param {string | undefined} src\n* @param {string} dst\n* @param {boolean} bounce\n* @param {string | undefined} state_init\n* @param {string | undefined} body\n* @param {string} amount\n* @returns {string}\n*/\nfunction encodeInternalMessage(src, dst, bounce, state_init, body, amount) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        var ptr0 = isLikeNone(src) ? 0 : passStringToWasm0(src, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(dst, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(state_init) ? 0 : passStringToWasm0(state_init, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(body) ? 0 : passStringToWasm0(body, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ptr4 = passStringToWasm0(amount, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        wasm.encodeInternalMessage(retptr, ptr0, len0, ptr1, len1, bounce, ptr2, len2, ptr3, len3, ptr4, len4);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr5 = r0;\n        var len5 = r1;\n        if (r3) {\n            ptr5 = 0; len5 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr5, len5);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr5, len5);\n    }\n}\n\n/**\n* @param {string} message_body\n* @param {string} contract_abi\n* @param {MethodName} method\n* @param {boolean} internal\n* @returns {DecodedInput | undefined}\n*/\nfunction decodeInput(message_body, contract_abi, method, internal) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(message_body, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.decodeInput(retptr, ptr0, len0, ptr1, len1, addHeapObject(method), internal);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} message_body\n* @param {string} contract_abi\n* @param {MethodName} event\n* @returns {DecodedEvent | undefined}\n*/\nfunction decodeEvent(message_body, contract_abi, event) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(message_body, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.decodeEvent(retptr, ptr0, len0, ptr1, len1, addHeapObject(event));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} message_body\n* @param {string} contract_abi\n* @param {MethodName} method\n* @returns {DecodedOutput | undefined}\n*/\nfunction decodeOutput(message_body, contract_abi, method) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(message_body, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.decodeOutput(retptr, ptr0, len0, ptr1, len1, addHeapObject(method));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {Transaction} transaction\n* @param {string} contract_abi\n* @param {MethodName} method\n* @returns {DecodedTransaction | undefined}\n*/\nfunction decodeTransaction(transaction, contract_abi, method) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.decodeTransaction(retptr, addHeapObject(transaction), ptr0, len0, addHeapObject(method));\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {Transaction} transaction\n* @param {string} contract_abi\n* @returns {DecodedTransactionEvents}\n*/\nfunction decodeTransactionEvents(transaction, contract_abi) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.decodeTransactionEvents(retptr, addHeapObject(transaction), ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} data\n* @returns {string}\n*/\nfunction getDataHash(data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.getDataHash(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr1 = r0;\n        var len1 = r1;\n        if (r3) {\n            ptr1 = 0; len1 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr1, len1);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr1, len1);\n    }\n}\n\n/**\n* @returns {Ed25519KeyPair}\n*/\nfunction ed25519_generateKeyPair() {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        wasm.ed25519_generateKeyPair(retptr);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} secret_key\n* @param {string} data\n* @returns {string}\n*/\nfunction ed25519_sign(secret_key, data) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(secret_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        wasm.ed25519_sign(retptr, ptr0, len0, ptr1, len1);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        var r3 = getInt32Memory0()[retptr / 4 + 3];\n        var ptr2 = r0;\n        var len2 = r1;\n        if (r3) {\n            ptr2 = 0; len2 = 0;\n            throw takeObject(r2);\n        }\n        return getStringFromWasm0(ptr2, len2);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n        wasm.__wbindgen_free(ptr2, len2);\n    }\n}\n\n/**\n* @param {string} signature\n* @returns {ExtendedSignature}\n*/\nfunction extendSignature(signature) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.extendSignature(retptr, ptr0, len0);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} public_key\n* @param {string} data\n* @param {string} signature\n* @returns {boolean}\n*/\nfunction verifySignature(public_key, data, signature) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        wasm.verifySignature(retptr, ptr0, len0, ptr1, len1, ptr2, len2);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return r0 !== 0;\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {string} dst\n* @param {string | undefined} state_init\n* @param {string | undefined} body\n* @param {number} expire_at\n* @returns {SignedMessage}\n*/\nfunction createRawExternalMessage(dst, state_init, body, expire_at) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        const ptr0 = passStringToWasm0(dst, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        var ptr1 = isLikeNone(state_init) ? 0 : passStringToWasm0(state_init, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len1 = WASM_VECTOR_LEN;\n        var ptr2 = isLikeNone(body) ? 0 : passStringToWasm0(body, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len2 = WASM_VECTOR_LEN;\n        wasm.createRawExternalMessage(retptr, ptr0, len0, ptr1, len1, ptr2, len2, expire_at);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {ClockWithOffset} clock\n* @param {string} dst\n* @param {string} contract_abi\n* @param {string} method\n* @param {string | undefined} state_init\n* @param {TokensObject} input\n* @param {number} timeout\n* @returns {SignedMessage}\n*/\nfunction createExternalMessageWithoutSignature(clock, dst, contract_abi, method, state_init, input, timeout) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(clock, ClockWithOffset);\n        const ptr0 = passStringToWasm0(dst, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(method, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(state_init) ? 0 : passStringToWasm0(state_init, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        wasm.createExternalMessageWithoutSignature(retptr, clock.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, addHeapObject(input), timeout);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return takeObject(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\n/**\n* @param {ClockWithOffset} clock\n* @param {string} dst\n* @param {string} contract_abi\n* @param {string} method\n* @param {string | undefined} state_init\n* @param {TokensObject} input\n* @param {string} public_key\n* @param {number} timeout\n* @returns {UnsignedMessage}\n*/\nfunction createExternalMessage(clock, dst, contract_abi, method, state_init, input, public_key, timeout) {\n    try {\n        const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n        _assertClass(clock, ClockWithOffset);\n        const ptr0 = passStringToWasm0(dst, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ptr1 = passStringToWasm0(contract_abi, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len1 = WASM_VECTOR_LEN;\n        const ptr2 = passStringToWasm0(method, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len2 = WASM_VECTOR_LEN;\n        var ptr3 = isLikeNone(state_init) ? 0 : passStringToWasm0(state_init, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len3 = WASM_VECTOR_LEN;\n        const ptr4 = passStringToWasm0(public_key, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len4 = WASM_VECTOR_LEN;\n        wasm.createExternalMessage(retptr, clock.ptr, ptr0, len0, ptr1, len1, ptr2, len2, ptr3, len3, addHeapObject(input), ptr4, len4, timeout);\n        var r0 = getInt32Memory0()[retptr / 4 + 0];\n        var r1 = getInt32Memory0()[retptr / 4 + 1];\n        var r2 = getInt32Memory0()[retptr / 4 + 2];\n        if (r2) {\n            throw takeObject(r1);\n        }\n        return UnsignedMessage.__wrap(r0);\n    } finally {\n        wasm.__wbindgen_add_to_stack_pointer(16);\n    }\n}\n\nfunction handleError(f, args) {\n    try {\n        return f.apply(this, args);\n    } catch (e) {\n        wasm.__wbindgen_exn_store(addHeapObject(e));\n    }\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\nfunction __wbg_adapter_163(arg0, arg1, arg2, arg3) {\n    wasm.wasm_bindgen__convert__closures__invoke2_mut__hecba896d1563d223(arg0, arg1, addHeapObject(arg2), addHeapObject(arg3));\n}\n\n/**\n*/\nclass ClockWithOffset {\n\n    static __wrap(ptr) {\n        const obj = Object.create(ClockWithOffset.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_clockwithoffset_free(ptr);\n    }\n    /**\n    */\n    constructor() {\n        const ret = wasm.clockwithoffset_new();\n        return ClockWithOffset.__wrap(ret);\n    }\n    /**\n    * @returns {number}\n    */\n    get nowMs() {\n        const ret = wasm.clockwithoffset_nowMs(this.ptr);\n        return ret;\n    }\n    /**\n    * @param {number} offset_ms\n    */\n    updateOffset(offset_ms) {\n        wasm.clockwithoffset_updateOffset(this.ptr, offset_ms);\n    }\n    /**\n    * @returns {number}\n    */\n    offsetMs() {\n        const ret = wasm.clockwithoffset_offsetMs(this.ptr);\n        return ret;\n    }\n}\n/**\n*/\nclass GenericContract {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GenericContract.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_genericcontract_free(ptr);\n    }\n    /**\n    * @returns {string}\n    */\n    get address() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genericcontract_address(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {SignedMessage} message\n    * @returns {Promise<Transaction>}\n    */\n    sendMessageLocally(message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genericcontract_sendMessageLocally(retptr, this.ptr, addHeapObject(message));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {SignedMessage} message\n    * @returns {Promise<PendingTransaction>}\n    */\n    sendMessage(message) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.genericcontract_sendMessage(retptr, this.ptr, addHeapObject(message));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {Promise<void>}\n    */\n    refresh() {\n        const ret = wasm.genericcontract_refresh(this.ptr);\n        return takeObject(ret);\n    }\n    /**\n    * @param {string} block_id\n    * @returns {Promise<void>}\n    */\n    handleBlock(block_id) {\n        const ptr0 = passStringToWasm0(block_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        const ret = wasm.genericcontract_handleBlock(this.ptr, ptr0, len0);\n        return takeObject(ret);\n    }\n    /**\n    * @param {string} lt\n    * @returns {Promise<void>}\n    */\n    preloadTransactions(lt) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(lt, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.genericcontract_preloadTransactions(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {PollingMethod}\n    */\n    get pollingMethod() {\n        const ret = wasm.genericcontract_pollingMethod(this.ptr);\n        return takeObject(ret);\n    }\n}\n/**\n*/\nclass GqlConnection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GqlConnection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_gqlconnection_free(ptr);\n    }\n    /**\n    * @param {ClockWithOffset} clock\n    * @param {IGqlSender} sender\n    */\n    constructor(clock, sender) {\n        _assertClass(clock, ClockWithOffset);\n        const ret = wasm.gqlconnection_new(clock.ptr, addHeapObject(sender));\n        return GqlConnection.__wrap(ret);\n    }\n    /**\n    * @param {string} address\n    * @returns {Promise<LatestBlock>}\n    */\n    getLatestBlock(address) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.gqlconnection_getLatestBlock(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} current_block_id\n    * @param {string} address\n    * @param {number} timeout\n    * @returns {Promise<string>}\n    */\n    waitForNextBlock(current_block_id, address, timeout) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(current_block_id, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            const ptr1 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len1 = WASM_VECTOR_LEN;\n            wasm.gqlconnection_waitForNextBlock(retptr, this.ptr, ptr0, len0, ptr1, len1, timeout);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass GqlQuery {\n\n    static __wrap(ptr) {\n        const obj = Object.create(GqlQuery.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_gqlquery_free(ptr);\n    }\n    /**\n    * @param {string} data\n    */\n    onReceive(data) {\n        const ptr = this.__destroy_into_raw();\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.gqlquery_onReceive(ptr, ptr0, len0);\n    }\n    /**\n    * @param {any} arg0\n    */\n    onError(arg0) {\n        const ptr = this.__destroy_into_raw();\n        wasm.gqlquery_onError(ptr, addHeapObject(arg0));\n    }\n    /**\n    */\n    onTimeout() {\n        const ptr = this.__destroy_into_raw();\n        wasm.gqlquery_onTimeout(ptr);\n    }\n}\n/**\n*/\nclass JrpcConnection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JrpcConnection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jrpcconnection_free(ptr);\n    }\n    /**\n    * @param {ClockWithOffset} clock\n    * @param {any} sender\n    */\n    constructor(clock, sender) {\n        _assertClass(clock, ClockWithOffset);\n        const ret = wasm.jrpcconnection_new(clock.ptr, addHeapObject(sender));\n        return JrpcConnection.__wrap(ret);\n    }\n}\n/**\n*/\nclass JrpcQuery {\n\n    static __wrap(ptr) {\n        const obj = Object.create(JrpcQuery.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_jrpcquery_free(ptr);\n    }\n    /**\n    * @param {string} data\n    */\n    onReceive(data) {\n        const ptr = this.__destroy_into_raw();\n        const ptr0 = passStringToWasm0(data, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        wasm.jrpcquery_onReceive(ptr, ptr0, len0);\n    }\n    /**\n    * @param {any} arg0\n    */\n    onError(arg0) {\n        const ptr = this.__destroy_into_raw();\n        wasm.jrpcquery_onError(ptr, addHeapObject(arg0));\n    }\n    /**\n    */\n    onTimeout() {\n        const ptr = this.__destroy_into_raw();\n        wasm.jrpcquery_onTimeout(ptr);\n    }\n}\n/**\n*/\nclass Transport {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Transport.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_transport_free(ptr);\n    }\n    /**\n    * @param {GqlConnection} gql\n    * @returns {Transport}\n    */\n    static fromGqlConnection(gql) {\n        _assertClass(gql, GqlConnection);\n        const ret = wasm.transport_fromGqlConnection(gql.ptr);\n        return Transport.__wrap(ret);\n    }\n    /**\n    * @param {JrpcConnection} jrpc\n    * @returns {Transport}\n    */\n    static fromJrpcConnection(jrpc) {\n        _assertClass(jrpc, JrpcConnection);\n        const ret = wasm.transport_fromJrpcConnection(jrpc.ptr);\n        return Transport.__wrap(ret);\n    }\n    /**\n    * @param {string} address\n    * @param {any} handler\n    * @returns {Promise<GenericContract>}\n    */\n    subscribeToGenericContract(address, handler) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transport_subscribeToGenericContract(retptr, this.ptr, ptr0, len0, addHeapObject(handler));\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} address\n    * @returns {Promise<FullContractState | undefined>}\n    */\n    getFullContractState(address) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transport_getFullContractState(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} code_hash\n    * @param {number} limit\n    * @param {string | undefined} continuation\n    * @returns {Promise<AccountsList>}\n    */\n    getAccountsByCodeHash(code_hash, limit, continuation) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(code_hash, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(continuation) ? 0 : passStringToWasm0(continuation, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.transport_getAccountsByCodeHash(retptr, this.ptr, ptr0, len0, limit, ptr1, len1);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} address\n    * @param {string | undefined} continuation\n    * @param {number} limit\n    * @returns {Promise<TransactionsList>}\n    */\n    getTransactions(address, continuation, limit) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(address, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            var ptr1 = isLikeNone(continuation) ? 0 : passStringToWasm0(continuation, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            var len1 = WASM_VECTOR_LEN;\n            wasm.transport_getTransactions(retptr, this.ptr, ptr0, len0, ptr1, len1, limit);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} hash\n    * @returns {Promise<Transaction | undefined>}\n    */\n    getTransaction(hash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(hash, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transport_getTransaction(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @param {string} message_hash\n    * @returns {Promise<Transaction | undefined>}\n    */\n    getDstTransaction(message_hash) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(message_hash, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.transport_getDstTransaction(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n/**\n*/\nclass UnsignedMessage {\n\n    static __wrap(ptr) {\n        const obj = Object.create(UnsignedMessage.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    __destroy_into_raw() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n\n        return ptr;\n    }\n\n    free() {\n        const ptr = this.__destroy_into_raw();\n        wasm.__wbg_unsignedmessage_free(ptr);\n    }\n    /**\n    * @param {ClockWithOffset} clock\n    */\n    refreshTimeout(clock) {\n        _assertClass(clock, ClockWithOffset);\n        wasm.unsignedmessage_refreshTimeout(this.ptr, clock.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    expireAt() {\n        const ret = wasm.unsignedmessage_expireAt(this.ptr);\n        return ret >>> 0;\n    }\n    /**\n    * @returns {string}\n    */\n    get hash() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unsignedmessage_hash(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            return getStringFromWasm0(r0, r1);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n            wasm.__wbindgen_free(r0, r1);\n        }\n    }\n    /**\n    * @param {string} signature\n    * @returns {SignedMessage}\n    */\n    sign(signature) {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            const ptr0 = passStringToWasm0(signature, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n            const len0 = WASM_VECTOR_LEN;\n            wasm.unsignedmessage_sign(retptr, this.ptr, ptr0, len0);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n    /**\n    * @returns {SignedMessage}\n    */\n    signFake() {\n        try {\n            const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);\n            wasm.unsignedmessage_signFake(retptr, this.ptr);\n            var r0 = getInt32Memory0()[retptr / 4 + 0];\n            var r1 = getInt32Memory0()[retptr / 4 + 1];\n            var r2 = getInt32Memory0()[retptr / 4 + 2];\n            if (r2) {\n                throw takeObject(r1);\n            }\n            return takeObject(r0);\n        } finally {\n            wasm.__wbindgen_add_to_stack_pointer(16);\n        }\n    }\n}\n\nasync function load(module, imports) {\n    if (typeof Response === 'function' && module instanceof Response) {\n        if (typeof WebAssembly.instantiateStreaming === 'function') {\n            try {\n                return await WebAssembly.instantiateStreaming(module, imports);\n\n            } catch (e) {\n                if (module.headers.get('Content-Type') != 'application/wasm') {\n                    console.warn(\"`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\\n\", e);\n\n                } else {\n                    throw e;\n                }\n            }\n        }\n\n        const bytes = await module.arrayBuffer();\n        return await WebAssembly.instantiate(bytes, imports);\n\n    } else {\n        const instance = await WebAssembly.instantiate(module, imports);\n\n        if (instance instanceof WebAssembly.Instance) {\n            return { instance, module };\n\n        } else {\n            return instance;\n        }\n    }\n}\n\nfunction getImports() {\n    const imports = {};\n    imports.wbg = {};\n    imports.wbg.__wbindgen_string_new = function(arg0, arg1) {\n        const ret = getStringFromWasm0(arg0, arg1);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_length_6e3bbe7c8bd4dbd8 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_undefined = function(arg0) {\n        const ret = getObject(arg0) === undefined;\n        return ret;\n    };\n    imports.wbg.__wbindgen_number_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'number' ? obj : undefined;\n        getFloat64Memory0()[arg0 / 8 + 1] = isLikeNone(ret) ? 0 : ret;\n        getInt32Memory0()[arg0 / 4 + 0] = !isLikeNone(ret);\n    };\n    imports.wbg.__wbindgen_is_null = function(arg0) {\n        const ret = getObject(arg0) === null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_string_get = function(arg0, arg1) {\n        const obj = getObject(arg1);\n        const ret = typeof(obj) === 'string' ? obj : undefined;\n        var ptr0 = isLikeNone(ret) ? 0 : passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        var len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_is_object = function(arg0) {\n        const val = getObject(arg0);\n        const ret = typeof(val) === 'object' && val !== null;\n        return ret;\n    };\n    imports.wbg.__wbindgen_is_string = function(arg0) {\n        const ret = typeof(getObject(arg0)) === 'string';\n        return ret;\n    };\n    imports.wbg.__wbindgen_object_drop_ref = function(arg0) {\n        takeObject(arg0);\n    };\n    imports.wbg.__wbindgen_number_new = function(arg0) {\n        const ret = arg0;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_now_58886682b7e790d7 = function() {\n        const ret = Date.now();\n        return ret;\n    };\n    imports.wbg.__wbg_new_8d2af00bc1e329ee = function(arg0, arg1) {\n        const ret = new Error(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_0b9bfdd97583284e = function() {\n        const ret = new Object();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_send_55c5735308610fc0 = function(arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).send(getStringFromWasm0(arg1, arg2), GqlQuery.__wrap(arg3), arg4 !== 0);\n    };\n    imports.wbg.__wbg_send_c4fe5ef5f4851b5a = function(arg0, arg1, arg2, arg3, arg4) {\n        getObject(arg0).send(getStringFromWasm0(arg1, arg2), JrpcQuery.__wrap(arg3), arg4 !== 0);\n    };\n    imports.wbg.__wbg_new_1d9a920c6bfc44a8 = function() {\n        const ret = new Array();\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_push_740e4b286702d964 = function(arg0, arg1) {\n        const ret = getObject(arg0).push(getObject(arg1));\n        return ret;\n    };\n    imports.wbg.__wbg_genericcontract_new = function(arg0) {\n        const ret = GenericContract.__wrap(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_onMessageSent_fc2ded3b8153507a = function(arg0, arg1, arg2) {\n        getObject(arg0).onMessageSent(takeObject(arg1), takeObject(arg2));\n    };\n    imports.wbg.__wbg_onMessageExpired_fbdb4b1a8bb0e7c5 = function(arg0, arg1) {\n        getObject(arg0).onMessageExpired(takeObject(arg1));\n    };\n    imports.wbg.__wbg_onStateChanged_e696a7b987dba9ea = function(arg0, arg1) {\n        getObject(arg0).onStateChanged(takeObject(arg1));\n    };\n    imports.wbg.__wbg_onTransactionsFound_33b7b56c770e2e88 = function(arg0, arg1, arg2) {\n        getObject(arg0).onTransactionsFound(takeObject(arg1), takeObject(arg2));\n    };\n    imports.wbg.__wbg_keys_0702294afaeb6044 = function(arg0) {\n        const ret = Object.keys(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_57245cc7d7c7619d = function(arg0, arg1) {\n        const ret = getObject(arg0)[arg1 >>> 0];\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_boolean_get = function(arg0) {\n        const v = getObject(arg0);\n        const ret = typeof(v) === 'boolean' ? (v ? 1 : 0) : 2;\n        return ret;\n    };\n    imports.wbg.__wbg_isLocal_0cc0f6258c8cf6ca = function(arg0) {\n        const ret = getObject(arg0).isLocal();\n        return ret;\n    };\n    imports.wbg.__wbg_new_9962f939219f1820 = function(arg0, arg1) {\n        try {\n            var state0 = {a: arg0, b: arg1};\n            var cb0 = (arg0, arg1) => {\n                const a = state0.a;\n                state0.a = 0;\n                try {\n                    return __wbg_adapter_163(a, state0.b, arg0, arg1);\n                } finally {\n                    state0.a = a;\n                }\n            };\n            const ret = new Promise(cb0);\n            return addHeapObject(ret);\n        } finally {\n            state0.a = state0.b = 0;\n        }\n    };\n    imports.wbg.__wbg_static_accessor_NODE_MODULE_cf6401cc1091279e = function() {\n        const ret = module;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_object_clone_ref = function(arg0) {\n        const ret = getObject(arg0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_process_0cc2ada8524d6f83 = function(arg0) {\n        const ret = getObject(arg0).process;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_versions_c11acceab27a6c87 = function(arg0) {\n        const ret = getObject(arg0).versions;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_node_7ff1ce49caf23815 = function(arg0) {\n        const ret = getObject(arg0).node;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_require_a746e79b322b9336 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).require(getStringFromWasm0(arg1, arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_crypto_2036bed7c44c25e7 = function(arg0) {\n        const ret = getObject(arg0).crypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_msCrypto_a21fc88caf1ecdc8 = function(arg0) {\n        const ret = getObject(arg0).msCrypto;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_newwithlength_f5933855e4f48a19 = function(arg0) {\n        const ret = new Uint8Array(arg0 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_get_765201544a2b6869 = function() { return handleError(function (arg0, arg1) {\n        const ret = Reflect.get(getObject(arg0), getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_self_6d479506f72c6a71 = function() { return handleError(function () {\n        const ret = self.self;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_window_f2557cc78490aceb = function() { return handleError(function () {\n        const ret = window.window;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_globalThis_7f206bda628d5286 = function() { return handleError(function () {\n        const ret = globalThis.globalThis;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_global_ba75c50d1cf384f4 = function() { return handleError(function () {\n        const ret = __webpack_require__.g.global;\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_newnoargs_b5b063fc6c2f0376 = function(arg0, arg1) {\n        const ret = new Function(getStringFromWasm0(arg0, arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_call_97ae9d8645dc388b = function() { return handleError(function (arg0, arg1) {\n        const ret = getObject(arg0).call(getObject(arg1));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_isArray_27c46c67f498e15d = function(arg0) {\n        const ret = Array.isArray(getObject(arg0));\n        return ret;\n    };\n    imports.wbg.__wbg_call_168da88779e35f61 = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = getObject(arg0).call(getObject(arg1), getObject(arg2));\n        return addHeapObject(ret);\n    }, arguments) };\n    imports.wbg.__wbg_set_bf3f89b92d5a34bf = function() { return handleError(function (arg0, arg1, arg2) {\n        const ret = Reflect.set(getObject(arg0), getObject(arg1), getObject(arg2));\n        return ret;\n    }, arguments) };\n    imports.wbg.__wbg_randomFillSync_065afffde01daa66 = function() { return handleError(function (arg0, arg1, arg2) {\n        getObject(arg0).randomFillSync(getArrayU8FromWasm0(arg1, arg2));\n    }, arguments) };\n    imports.wbg.__wbg_subarray_58ad4efbb5bcb886 = function(arg0, arg1, arg2) {\n        const ret = getObject(arg0).subarray(arg1 >>> 0, arg2 >>> 0);\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_getRandomValues_b99eec4244a475bb = function() { return handleError(function (arg0, arg1) {\n        getObject(arg0).getRandomValues(getObject(arg1));\n    }, arguments) };\n    imports.wbg.__wbg_length_9e1ae1900cb0fbd5 = function(arg0) {\n        const ret = getObject(arg0).length;\n        return ret;\n    };\n    imports.wbg.__wbindgen_memory = function() {\n        const ret = wasm.memory;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_buffer_3f3d764d4747d564 = function(arg0) {\n        const ret = getObject(arg0).buffer;\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_new_8c3f0052272a457a = function(arg0) {\n        const ret = new Uint8Array(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbg_set_83db9690f9353e79 = function(arg0, arg1, arg2) {\n        getObject(arg0).set(getObject(arg1), arg2 >>> 0);\n    };\n    imports.wbg.__wbindgen_debug_string = function(arg0, arg1) {\n        const ret = debugString(getObject(arg1));\n        const ptr0 = passStringToWasm0(ret, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        const len0 = WASM_VECTOR_LEN;\n        getInt32Memory0()[arg0 / 4 + 1] = len0;\n        getInt32Memory0()[arg0 / 4 + 0] = ptr0;\n    };\n    imports.wbg.__wbindgen_throw = function(arg0, arg1) {\n        throw new Error(getStringFromWasm0(arg0, arg1));\n    };\n    imports.wbg.__wbg_then_11f7a54d67b4bfad = function(arg0, arg1) {\n        const ret = getObject(arg0).then(getObject(arg1));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_cb_drop = function(arg0) {\n        const obj = takeObject(arg0).original;\n        if (obj.cnt-- == 1) {\n            obj.a = 0;\n            return true;\n        }\n        const ret = false;\n        return ret;\n    };\n    imports.wbg.__wbg_resolve_99fe17964f31ffc0 = function(arg0) {\n        const ret = Promise.resolve(getObject(arg0));\n        return addHeapObject(ret);\n    };\n    imports.wbg.__wbindgen_closure_wrapper6437 = function(arg0, arg1, arg2) {\n        const ret = makeMutClosure(arg0, arg1, 925, __wbg_adapter_32);\n        return addHeapObject(ret);\n    };\n\n    return imports;\n}\n\nfunction initMemory(imports, maybe_memory) {\n\n}\n\nfunction finalizeInit(instance, module) {\n    wasm = instance.exports;\n    init.__wbindgen_wasm_module = module;\n    cachedFloat64Memory0 = new Float64Array();\n    cachedInt32Memory0 = new Int32Array();\n    cachedUint8Memory0 = new Uint8Array();\n\n\n    return wasm;\n}\n\nfunction initSync(module) {\n    const imports = getImports();\n\n    initMemory(imports);\n\n    if (!(module instanceof WebAssembly.Module)) {\n        module = new WebAssembly.Module(module);\n    }\n\n    const instance = new WebAssembly.Instance(module, imports);\n\n    return finalizeInit(instance, module);\n}\n\nasync function init(input) {\n    if (typeof input === 'undefined') {\n        input = new URL(/* asset import */ __webpack_require__(/*! nekoton_wasm_bg.wasm */ \"./node_modules/nekoton-wasm/nekoton_wasm_bg.wasm\"), __webpack_require__.b);\n    }\n    const imports = getImports();\n\n    if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {\n        input = fetch(input);\n    }\n\n    initMemory(imports);\n\n    const { instance, module } = await load(await input, imports);\n\n    return finalizeInit(instance, module);\n}\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (init);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/nekoton-wasm/nekoton_wasm.js\n");

/***/ }),

/***/ "./node_modules/nekoton-wasm/nekoton_wasm_bg.wasm":
/*!********************************************************!*\
  !*** ./node_modules/nekoton-wasm/nekoton_wasm_bg.wasm ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
module.exports = __webpack_require__.p + "3610d36b17fcc23a1d17.wasm";

/***/ }),

/***/ "./src/styles/main.scss":
/*!******************************!*\
  !*** ./src/styles/main.scss ***!
  \******************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! !../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js */ \"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n/* harmony import */ var _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! !!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./main.scss */ \"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/styles/main.scss\");\n\n            \n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = _node_modules_style_loader_dist_runtime_injectStylesIntoStyleTag_js__WEBPACK_IMPORTED_MODULE_0___default()(_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_1__.default, options);\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (_node_modules_css_loader_dist_cjs_js_node_modules_sass_loader_dist_cjs_js_main_scss__WEBPACK_IMPORTED_MODULE_1__.default.locals || {});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvc3R5bGVzL21haW4uc2Nzcy5qcyIsInNvdXJjZXMiOlsid2VicGFjazovL2hleC1iYXR0bGUtZ2FtZS8uL3NyYy9zdHlsZXMvbWFpbi5zY3NzPzM3NWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGFwaSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgICAgICAgaW1wb3J0IGNvbnRlbnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vbWFpbi5zY3NzXCI7XG5cbnZhciBvcHRpb25zID0ge307XG5cbm9wdGlvbnMuaW5zZXJ0ID0gXCJoZWFkXCI7XG5vcHRpb25zLnNpbmdsZXRvbiA9IGZhbHNlO1xuXG52YXIgdXBkYXRlID0gYXBpKGNvbnRlbnQsIG9wdGlvbnMpO1xuXG5cblxuZXhwb3J0IGRlZmF1bHQgY29udGVudC5sb2NhbHMgfHwge307Il0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/styles/main.scss\n");

/***/ }),

/***/ "./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":
/*!****************************************************************************!*\
  !*** ./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js ***!
  \****************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce =  true ? __webpack_require__.nc : 0;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && typeof btoa !== 'undefined') {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\n");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			id: moduleId,
/******/ 			loaded: false,
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/compat get default export */
/******/ 	(() => {
/******/ 		// getDefaultExport function for compatibility with non-harmony modules
/******/ 		__webpack_require__.n = (module) => {
/******/ 			var getter = module && module.__esModule ?
/******/ 				() => (module['default']) :
/******/ 				() => (module);
/******/ 			__webpack_require__.d(getter, { a: getter });
/******/ 			return getter;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/harmony module decorator */
/******/ 	(() => {
/******/ 		__webpack_require__.hmd = (module) => {
/******/ 			module = Object.create(module);
/******/ 			if (!module.children) module.children = [];
/******/ 			Object.defineProperty(module, 'exports', {
/******/ 				enumerable: true,
/******/ 				set: () => {
/******/ 					throw new Error('ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' + module.id);
/******/ 				}
/******/ 			});
/******/ 			return module;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/publicPath */
/******/ 	(() => {
/******/ 		var scriptUrl;
/******/ 		if (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + "";
/******/ 		var document = __webpack_require__.g.document;
/******/ 		if (!scriptUrl && document) {
/******/ 			if (document.currentScript)
/******/ 				scriptUrl = document.currentScript.src
/******/ 			if (!scriptUrl) {
/******/ 				var scripts = document.getElementsByTagName("script");
/******/ 				if(scripts.length) scriptUrl = scripts[scripts.length - 1].src
/******/ 			}
/******/ 		}
/******/ 		// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration
/******/ 		// or pass an empty string ("") and set the __webpack_public_path__ variable from your code to use your own logic.
/******/ 		if (!scriptUrl) throw new Error("Automatic publicPath is not supported in this browser");
/******/ 		scriptUrl = scriptUrl.replace(/#.*$/, "").replace(/\?.*$/, "").replace(/\/[^\/]+$/, "/");
/******/ 		__webpack_require__.p = scriptUrl;
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		__webpack_require__.b = document.baseURI || self.location.href;
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			"main": 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		// no on chunks loaded
/******/ 		
/******/ 		// no jsonp function
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval-source-map devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;